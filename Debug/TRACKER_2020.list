
TRACKER_2020.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c2a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  0800c438  0800c438  0001c438  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c880  0800c880  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c880  0800c880  0001c880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c888  0800c888  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c888  0800c888  0001c888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c88c  0800c88c  0001c88c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800c890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010e4  200001f8  0800ca88  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200012dc  0800ca88  000212dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001300f  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000269f  00000000  00000000  00033237  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001208  00000000  00000000  000358d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001100  00000000  00000000  00036ae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023103  00000000  00000000  00037be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d8f2  00000000  00000000  0005ace3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2881  00000000  00000000  000685d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013ae56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b5c  00000000  00000000  0013aed4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c41c 	.word	0x0800c41c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800c41c 	.word	0x0800c41c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <HMC5883L_initialize>:
 * averaging, 15 Hz data output rate, normal measurement bias, a,d 1090 gain (in
 * terms of LSB/Gauss). Be sure to adjust any settings you need specifically
 * after initialization, especially the gain settings if you happen to be seeing
 * a lot of -4096 values (see the datasheet for mor information).
 */
void HMC5883L_initialize() {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
    devAddr = HMC5883L_DEFAULT_ADDRESS;
 8000f8c:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <HMC5883L_initialize+0x28>)
 8000f8e:	221e      	movs	r2, #30
 8000f90:	701a      	strb	r2, [r3, #0]
    // write CONFIG_A register
    I2Cdev_writeByte(devAddr, HMC5883L_RA_CONFIG_A,
 8000f92:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <HMC5883L_initialize+0x28>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2270      	movs	r2, #112	; 0x70
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 f944 	bl	8001228 <I2Cdev_writeByte>
        (HMC5883L_AVERAGING_8 << (HMC5883L_CRA_AVERAGE_BIT - HMC5883L_CRA_AVERAGE_LENGTH + 1)) |
        (HMC5883L_RATE_15     << (HMC5883L_CRA_RATE_BIT - HMC5883L_CRA_RATE_LENGTH + 1)) |
        (HMC5883L_BIAS_NORMAL << (HMC5883L_CRA_BIAS_BIT - HMC5883L_CRA_BIAS_LENGTH + 1)));

    // write CONFIG_B register
    HMC5883L_setGain(HMC5883L_GAIN_1090);
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	f000 f831 	bl	8001008 <HMC5883L_setGain>

    // write MODE register
    HMC5883L_setMode(HMC5883L_MODE_CONTINUOUS);
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f000 f842 	bl	8001030 <HMC5883L_setMode>
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000214 	.word	0x20000214

08000fb4 <HMC5883L_testConnection>:

/** Verify the I2C connection.
 * Make sure the device is connected and responds as expected.
 * @return True if connection is valid, false otherwise
 */
bool HMC5883L_testConnection() {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af02      	add	r7, sp, #8
    if (I2Cdev_readBytes(devAddr, HMC5883L_RA_ID_A, 3, buffer, 0) == 3) {
 8000fba:	4b11      	ldr	r3, [pc, #68]	; (8001000 <HMC5883L_testConnection+0x4c>)
 8000fbc:	7818      	ldrb	r0, [r3, #0]
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	9300      	str	r3, [sp, #0]
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <HMC5883L_testConnection+0x50>)
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	210a      	movs	r1, #10
 8000fc8:	f000 f8f6 	bl	80011b8 <I2Cdev_readBytes>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b03      	cmp	r3, #3
 8000fd0:	d112      	bne.n	8000ff8 <HMC5883L_testConnection+0x44>
        return (buffer[0] == 'H' && buffer[1] == '4' && buffer[2] == '3');
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <HMC5883L_testConnection+0x50>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b48      	cmp	r3, #72	; 0x48
 8000fd8:	d109      	bne.n	8000fee <HMC5883L_testConnection+0x3a>
 8000fda:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <HMC5883L_testConnection+0x50>)
 8000fdc:	785b      	ldrb	r3, [r3, #1]
 8000fde:	2b34      	cmp	r3, #52	; 0x34
 8000fe0:	d105      	bne.n	8000fee <HMC5883L_testConnection+0x3a>
 8000fe2:	4b08      	ldr	r3, [pc, #32]	; (8001004 <HMC5883L_testConnection+0x50>)
 8000fe4:	789b      	ldrb	r3, [r3, #2]
 8000fe6:	2b33      	cmp	r3, #51	; 0x33
 8000fe8:	d101      	bne.n	8000fee <HMC5883L_testConnection+0x3a>
 8000fea:	2301      	movs	r3, #1
 8000fec:	e000      	b.n	8000ff0 <HMC5883L_testConnection+0x3c>
 8000fee:	2300      	movs	r3, #0
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	e000      	b.n	8000ffa <HMC5883L_testConnection+0x46>
    }
    return false;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000214 	.word	0x20000214
 8001004:	20000218 	.word	0x20000218

08001008 <HMC5883L_setGain>:
 * @see getGain()
 * @see HMC5883L_RA_CONFIG_B
 * @see HMC5883L_CRB_GAIN_BIT
 * @see HMC5883L_CRB_GAIN_LENGTH
 */
void HMC5883L_setGain(uint8_t gain) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
    // use this method to guarantee that bits 4-0 are set to zero, which is a
    // requirement specified in the datasheet; it's actually more efficient than
    // using the I2Cdev.writeBits method
    I2Cdev_writeByte(devAddr, HMC5883L_RA_CONFIG_B, gain << (HMC5883L_CRB_GAIN_BIT - HMC5883L_CRB_GAIN_LENGTH + 1));
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <HMC5883L_setGain+0x24>)
 8001014:	7818      	ldrb	r0, [r3, #0]
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	015b      	lsls	r3, r3, #5
 800101a:	b2db      	uxtb	r3, r3
 800101c:	461a      	mov	r2, r3
 800101e:	2101      	movs	r1, #1
 8001020:	f000 f902 	bl	8001228 <I2Cdev_writeByte>
}
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000214 	.word	0x20000214

08001030 <HMC5883L_setMode>:
 * @see HMC5883L_MODE_IDLE
 * @see HMC5883L_RA_MODE
 * @see HMC5883L_MODEREG_BIT
 * @see HMC5883L_MODEREG_LENGTH
 */
void HMC5883L_setMode(uint8_t newMode) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
    // use this method to guarantee that bits 7-2 are set to zero, which is a
    // requirement specified in the datasheet; it's actually more efficient than
    // using the I2Cdev.writeBits method
    I2Cdev_writeByte(devAddr, HMC5883L_RA_MODE, newMode << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1));
 800103a:	4b07      	ldr	r3, [pc, #28]	; (8001058 <HMC5883L_setMode+0x28>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	79fa      	ldrb	r2, [r7, #7]
 8001040:	2102      	movs	r1, #2
 8001042:	4618      	mov	r0, r3
 8001044:	f000 f8f0 	bl	8001228 <I2Cdev_writeByte>
    mode = newMode; // track to tell if we have to clear bit 7 after a read
 8001048:	4a04      	ldr	r2, [pc, #16]	; (800105c <HMC5883L_setMode+0x2c>)
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	7013      	strb	r3, [r2, #0]
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000214 	.word	0x20000214
 800105c:	2000021e 	.word	0x2000021e

08001060 <HMC5883L_getHeading>:
 * @param x 16-bit signed integer container for X-axis heading
 * @param y 16-bit signed integer container for Y-axis heading
 * @param z 16-bit signed integer container for Z-axis heading
 * @see HMC5883L_RA_DATAX_H
 */
void HMC5883L_getHeading(int16_t *x, int16_t *y, int16_t *z) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af02      	add	r7, sp, #8
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
    I2Cdev_readBytes(devAddr, HMC5883L_RA_DATAX_H, 6, buffer, 0);
 800106c:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <HMC5883L_getHeading+0x80>)
 800106e:	7818      	ldrb	r0, [r3, #0]
 8001070:	2300      	movs	r3, #0
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <HMC5883L_getHeading+0x84>)
 8001076:	2206      	movs	r2, #6
 8001078:	2103      	movs	r1, #3
 800107a:	f000 f89d 	bl	80011b8 <I2Cdev_readBytes>
    if (mode == HMC5883L_MODE_SINGLE) I2Cdev_writeByte(devAddr, HMC5883L_RA_MODE, HMC5883L_MODE_SINGLE << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1));
 800107e:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <HMC5883L_getHeading+0x88>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d106      	bne.n	8001094 <HMC5883L_getHeading+0x34>
 8001086:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <HMC5883L_getHeading+0x80>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2201      	movs	r2, #1
 800108c:	2102      	movs	r1, #2
 800108e:	4618      	mov	r0, r3
 8001090:	f000 f8ca 	bl	8001228 <I2Cdev_writeByte>
    *x = (((int16_t)buffer[0]) << 8) | buffer[1];
 8001094:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <HMC5883L_getHeading+0x84>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	b21a      	sxth	r2, r3
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <HMC5883L_getHeading+0x84>)
 800109e:	785b      	ldrb	r3, [r3, #1]
 80010a0:	b21b      	sxth	r3, r3
 80010a2:	4313      	orrs	r3, r2
 80010a4:	b21a      	sxth	r2, r3
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	801a      	strh	r2, [r3, #0]
    *y = (((int16_t)buffer[4]) << 8) | buffer[5];
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <HMC5883L_getHeading+0x84>)
 80010ac:	791b      	ldrb	r3, [r3, #4]
 80010ae:	021b      	lsls	r3, r3, #8
 80010b0:	b21a      	sxth	r2, r3
 80010b2:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <HMC5883L_getHeading+0x84>)
 80010b4:	795b      	ldrb	r3, [r3, #5]
 80010b6:	b21b      	sxth	r3, r3
 80010b8:	4313      	orrs	r3, r2
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	801a      	strh	r2, [r3, #0]
    *z = (((int16_t)buffer[2]) << 8) | buffer[3];
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <HMC5883L_getHeading+0x84>)
 80010c2:	789b      	ldrb	r3, [r3, #2]
 80010c4:	021b      	lsls	r3, r3, #8
 80010c6:	b21a      	sxth	r2, r3
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <HMC5883L_getHeading+0x84>)
 80010ca:	78db      	ldrb	r3, [r3, #3]
 80010cc:	b21b      	sxth	r3, r3
 80010ce:	4313      	orrs	r3, r2
 80010d0:	b21a      	sxth	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	801a      	strh	r2, [r3, #0]
}
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000214 	.word	0x20000214
 80010e4:	20000218 	.word	0x20000218
 80010e8:	2000021e 	.word	0x2000021e

080010ec <HMC5883L_getReadyStatus>:
 * the status register for monitoring the device for measurement data.
 * @return Data ready status
 * @see HMC5883L_RA_STATUS
 * @see HMC5883L_STATUS_READY_BIT
 */
bool HMC5883L_getReadyStatus() {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af02      	add	r7, sp, #8
    I2Cdev_readBit(devAddr, HMC5883L_RA_STATUS, HMC5883L_STATUS_READY_BIT, buffer, 0);
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <HMC5883L_getReadyStatus+0x2c>)
 80010f4:	7818      	ldrb	r0, [r3, #0]
 80010f6:	2300      	movs	r3, #0
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	4b08      	ldr	r3, [pc, #32]	; (800111c <HMC5883L_getReadyStatus+0x30>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	2109      	movs	r1, #9
 8001100:	f000 f81e 	bl	8001140 <I2Cdev_readBit>
    return buffer[0];
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <HMC5883L_getReadyStatus+0x30>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	bf14      	ite	ne
 800110c:	2301      	movne	r3, #1
 800110e:	2300      	moveq	r3, #0
 8001110:	b2db      	uxtb	r3, r3
}
 8001112:	4618      	mov	r0, r3
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000214 	.word	0x20000214
 800111c:	20000218 	.word	0x20000218

08001120 <I2Cdev_init>:
uint16_t I2Cdev_readTimeout = I2CDEV_DEFAULT_READ_TIMEOUT;

/** Sets device handle to use for communications
 * You can call this function and set any other device at any moment
 */
void I2Cdev_init(I2C_HandleTypeDef * hi2c){
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
	I2Cdev_hi2c = hi2c;
 8001128:	4a04      	ldr	r2, [pc, #16]	; (800113c <I2Cdev_init+0x1c>)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6013      	str	r3, [r2, #0]
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	20000220 	.word	0x20000220

08001140 <I2Cdev_readBit>:
 * @param data Container for single bit value
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev_readTimeout)
 * @return Status of read operation (true = success)
 */
uint8_t I2Cdev_readBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t *data, uint16_t timeout)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	603b      	str	r3, [r7, #0]
 8001148:	4603      	mov	r3, r0
 800114a:	71fb      	strb	r3, [r7, #7]
 800114c:	460b      	mov	r3, r1
 800114e:	71bb      	strb	r3, [r7, #6]
 8001150:	4613      	mov	r3, r2
 8001152:	717b      	strb	r3, [r7, #5]
    uint8_t b;
    uint8_t count = I2Cdev_readByte(devAddr, regAddr, &b, timeout);
 8001154:	8b3b      	ldrh	r3, [r7, #24]
 8001156:	f107 020e 	add.w	r2, r7, #14
 800115a:	79b9      	ldrb	r1, [r7, #6]
 800115c:	79f8      	ldrb	r0, [r7, #7]
 800115e:	f000 f813 	bl	8001188 <I2Cdev_readByte>
 8001162:	4603      	mov	r3, r0
 8001164:	73fb      	strb	r3, [r7, #15]
    *data = b & (1 << bitNum);
 8001166:	797b      	ldrb	r3, [r7, #5]
 8001168:	2201      	movs	r2, #1
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	b25a      	sxtb	r2, r3
 8001170:	7bbb      	ldrb	r3, [r7, #14]
 8001172:	b25b      	sxtb	r3, r3
 8001174:	4013      	ands	r3, r2
 8001176:	b25b      	sxtb	r3, r3
 8001178:	b2da      	uxtb	r2, r3
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	701a      	strb	r2, [r3, #0]
    return count;
 800117e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <I2Cdev_readByte>:
 * @param data Container for byte value read from device
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev_readTimeout)
 * @return Status of read operation (true = success)
 */
uint8_t I2Cdev_readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af02      	add	r7, sp, #8
 800118e:	603a      	str	r2, [r7, #0]
 8001190:	461a      	mov	r2, r3
 8001192:	4603      	mov	r3, r0
 8001194:	71fb      	strb	r3, [r7, #7]
 8001196:	460b      	mov	r3, r1
 8001198:	71bb      	strb	r3, [r7, #6]
 800119a:	4613      	mov	r3, r2
 800119c:	80bb      	strh	r3, [r7, #4]
    return I2Cdev_readBytes(devAddr, regAddr, 1, data, timeout);
 800119e:	79b9      	ldrb	r1, [r7, #6]
 80011a0:	79f8      	ldrb	r0, [r7, #7]
 80011a2:	88bb      	ldrh	r3, [r7, #4]
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	2201      	movs	r2, #1
 80011aa:	f000 f805 	bl	80011b8 <I2Cdev_readBytes>
 80011ae:	4603      	mov	r3, r0
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <I2Cdev_readBytes>:
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev_readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
uint8_t I2Cdev_readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af02      	add	r7, sp, #8
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	4603      	mov	r3, r0
 80011c2:	71fb      	strb	r3, [r7, #7]
 80011c4:	460b      	mov	r3, r1
 80011c6:	71bb      	strb	r3, [r7, #6]
 80011c8:	4613      	mov	r3, r2
 80011ca:	717b      	strb	r3, [r7, #5]
    uint16_t tout = timeout > 0 ? timeout : I2CDEV_DEFAULT_READ_TIMEOUT;
 80011cc:	8b3b      	ldrh	r3, [r7, #24]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <I2Cdev_readBytes+0x1e>
 80011d2:	8b3b      	ldrh	r3, [r7, #24]
 80011d4:	e001      	b.n	80011da <I2Cdev_readBytes+0x22>
 80011d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011da:	81fb      	strh	r3, [r7, #14]

    HAL_I2C_Master_Transmit(I2Cdev_hi2c, devAddr << 1, &regAddr, 1, tout);
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <I2Cdev_readBytes+0x6c>)
 80011de:	6818      	ldr	r0, [r3, #0]
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	b299      	uxth	r1, r3
 80011e8:	89fb      	ldrh	r3, [r7, #14]
 80011ea:	1dba      	adds	r2, r7, #6
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	2301      	movs	r3, #1
 80011f0:	f003 feec 	bl	8004fcc <HAL_I2C_Master_Transmit>
    if (HAL_I2C_Master_Receive(I2Cdev_hi2c, devAddr << 1, data, length, tout) == HAL_OK) return length;
 80011f4:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <I2Cdev_readBytes+0x6c>)
 80011f6:	6818      	ldr	r0, [r3, #0]
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	b299      	uxth	r1, r3
 8001200:	797b      	ldrb	r3, [r7, #5]
 8001202:	b29a      	uxth	r2, r3
 8001204:	89fb      	ldrh	r3, [r7, #14]
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	4613      	mov	r3, r2
 800120a:	683a      	ldr	r2, [r7, #0]
 800120c:	f003 ffdc 	bl	80051c8 <HAL_I2C_Master_Receive>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <I2Cdev_readBytes+0x62>
 8001216:	797b      	ldrb	r3, [r7, #5]
 8001218:	e000      	b.n	800121c <I2Cdev_readBytes+0x64>
    return -1;
 800121a:	23ff      	movs	r3, #255	; 0xff
}
 800121c:	4618      	mov	r0, r3
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000220 	.word	0x20000220

08001228 <I2Cdev_writeByte>:
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev_writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
 8001232:	460b      	mov	r3, r1
 8001234:	71bb      	strb	r3, [r7, #6]
 8001236:	4613      	mov	r3, r2
 8001238:	717b      	strb	r3, [r7, #5]
    return I2Cdev_writeBytes(devAddr, regAddr, 1, &data);
 800123a:	1d7b      	adds	r3, r7, #5
 800123c:	79b9      	ldrb	r1, [r7, #6]
 800123e:	79f8      	ldrb	r0, [r7, #7]
 8001240:	2201      	movs	r2, #1
 8001242:	f000 f805 	bl	8001250 <I2Cdev_writeBytes>
 8001246:	4603      	mov	r3, r0
}
 8001248:	4618      	mov	r0, r3
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <I2Cdev_writeBytes>:
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev_writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* pData)
{
 8001250:	b590      	push	{r4, r7, lr}
 8001252:	b089      	sub	sp, #36	; 0x24
 8001254:	af04      	add	r7, sp, #16
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	4603      	mov	r3, r0
 800125a:	71fb      	strb	r3, [r7, #7]
 800125c:	460b      	mov	r3, r1
 800125e:	71bb      	strb	r3, [r7, #6]
 8001260:	4613      	mov	r3, r2
 8001262:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Write(I2Cdev_hi2c, devAddr << 1, regAddr, I2C_MEMADD_SIZE_8BIT, pData, length, 1000);
 8001264:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <I2Cdev_writeBytes+0x58>)
 8001266:	6818      	ldr	r0, [r3, #0]
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	b29b      	uxth	r3, r3
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	b299      	uxth	r1, r3
 8001270:	79bb      	ldrb	r3, [r7, #6]
 8001272:	b29c      	uxth	r4, r3
 8001274:	797b      	ldrb	r3, [r7, #5]
 8001276:	b29b      	uxth	r3, r3
 8001278:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800127c:	9202      	str	r2, [sp, #8]
 800127e:	9301      	str	r3, [sp, #4]
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	2301      	movs	r3, #1
 8001286:	4622      	mov	r2, r4
 8001288:	f004 f9c4 	bl	8005614 <HAL_I2C_Mem_Write>
 800128c:	4603      	mov	r3, r0
 800128e:	73fb      	strb	r3, [r7, #15]
    return status == HAL_OK;
 8001290:	7bfb      	ldrb	r3, [r7, #15]
 8001292:	2b00      	cmp	r3, #0
 8001294:	bf0c      	ite	eq
 8001296:	2301      	moveq	r3, #1
 8001298:	2300      	movne	r3, #0
 800129a:	b2db      	uxtb	r3, r3
 800129c:	b29b      	uxth	r3, r3
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd90      	pop	{r4, r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000220 	.word	0x20000220

080012ac <baca_potensio>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float baca_potensio(){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 80012b0:	4819      	ldr	r0, [pc, #100]	; (8001318 <baca_potensio+0x6c>)
 80012b2:	f002 fa6f 	bl	8003794 <HAL_ADC_Start>
	while (__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOC) != SET){;}
 80012b6:	bf00      	nop
 80012b8:	4b17      	ldr	r3, [pc, #92]	; (8001318 <baca_potensio+0x6c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d1f8      	bne.n	80012b8 <baca_potensio+0xc>
		  HAL_ADC_Stop(&hadc1);
 80012c6:	4814      	ldr	r0, [pc, #80]	; (8001318 <baca_potensio+0x6c>)
 80012c8:	f002 fb2a 	bl	8003920 <HAL_ADC_Stop>
		  data_potensio = HAL_ADC_GetValue(&hadc1);
 80012cc:	4812      	ldr	r0, [pc, #72]	; (8001318 <baca_potensio+0x6c>)
 80012ce:	f002 fc9b 	bl	8003c08 <HAL_ADC_GetValue>
 80012d2:	4602      	mov	r2, r0
 80012d4:	4b11      	ldr	r3, [pc, #68]	; (800131c <baca_potensio+0x70>)
 80012d6:	601a      	str	r2, [r3, #0]
		  analog_potensio = (float)data_potensio;
 80012d8:	4b10      	ldr	r3, [pc, #64]	; (800131c <baca_potensio+0x70>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	ee07 3a90 	vmov	s15, r3
 80012e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012e4:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <baca_potensio+0x74>)
 80012e6:	edc3 7a00 	vstr	s15, [r3]
		  if (analog_potensio > 4000) analog_potensio = 4000;
 80012ea:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <baca_potensio+0x74>)
 80012ec:	edd3 7a00 	vldr	s15, [r3]
 80012f0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001324 <baca_potensio+0x78>
 80012f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012fc:	dd02      	ble.n	8001304 <baca_potensio+0x58>
 80012fe:	4b08      	ldr	r3, [pc, #32]	; (8001320 <baca_potensio+0x74>)
 8001300:	4a09      	ldr	r2, [pc, #36]	; (8001328 <baca_potensio+0x7c>)
 8001302:	601a      	str	r2, [r3, #0]
		  return analog_potensio*(180.0f/4000.0f);
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <baca_potensio+0x74>)
 8001306:	edd3 7a00 	vldr	s15, [r3]
 800130a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800132c <baca_potensio+0x80>
 800130e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001312:	eeb0 0a67 	vmov.f32	s0, s15
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000fb8 	.word	0x20000fb8
 800131c:	20000fa0 	.word	0x20000fa0
 8001320:	200012a8 	.word	0x200012a8
 8001324:	457a0000 	.word	0x457a0000
 8001328:	457a0000 	.word	0x457a0000
 800132c:	3d3851ec 	.word	0x3d3851ec

08001330 <GetPOTENSIO>:
void GetPOTENSIO(){
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
	  data_Pitch1 = baca_potensio();
 8001334:	f7ff ffba 	bl	80012ac <baca_potensio>
 8001338:	eef0 7a40 	vmov.f32	s15, s0
 800133c:	4b02      	ldr	r3, [pc, #8]	; (8001348 <GetPOTENSIO+0x18>)
 800133e:	edc3 7a00 	vstr	s15, [r3]
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	2000129c 	.word	0x2000129c

0800134c <HMC5883LInit>:
void HMC5883LInit(){
 800134c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800134e:	af00      	add	r7, sp, #0
	HMC5883L_initialize();
 8001350:	f7ff fe1a 	bl	8000f88 <HMC5883L_initialize>
	HAL_Delay(1000);
 8001354:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001358:	f002 f9b6 	bl	80036c8 <HAL_Delay>
	while (!HMC5883L_testConnection()){
 800135c:	e022      	b.n	80013a4 <HMC5883LInit+0x58>
		ukuranstring = sprintf((char*)buffer, "Inisialisasi HMC5893L GAGAL \r\n");
 800135e:	4a27      	ldr	r2, [pc, #156]	; (80013fc <HMC5883LInit+0xb0>)
 8001360:	4b27      	ldr	r3, [pc, #156]	; (8001400 <HMC5883LInit+0xb4>)
 8001362:	4615      	mov	r5, r2
 8001364:	461c      	mov	r4, r3
 8001366:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001368:	6028      	str	r0, [r5, #0]
 800136a:	6069      	str	r1, [r5, #4]
 800136c:	60aa      	str	r2, [r5, #8]
 800136e:	60eb      	str	r3, [r5, #12]
 8001370:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001372:	6128      	str	r0, [r5, #16]
 8001374:	6169      	str	r1, [r5, #20]
 8001376:	61aa      	str	r2, [r5, #24]
 8001378:	8823      	ldrh	r3, [r4, #0]
 800137a:	78a2      	ldrb	r2, [r4, #2]
 800137c:	83ab      	strh	r3, [r5, #28]
 800137e:	4613      	mov	r3, r2
 8001380:	77ab      	strb	r3, [r5, #30]
 8001382:	231e      	movs	r3, #30
 8001384:	b29a      	uxth	r2, r3
 8001386:	4b1f      	ldr	r3, [pc, #124]	; (8001404 <HMC5883LInit+0xb8>)
 8001388:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, buffer, ukuranstring, 10);
 800138a:	4b1e      	ldr	r3, [pc, #120]	; (8001404 <HMC5883LInit+0xb8>)
 800138c:	881a      	ldrh	r2, [r3, #0]
 800138e:	230a      	movs	r3, #10
 8001390:	491a      	ldr	r1, [pc, #104]	; (80013fc <HMC5883LInit+0xb0>)
 8001392:	481d      	ldr	r0, [pc, #116]	; (8001408 <HMC5883LInit+0xbc>)
 8001394:	f006 f84d 	bl	8007432 <HAL_UART_Transmit>
		HMC5883L_initialize();
 8001398:	f7ff fdf6 	bl	8000f88 <HMC5883L_initialize>
		HAL_Delay(500);
 800139c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013a0:	f002 f992 	bl	80036c8 <HAL_Delay>
	while (!HMC5883L_testConnection()){
 80013a4:	f7ff fe06 	bl	8000fb4 <HMC5883L_testConnection>
 80013a8:	4603      	mov	r3, r0
 80013aa:	f083 0301 	eor.w	r3, r3, #1
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d1d4      	bne.n	800135e <HMC5883LInit+0x12>
	}
	ukuranstring = sprintf((char*)buffer, "Inisialisasi HMC5893L Telah Berhasil \r\n");
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <HMC5883LInit+0xb0>)
 80013b6:	4a15      	ldr	r2, [pc, #84]	; (800140c <HMC5883LInit+0xc0>)
 80013b8:	4614      	mov	r4, r2
 80013ba:	469c      	mov	ip, r3
 80013bc:	f104 0e20 	add.w	lr, r4, #32
 80013c0:	4665      	mov	r5, ip
 80013c2:	4626      	mov	r6, r4
 80013c4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80013c6:	6028      	str	r0, [r5, #0]
 80013c8:	6069      	str	r1, [r5, #4]
 80013ca:	60aa      	str	r2, [r5, #8]
 80013cc:	60eb      	str	r3, [r5, #12]
 80013ce:	3410      	adds	r4, #16
 80013d0:	f10c 0c10 	add.w	ip, ip, #16
 80013d4:	4574      	cmp	r4, lr
 80013d6:	d1f3      	bne.n	80013c0 <HMC5883LInit+0x74>
 80013d8:	4662      	mov	r2, ip
 80013da:	4623      	mov	r3, r4
 80013dc:	cb03      	ldmia	r3!, {r0, r1}
 80013de:	6010      	str	r0, [r2, #0]
 80013e0:	6051      	str	r1, [r2, #4]
 80013e2:	2327      	movs	r3, #39	; 0x27
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	4b07      	ldr	r3, [pc, #28]	; (8001404 <HMC5883LInit+0xb8>)
 80013e8:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, buffer, ukuranstring, 10);
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HMC5883LInit+0xb8>)
 80013ec:	881a      	ldrh	r2, [r3, #0]
 80013ee:	230a      	movs	r3, #10
 80013f0:	4902      	ldr	r1, [pc, #8]	; (80013fc <HMC5883LInit+0xb0>)
 80013f2:	4805      	ldr	r0, [pc, #20]	; (8001408 <HMC5883LInit+0xbc>)
 80013f4:	f006 f81d 	bl	8007432 <HAL_UART_Transmit>
}
 80013f8:	bf00      	nop
 80013fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013fc:	200010d4 	.word	0x200010d4
 8001400:	0800c438 	.word	0x0800c438
 8001404:	200011de 	.word	0x200011de
 8001408:	20001088 	.word	0x20001088
 800140c:	0800c458 	.word	0x0800c458

08001410 <bacaheading>:
float bacaheading(){
 8001410:	b5b0      	push	{r4, r5, r7, lr}
 8001412:	af00      	add	r7, sp, #0
	HMC5883L_getHeading(&x_heading, &y_heading, &z_heading);
 8001414:	4a52      	ldr	r2, [pc, #328]	; (8001560 <bacaheading+0x150>)
 8001416:	4953      	ldr	r1, [pc, #332]	; (8001564 <bacaheading+0x154>)
 8001418:	4853      	ldr	r0, [pc, #332]	; (8001568 <bacaheading+0x158>)
 800141a:	f7ff fe21 	bl	8001060 <HMC5883L_getHeading>
	heading = (atan2(x_heading, y_heading));
 800141e:	4b52      	ldr	r3, [pc, #328]	; (8001568 <bacaheading+0x158>)
 8001420:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff f87d 	bl	8000524 <__aeabi_i2d>
 800142a:	4604      	mov	r4, r0
 800142c:	460d      	mov	r5, r1
 800142e:	4b4d      	ldr	r3, [pc, #308]	; (8001564 <bacaheading+0x154>)
 8001430:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff f875 	bl	8000524 <__aeabi_i2d>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	ec43 2b11 	vmov	d1, r2, r3
 8001442:	ec45 4b10 	vmov	d0, r4, r5
 8001446:	f00a fd5b 	bl	800bf00 <atan2>
 800144a:	ec54 3b10 	vmov	r3, r4, d0
 800144e:	4618      	mov	r0, r3
 8001450:	4621      	mov	r1, r4
 8001452:	f7ff fbc9 	bl	8000be8 <__aeabi_d2f>
 8001456:	4602      	mov	r2, r0
 8001458:	4b44      	ldr	r3, [pc, #272]	; (800156c <bacaheading+0x15c>)
 800145a:	601a      	str	r2, [r3, #0]
	declinationAngle = 0.22;				//data untuk mendahului gerakan yaw saat wahana cepat
 800145c:	4b44      	ldr	r3, [pc, #272]	; (8001570 <bacaheading+0x160>)
 800145e:	4a45      	ldr	r2, [pc, #276]	; (8001574 <bacaheading+0x164>)
 8001460:	601a      	str	r2, [r3, #0]
	heading += declinationAngle;
 8001462:	4b42      	ldr	r3, [pc, #264]	; (800156c <bacaheading+0x15c>)
 8001464:	ed93 7a00 	vldr	s14, [r3]
 8001468:	4b41      	ldr	r3, [pc, #260]	; (8001570 <bacaheading+0x160>)
 800146a:	edd3 7a00 	vldr	s15, [r3]
 800146e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001472:	4b3e      	ldr	r3, [pc, #248]	; (800156c <bacaheading+0x15c>)
 8001474:	edc3 7a00 	vstr	s15, [r3]
	//normalise PI 0 sampai dengan 360
	if (heading < 0){
 8001478:	4b3c      	ldr	r3, [pc, #240]	; (800156c <bacaheading+0x15c>)
 800147a:	edd3 7a00 	vldr	s15, [r3]
 800147e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001486:	d509      	bpl.n	800149c <bacaheading+0x8c>
		heading += 2*PI;
 8001488:	4b38      	ldr	r3, [pc, #224]	; (800156c <bacaheading+0x15c>)
 800148a:	edd3 7a00 	vldr	s15, [r3]
 800148e:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001578 <bacaheading+0x168>
 8001492:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001496:	4b35      	ldr	r3, [pc, #212]	; (800156c <bacaheading+0x15c>)
 8001498:	edc3 7a00 	vstr	s15, [r3]
	}
	if (heading > 2*PI){
 800149c:	4b33      	ldr	r3, [pc, #204]	; (800156c <bacaheading+0x15c>)
 800149e:	edd3 7a00 	vldr	s15, [r3]
 80014a2:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001578 <bacaheading+0x168>
 80014a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ae:	dd09      	ble.n	80014c4 <bacaheading+0xb4>
		heading -= 2*PI;
 80014b0:	4b2e      	ldr	r3, [pc, #184]	; (800156c <bacaheading+0x15c>)
 80014b2:	edd3 7a00 	vldr	s15, [r3]
 80014b6:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001578 <bacaheading+0x168>
 80014ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014be:	4b2b      	ldr	r3, [pc, #172]	; (800156c <bacaheading+0x15c>)
 80014c0:	edc3 7a00 	vstr	s15, [r3]
	}
	headingDegrees = heading * 180 / M_PI;	//konversi dari data radian menjadi degree
 80014c4:	4b29      	ldr	r3, [pc, #164]	; (800156c <bacaheading+0x15c>)
 80014c6:	edd3 7a00 	vldr	s15, [r3]
 80014ca:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800157c <bacaheading+0x16c>
 80014ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014d2:	ee17 0a90 	vmov	r0, s15
 80014d6:	f7ff f837 	bl	8000548 <__aeabi_f2d>
 80014da:	a31f      	add	r3, pc, #124	; (adr r3, 8001558 <bacaheading+0x148>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	f7ff f9b4 	bl	800084c <__aeabi_ddiv>
 80014e4:	4603      	mov	r3, r0
 80014e6:	460c      	mov	r4, r1
 80014e8:	4618      	mov	r0, r3
 80014ea:	4621      	mov	r1, r4
 80014ec:	f7ff fb7c 	bl	8000be8 <__aeabi_d2f>
 80014f0:	4602      	mov	r2, r0
 80014f2:	4b23      	ldr	r3, [pc, #140]	; (8001580 <bacaheading+0x170>)
 80014f4:	601a      	str	r2, [r3, #0]
	if (headingDegrees < 0) headingDegrees += 360;
 80014f6:	4b22      	ldr	r3, [pc, #136]	; (8001580 <bacaheading+0x170>)
 80014f8:	edd3 7a00 	vldr	s15, [r3]
 80014fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001504:	d50a      	bpl.n	800151c <bacaheading+0x10c>
 8001506:	4b1e      	ldr	r3, [pc, #120]	; (8001580 <bacaheading+0x170>)
 8001508:	edd3 7a00 	vldr	s15, [r3]
 800150c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001584 <bacaheading+0x174>
 8001510:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001514:	4b1a      	ldr	r3, [pc, #104]	; (8001580 <bacaheading+0x170>)
 8001516:	edc3 7a00 	vstr	s15, [r3]
 800151a:	e013      	b.n	8001544 <bacaheading+0x134>
	else if (headingDegrees > 360) headingDegrees -= 360;
 800151c:	4b18      	ldr	r3, [pc, #96]	; (8001580 <bacaheading+0x170>)
 800151e:	edd3 7a00 	vldr	s15, [r3]
 8001522:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001584 <bacaheading+0x174>
 8001526:	eef4 7ac7 	vcmpe.f32	s15, s14
 800152a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152e:	dd09      	ble.n	8001544 <bacaheading+0x134>
 8001530:	4b13      	ldr	r3, [pc, #76]	; (8001580 <bacaheading+0x170>)
 8001532:	edd3 7a00 	vldr	s15, [r3]
 8001536:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001584 <bacaheading+0x174>
 800153a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800153e:	4b10      	ldr	r3, [pc, #64]	; (8001580 <bacaheading+0x170>)
 8001540:	edc3 7a00 	vstr	s15, [r3]
	return headingDegrees;
 8001544:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <bacaheading+0x170>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	ee07 3a90 	vmov	s15, r3
}
 800154c:	eeb0 0a67 	vmov.f32	s0, s15
 8001550:	bdb0      	pop	{r4, r5, r7, pc}
 8001552:	bf00      	nop
 8001554:	f3af 8000 	nop.w
 8001558:	54442d18 	.word	0x54442d18
 800155c:	400921fb 	.word	0x400921fb
 8001560:	200012b0 	.word	0x200012b0
 8001564:	20000fa4 	.word	0x20000fa4
 8001568:	20000f9c 	.word	0x20000f9c
 800156c:	200012cc 	.word	0x200012cc
 8001570:	20000fb4 	.word	0x20000fb4
 8001574:	3e6147ae 	.word	0x3e6147ae
 8001578:	40c90fdb 	.word	0x40c90fdb
 800157c:	43340000 	.word	0x43340000
 8001580:	200012b4 	.word	0x200012b4
 8001584:	43b40000 	.word	0x43b40000

08001588 <GetHMC5893L>:
void GetHMC5893L(){
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
	if(HMC5883L_getReadyStatus()){
 800158c:	f7ff fdae 	bl	80010ec <HMC5883L_getReadyStatus>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d006      	beq.n	80015a4 <GetHMC5893L+0x1c>
		data_heading = bacaheading();
 8001596:	f7ff ff3b 	bl	8001410 <bacaheading>
 800159a:	eef0 7a40 	vmov.f32	s15, s0
 800159e:	4b02      	ldr	r3, [pc, #8]	; (80015a8 <GetHMC5893L+0x20>)
 80015a0:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	200012c4 	.word	0x200012c4

080015ac <cek_heading>:
void cek_heading(){
 80015ac:	b5b0      	push	{r4, r5, r7, lr}
 80015ae:	af00      	add	r7, sp, #0
	if(data_heading == 0.0){
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <cek_heading+0x4c>)
 80015b2:	edd3 7a00 	vldr	s15, [r3]
 80015b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015be:	d119      	bne.n	80015f4 <cek_heading+0x48>
		ukuranstring = sprintf((char*)buffer, "data heading INVALID !!\r\n");
 80015c0:	4a0e      	ldr	r2, [pc, #56]	; (80015fc <cek_heading+0x50>)
 80015c2:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <cek_heading+0x54>)
 80015c4:	4615      	mov	r5, r2
 80015c6:	461c      	mov	r4, r3
 80015c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ca:	6028      	str	r0, [r5, #0]
 80015cc:	6069      	str	r1, [r5, #4]
 80015ce:	60aa      	str	r2, [r5, #8]
 80015d0:	60eb      	str	r3, [r5, #12]
 80015d2:	cc03      	ldmia	r4!, {r0, r1}
 80015d4:	6128      	str	r0, [r5, #16]
 80015d6:	6169      	str	r1, [r5, #20]
 80015d8:	8823      	ldrh	r3, [r4, #0]
 80015da:	832b      	strh	r3, [r5, #24]
 80015dc:	2319      	movs	r3, #25
 80015de:	b29a      	uxth	r2, r3
 80015e0:	4b08      	ldr	r3, [pc, #32]	; (8001604 <cek_heading+0x58>)
 80015e2:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, buffer, ukuranstring, 10);
 80015e4:	4b07      	ldr	r3, [pc, #28]	; (8001604 <cek_heading+0x58>)
 80015e6:	881a      	ldrh	r2, [r3, #0]
 80015e8:	230a      	movs	r3, #10
 80015ea:	4904      	ldr	r1, [pc, #16]	; (80015fc <cek_heading+0x50>)
 80015ec:	4806      	ldr	r0, [pc, #24]	; (8001608 <cek_heading+0x5c>)
 80015ee:	f005 ff20 	bl	8007432 <HAL_UART_Transmit>
		return;
 80015f2:	bf00      	nop
	}
}
 80015f4:	bdb0      	pop	{r4, r5, r7, pc}
 80015f6:	bf00      	nop
 80015f8:	200012c4 	.word	0x200012c4
 80015fc:	200010d4 	.word	0x200010d4
 8001600:	0800c480 	.word	0x0800c480
 8001604:	200011de 	.word	0x200011de
 8001608:	20001088 	.word	0x20001088

0800160c <SetDriverMotor_yaw>:
void SetDriverMotor_yaw(int arah, uint16_t pwm){
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	460b      	mov	r3, r1
 8001616:	807b      	strh	r3, [r7, #2]
	switch (arah){
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d002      	beq.n	8001624 <SetDriverMotor_yaw+0x18>
 800161e:	2b01      	cmp	r3, #1
 8001620:	d00d      	beq.n	800163e <SetDriverMotor_yaw+0x32>
 8001622:	e019      	b.n	8001658 <SetDriverMotor_yaw+0x4c>
	case 0:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001624:	2201      	movs	r2, #1
 8001626:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800162a:	480f      	ldr	r0, [pc, #60]	; (8001668 <SetDriverMotor_yaw+0x5c>)
 800162c:	f003 fb7c 	bl	8004d28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001630:	2200      	movs	r2, #0
 8001632:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001636:	480c      	ldr	r0, [pc, #48]	; (8001668 <SetDriverMotor_yaw+0x5c>)
 8001638:	f003 fb76 	bl	8004d28 <HAL_GPIO_WritePin>
		break;
 800163c:	e00c      	b.n	8001658 <SetDriverMotor_yaw+0x4c>
	case 1:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800163e:	2200      	movs	r2, #0
 8001640:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001644:	4808      	ldr	r0, [pc, #32]	; (8001668 <SetDriverMotor_yaw+0x5c>)
 8001646:	f003 fb6f 	bl	8004d28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 800164a:	2201      	movs	r2, #1
 800164c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001650:	4805      	ldr	r0, [pc, #20]	; (8001668 <SetDriverMotor_yaw+0x5c>)
 8001652:	f003 fb69 	bl	8004d28 <HAL_GPIO_WritePin>
		break;
 8001656:	bf00      	nop
	}
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm);
 8001658:	4b04      	ldr	r3, [pc, #16]	; (800166c <SetDriverMotor_yaw+0x60>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	887a      	ldrh	r2, [r7, #2]
 800165e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40020400 	.word	0x40020400
 800166c:	20001250 	.word	0x20001250

08001670 <SetDriverMotor_pitch>:
void SetDriverMotor_pitch(int arah, uint16_t pwm ){
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	807b      	strh	r3, [r7, #2]
	switch (arah){
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d002      	beq.n	8001688 <SetDriverMotor_pitch+0x18>
 8001682:	2b01      	cmp	r3, #1
 8001684:	d00d      	beq.n	80016a2 <SetDriverMotor_pitch+0x32>
 8001686:	e019      	b.n	80016bc <SetDriverMotor_pitch+0x4c>
	case 0:
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8001688:	2200      	movs	r2, #0
 800168a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800168e:	480f      	ldr	r0, [pc, #60]	; (80016cc <SetDriverMotor_pitch+0x5c>)
 8001690:	f003 fb4a 	bl	8004d28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8001694:	2201      	movs	r2, #1
 8001696:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800169a:	480c      	ldr	r0, [pc, #48]	; (80016cc <SetDriverMotor_pitch+0x5c>)
 800169c:	f003 fb44 	bl	8004d28 <HAL_GPIO_WritePin>
		break;
 80016a0:	e00c      	b.n	80016bc <SetDriverMotor_pitch+0x4c>
	case 1:
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 80016a2:	2201      	movs	r2, #1
 80016a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016a8:	4808      	ldr	r0, [pc, #32]	; (80016cc <SetDriverMotor_pitch+0x5c>)
 80016aa:	f003 fb3d 	bl	8004d28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 80016ae:	2200      	movs	r2, #0
 80016b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016b4:	4805      	ldr	r0, [pc, #20]	; (80016cc <SetDriverMotor_pitch+0x5c>)
 80016b6:	f003 fb37 	bl	8004d28 <HAL_GPIO_WritePin>
		break;
 80016ba:	bf00      	nop
	}
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwm);
 80016bc:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <SetDriverMotor_pitch+0x60>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	887a      	ldrh	r2, [r7, #2]
 80016c2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40021000 	.word	0x40021000
 80016d0:	20001250 	.word	0x20001250

080016d4 <gps_parse>:
//-----------parsing Data GPS---------------
void gps_parse(){
 80016d4:	b590      	push	{r4, r7, lr}
 80016d6:	b093      	sub	sp, #76	; 0x4c
 80016d8:	af00      	add	r7, sp, #0
	if(UART4DataFlag == 1){
 80016da:	4b7f      	ldr	r3, [pc, #508]	; (80018d8 <gps_parse+0x204>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 80f6 	beq.w	80018d0 <gps_parse+0x1fc>
				  char *pointer;
				  char lat[20];
				  char lat_a;
				  char lon[20];
				  char lon_a;
				  int length = sizeof(data_gps);
 80016e4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016e8:	633b      	str	r3, [r7, #48]	; 0x30

				  memset(lat, '\0', 20);
 80016ea:	f107 0318 	add.w	r3, r7, #24
 80016ee:	2214      	movs	r2, #20
 80016f0:	2100      	movs	r1, #0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f006 fe90 	bl	8008418 <memset>
				  memset(lon, '\0', 20) ;
 80016f8:	1d3b      	adds	r3, r7, #4
 80016fa:	2214      	movs	r2, #20
 80016fc:	2100      	movs	r1, #0
 80016fe:	4618      	mov	r0, r3
 8001700:	f006 fe8a 	bl	8008418 <memset>
				  pointer = strchr((char*)data_gps, '$');
 8001704:	2124      	movs	r1, #36	; 0x24
 8001706:	4875      	ldr	r0, [pc, #468]	; (80018dc <gps_parse+0x208>)
 8001708:	f007 fcf2 	bl	80090f0 <strchr>
 800170c:	6478      	str	r0, [r7, #68]	; 0x44

				  do{
					  char *ptrstart;
					  char *ptrend;
					  if(strncmp(pointer, "$GNGGA" , 6) == 0){ //$GNGGA
 800170e:	2206      	movs	r2, #6
 8001710:	4973      	ldr	r1, [pc, #460]	; (80018e0 <gps_parse+0x20c>)
 8001712:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001714:	f007 fcf9 	bl	800910a <strncmp>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d118      	bne.n	8001750 <gps_parse+0x7c>
						  ptrstart = (char*)memchr(pointer + 1, ',', length);
 800171e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001720:	3301      	adds	r3, #1
 8001722:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001724:	212c      	movs	r1, #44	; 0x2c
 8001726:	4618      	mov	r0, r3
 8001728:	f7fe fd52 	bl	80001d0 <memchr>
 800172c:	6438      	str	r0, [r7, #64]	; 0x40
						  ptrstart = (char*)memchr(ptrstart + 1, ',', length);
 800172e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001730:	3301      	adds	r3, #1
 8001732:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001734:	212c      	movs	r1, #44	; 0x2c
 8001736:	4618      	mov	r0, r3
 8001738:	f7fe fd4a 	bl	80001d0 <memchr>
 800173c:	6438      	str	r0, [r7, #64]	; 0x40
						  ptrend = (char*)memchr(ptrstart + 1, ',', length);
 800173e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001740:	3301      	adds	r3, #1
 8001742:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001744:	212c      	movs	r1, #44	; 0x2c
 8001746:	4618      	mov	r0, r3
 8001748:	f7fe fd42 	bl	80001d0 <memchr>
 800174c:	63f8      	str	r0, [r7, #60]	; 0x3c
 800174e:	e049      	b.n	80017e4 <gps_parse+0x110>

					  } else if(strncmp(pointer, "$GNGLL", 6) == 0){ //$GNGLL
 8001750:	2206      	movs	r2, #6
 8001752:	4964      	ldr	r1, [pc, #400]	; (80018e4 <gps_parse+0x210>)
 8001754:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001756:	f007 fcd8 	bl	800910a <strncmp>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d110      	bne.n	8001782 <gps_parse+0xae>
						  ptrstart = (char*)memchr(pointer + 1, ',', length);
 8001760:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001762:	3301      	adds	r3, #1
 8001764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001766:	212c      	movs	r1, #44	; 0x2c
 8001768:	4618      	mov	r0, r3
 800176a:	f7fe fd31 	bl	80001d0 <memchr>
 800176e:	6438      	str	r0, [r7, #64]	; 0x40
						  ptrend = (char*)memchr(ptrstart + 1, ',', length);
 8001770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001772:	3301      	adds	r3, #1
 8001774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001776:	212c      	movs	r1, #44	; 0x2c
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe fd29 	bl	80001d0 <memchr>
 800177e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001780:	e030      	b.n	80017e4 <gps_parse+0x110>

					  } else if(strncmp(pointer, "$GNRMC", 6) == 0){
 8001782:	2206      	movs	r2, #6
 8001784:	4958      	ldr	r1, [pc, #352]	; (80018e8 <gps_parse+0x214>)
 8001786:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001788:	f007 fcbf 	bl	800910a <strncmp>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d120      	bne.n	80017d4 <gps_parse+0x100>
						  ptrstart = (char*)memchr(pointer + 1, ',', length);
 8001792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001794:	3301      	adds	r3, #1
 8001796:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001798:	212c      	movs	r1, #44	; 0x2c
 800179a:	4618      	mov	r0, r3
 800179c:	f7fe fd18 	bl	80001d0 <memchr>
 80017a0:	6438      	str	r0, [r7, #64]	; 0x40
						  ptrstart = (char*)memchr(ptrstart + 1, ',', length);
 80017a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017a4:	3301      	adds	r3, #1
 80017a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017a8:	212c      	movs	r1, #44	; 0x2c
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7fe fd10 	bl	80001d0 <memchr>
 80017b0:	6438      	str	r0, [r7, #64]	; 0x40
						  ptrstart = (char*)memchr(ptrstart + 1, ',', length);
 80017b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017b4:	3301      	adds	r3, #1
 80017b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017b8:	212c      	movs	r1, #44	; 0x2c
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7fe fd08 	bl	80001d0 <memchr>
 80017c0:	6438      	str	r0, [r7, #64]	; 0x40
						  ptrend = (char*)memchr(ptrstart + 1, ',', length);
 80017c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017c4:	3301      	adds	r3, #1
 80017c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017c8:	212c      	movs	r1, #44	; 0x2c
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7fe fd00 	bl	80001d0 <memchr>
 80017d0:	63f8      	str	r0, [r7, #60]	; 0x3c
 80017d2:	e007      	b.n	80017e4 <gps_parse+0x110>

					  } else {
						  pointer = strchr(pointer + 6, '$');
 80017d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017d6:	3306      	adds	r3, #6
 80017d8:	2124      	movs	r1, #36	; 0x24
 80017da:	4618      	mov	r0, r3
 80017dc:	f007 fc88 	bl	80090f0 <strchr>
 80017e0:	6478      	str	r0, [r7, #68]	; 0x44
						  continue;
 80017e2:	e06e      	b.n	80018c2 <gps_parse+0x1ee>
					  }

					  for(int i = 1; i < (ptrend - ptrstart); i++) lat[i - 1] = ptrstart[i];
 80017e4:	2301      	movs	r3, #1
 80017e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80017e8:	e00d      	b.n	8001806 <gps_parse+0x132>
 80017ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80017ee:	441a      	add	r2, r3
 80017f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017f2:	3b01      	subs	r3, #1
 80017f4:	7812      	ldrb	r2, [r2, #0]
 80017f6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80017fa:	440b      	add	r3, r1
 80017fc:	f803 2c30 	strb.w	r2, [r3, #-48]
 8001800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001802:	3301      	adds	r3, #1
 8001804:	63bb      	str	r3, [r7, #56]	; 0x38
 8001806:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800180e:	429a      	cmp	r2, r3
 8001810:	dbeb      	blt.n	80017ea <gps_parse+0x116>
					  lat_a = *(ptrend + 1);
 8001812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001814:	785b      	ldrb	r3, [r3, #1]
 8001816:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

					  ptrstart = (char*)memchr(ptrend + 1, ',', length);
 800181a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800181c:	3301      	adds	r3, #1
 800181e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001820:	212c      	movs	r1, #44	; 0x2c
 8001822:	4618      	mov	r0, r3
 8001824:	f7fe fcd4 	bl	80001d0 <memchr>
 8001828:	6438      	str	r0, [r7, #64]	; 0x40
					  ptrend = (char*)memchr(ptrstart + 1, ',', length);
 800182a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800182c:	3301      	adds	r3, #1
 800182e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001830:	212c      	movs	r1, #44	; 0x2c
 8001832:	4618      	mov	r0, r3
 8001834:	f7fe fccc 	bl	80001d0 <memchr>
 8001838:	63f8      	str	r0, [r7, #60]	; 0x3c

					  for(int i = 1; i < (ptrend - ptrstart); i++) lon[i - 1] = ptrstart[i];
 800183a:	2301      	movs	r3, #1
 800183c:	637b      	str	r3, [r7, #52]	; 0x34
 800183e:	e00d      	b.n	800185c <gps_parse+0x188>
 8001840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001842:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001844:	441a      	add	r2, r3
 8001846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001848:	3b01      	subs	r3, #1
 800184a:	7812      	ldrb	r2, [r2, #0]
 800184c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001850:	440b      	add	r3, r1
 8001852:	f803 2c44 	strb.w	r2, [r3, #-68]
 8001856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001858:	3301      	adds	r3, #1
 800185a:	637b      	str	r3, [r7, #52]	; 0x34
 800185c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800185e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001864:	429a      	cmp	r2, r3
 8001866:	dbeb      	blt.n	8001840 <gps_parse+0x16c>
					  lon_a = *(ptrend + 1);
 8001868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800186a:	785b      	ldrb	r3, [r3, #1]
 800186c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					  if(lon[0] != '\0' && lat[0] != '\0'){
 8001870:	793b      	ldrb	r3, [r7, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d01e      	beq.n	80018b4 <gps_parse+0x1e0>
 8001876:	7e3b      	ldrb	r3, [r7, #24]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d01b      	beq.n	80018b4 <gps_parse+0x1e0>
						  //ukuranstring = sprintf((char*)buffer, "Lat: %s | %c\tLon: %s | %c\r\n", lat, lat_a, lon, lon_a);
						  //HAL_UART_Transmit(&huart1, buffer, ukuranstring, 100);
						  lat_gps = atof((char*)lat);
 800187c:	f107 0318 	add.w	r3, r7, #24
 8001880:	4618      	mov	r0, r3
 8001882:	f006 fd97 	bl	80083b4 <atof>
 8001886:	ec54 3b10 	vmov	r3, r4, d0
 800188a:	4618      	mov	r0, r3
 800188c:	4621      	mov	r1, r4
 800188e:	f7ff f9ab 	bl	8000be8 <__aeabi_d2f>
 8001892:	4602      	mov	r2, r0
 8001894:	4b15      	ldr	r3, [pc, #84]	; (80018ec <gps_parse+0x218>)
 8001896:	601a      	str	r2, [r3, #0]
						  lon_gps = atof((char*)lon);
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	4618      	mov	r0, r3
 800189c:	f006 fd8a 	bl	80083b4 <atof>
 80018a0:	ec54 3b10 	vmov	r3, r4, d0
 80018a4:	4618      	mov	r0, r3
 80018a6:	4621      	mov	r1, r4
 80018a8:	f7ff f99e 	bl	8000be8 <__aeabi_d2f>
 80018ac:	4602      	mov	r2, r0
 80018ae:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <gps_parse+0x21c>)
 80018b0:	601a      	str	r2, [r3, #0]
						  break;
 80018b2:	e00a      	b.n	80018ca <gps_parse+0x1f6>
					  }
					  pointer = strchr(pointer + 4, '$');
 80018b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018b6:	3304      	adds	r3, #4
 80018b8:	2124      	movs	r1, #36	; 0x24
 80018ba:	4618      	mov	r0, r3
 80018bc:	f007 fc18 	bl	80090f0 <strchr>
 80018c0:	6478      	str	r0, [r7, #68]	; 0x44
				  }
				  while(pointer != NULL);
 80018c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f47f af22 	bne.w	800170e <gps_parse+0x3a>
				  UART4DataFlag = false;
 80018ca:	4b03      	ldr	r3, [pc, #12]	; (80018d8 <gps_parse+0x204>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
			  }
}
 80018d0:	bf00      	nop
 80018d2:	374c      	adds	r7, #76	; 0x4c
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd90      	pop	{r4, r7, pc}
 80018d8:	20000428 	.word	0x20000428
 80018dc:	20000234 	.word	0x20000234
 80018e0:	0800c49c 	.word	0x0800c49c
 80018e4:	0800c4a4 	.word	0x0800c4a4
 80018e8:	0800c4ac 	.word	0x0800c4ac
 80018ec:	20001294 	.word	0x20001294
 80018f0:	200012b8 	.word	0x200012b8

080018f4 <baca_input>:
void baca_input(){
 80018f4:	b5b0      	push	{r4, r5, r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af04      	add	r7, sp, #16
	if(USART1DataFlag == true){
 80018fa:	4b5b      	ldr	r3, [pc, #364]	; (8001a68 <baca_input+0x174>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f000 80ad 	beq.w	8001a5e <baca_input+0x16a>
		uint8_t pitch[2];
		uint8_t yaw[3];
		   if(data_input[0] == '#'){ //#,30,090
 8001904:	4b59      	ldr	r3, [pc, #356]	; (8001a6c <baca_input+0x178>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b23      	cmp	r3, #35	; 0x23
 800190a:	f040 8091 	bne.w	8001a30 <baca_input+0x13c>
			   pitch[0] = data_input[2];
 800190e:	4b57      	ldr	r3, [pc, #348]	; (8001a6c <baca_input+0x178>)
 8001910:	789b      	ldrb	r3, [r3, #2]
 8001912:	713b      	strb	r3, [r7, #4]
			   pitch[1] = data_input[3];
 8001914:	4b55      	ldr	r3, [pc, #340]	; (8001a6c <baca_input+0x178>)
 8001916:	78db      	ldrb	r3, [r3, #3]
 8001918:	717b      	strb	r3, [r7, #5]

			   yaw[0] = data_input[5];
 800191a:	4b54      	ldr	r3, [pc, #336]	; (8001a6c <baca_input+0x178>)
 800191c:	795b      	ldrb	r3, [r3, #5]
 800191e:	703b      	strb	r3, [r7, #0]
			   yaw[1] = data_input[6];
 8001920:	4b52      	ldr	r3, [pc, #328]	; (8001a6c <baca_input+0x178>)
 8001922:	799b      	ldrb	r3, [r3, #6]
 8001924:	707b      	strb	r3, [r7, #1]
			   yaw[2] = data_input[7];
 8001926:	4b51      	ldr	r3, [pc, #324]	; (8001a6c <baca_input+0x178>)
 8001928:	79db      	ldrb	r3, [r3, #7]
 800192a:	70bb      	strb	r3, [r7, #2]
			   ukuranstring = sprintf((char*)buffer, "Pitch: %s\tYaw: %s\r\n", pitch, yaw);
 800192c:	463b      	mov	r3, r7
 800192e:	1d3a      	adds	r2, r7, #4
 8001930:	494f      	ldr	r1, [pc, #316]	; (8001a70 <baca_input+0x17c>)
 8001932:	4850      	ldr	r0, [pc, #320]	; (8001a74 <baca_input+0x180>)
 8001934:	f007 fbbc 	bl	80090b0 <siprintf>
 8001938:	4603      	mov	r3, r0
 800193a:	b29a      	uxth	r2, r3
 800193c:	4b4e      	ldr	r3, [pc, #312]	; (8001a78 <baca_input+0x184>)
 800193e:	801a      	strh	r2, [r3, #0]
			   HAL_UART_Transmit(&huart1, buffer, ukuranstring, 100);
 8001940:	4b4d      	ldr	r3, [pc, #308]	; (8001a78 <baca_input+0x184>)
 8001942:	881a      	ldrh	r2, [r3, #0]
 8001944:	2364      	movs	r3, #100	; 0x64
 8001946:	494b      	ldr	r1, [pc, #300]	; (8001a74 <baca_input+0x180>)
 8001948:	484c      	ldr	r0, [pc, #304]	; (8001a7c <baca_input+0x188>)
 800194a:	f005 fd72 	bl	8007432 <HAL_UART_Transmit>

			   setPoint_pitch = atof ((char*)pitch);
 800194e:	1d3b      	adds	r3, r7, #4
 8001950:	4618      	mov	r0, r3
 8001952:	f006 fd2f 	bl	80083b4 <atof>
 8001956:	ec54 3b10 	vmov	r3, r4, d0
 800195a:	4618      	mov	r0, r3
 800195c:	4621      	mov	r1, r4
 800195e:	f7ff f943 	bl	8000be8 <__aeabi_d2f>
 8001962:	4602      	mov	r2, r0
 8001964:	4b46      	ldr	r3, [pc, #280]	; (8001a80 <baca_input+0x18c>)
 8001966:	601a      	str	r2, [r3, #0]
			   setPoint_yaw = atof ((char*)yaw);
 8001968:	463b      	mov	r3, r7
 800196a:	4618      	mov	r0, r3
 800196c:	f006 fd22 	bl	80083b4 <atof>
 8001970:	ec54 3b10 	vmov	r3, r4, d0
 8001974:	4618      	mov	r0, r3
 8001976:	4621      	mov	r1, r4
 8001978:	f7ff f936 	bl	8000be8 <__aeabi_d2f>
 800197c:	4602      	mov	r2, r0
 800197e:	4b41      	ldr	r3, [pc, #260]	; (8001a84 <baca_input+0x190>)
 8001980:	601a      	str	r2, [r3, #0]
			   if (setPoint_pitch > 90) setPoint_pitch = 90;
 8001982:	4b3f      	ldr	r3, [pc, #252]	; (8001a80 <baca_input+0x18c>)
 8001984:	edd3 7a00 	vldr	s15, [r3]
 8001988:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001a88 <baca_input+0x194>
 800198c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001994:	dd02      	ble.n	800199c <baca_input+0xa8>
 8001996:	4b3a      	ldr	r3, [pc, #232]	; (8001a80 <baca_input+0x18c>)
 8001998:	4a3c      	ldr	r2, [pc, #240]	; (8001a8c <baca_input+0x198>)
 800199a:	601a      	str	r2, [r3, #0]
			   if (setPoint_pitch <  0) setPoint_pitch = 0;
 800199c:	4b38      	ldr	r3, [pc, #224]	; (8001a80 <baca_input+0x18c>)
 800199e:	edd3 7a00 	vldr	s15, [r3]
 80019a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019aa:	d503      	bpl.n	80019b4 <baca_input+0xc0>
 80019ac:	4b34      	ldr	r3, [pc, #208]	; (8001a80 <baca_input+0x18c>)
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
			   if (setPoint_yaw > 359) setPoint_yaw= 359;
 80019b4:	4b33      	ldr	r3, [pc, #204]	; (8001a84 <baca_input+0x190>)
 80019b6:	edd3 7a00 	vldr	s15, [r3]
 80019ba:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001a90 <baca_input+0x19c>
 80019be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c6:	dd02      	ble.n	80019ce <baca_input+0xda>
 80019c8:	4b2e      	ldr	r3, [pc, #184]	; (8001a84 <baca_input+0x190>)
 80019ca:	4a32      	ldr	r2, [pc, #200]	; (8001a94 <baca_input+0x1a0>)
 80019cc:	601a      	str	r2, [r3, #0]
			   if (setPoint_yaw <  1 ) setPoint_yaw = 1;
 80019ce:	4b2d      	ldr	r3, [pc, #180]	; (8001a84 <baca_input+0x190>)
 80019d0:	edd3 7a00 	vldr	s15, [r3]
 80019d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e0:	d503      	bpl.n	80019ea <baca_input+0xf6>
 80019e2:	4b28      	ldr	r3, [pc, #160]	; (8001a84 <baca_input+0x190>)
 80019e4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80019e8:	601a      	str	r2, [r3, #0]
			   ukuranstring = sprintf((char*)buffer, "data INPUT = %s | %f | %f\r\n", data_input, setPoint_pitch, setPoint_yaw);
 80019ea:	4b25      	ldr	r3, [pc, #148]	; (8001a80 <baca_input+0x18c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fdaa 	bl	8000548 <__aeabi_f2d>
 80019f4:	4604      	mov	r4, r0
 80019f6:	460d      	mov	r5, r1
 80019f8:	4b22      	ldr	r3, [pc, #136]	; (8001a84 <baca_input+0x190>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7fe fda3 	bl	8000548 <__aeabi_f2d>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001a0a:	e9cd 4500 	strd	r4, r5, [sp]
 8001a0e:	4a17      	ldr	r2, [pc, #92]	; (8001a6c <baca_input+0x178>)
 8001a10:	4921      	ldr	r1, [pc, #132]	; (8001a98 <baca_input+0x1a4>)
 8001a12:	4818      	ldr	r0, [pc, #96]	; (8001a74 <baca_input+0x180>)
 8001a14:	f007 fb4c 	bl	80090b0 <siprintf>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	4b16      	ldr	r3, [pc, #88]	; (8001a78 <baca_input+0x184>)
 8001a1e:	801a      	strh	r2, [r3, #0]
			   HAL_UART_Transmit(&huart1, buffer, ukuranstring, 10);
 8001a20:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <baca_input+0x184>)
 8001a22:	881a      	ldrh	r2, [r3, #0]
 8001a24:	230a      	movs	r3, #10
 8001a26:	4913      	ldr	r1, [pc, #76]	; (8001a74 <baca_input+0x180>)
 8001a28:	4814      	ldr	r0, [pc, #80]	; (8001a7c <baca_input+0x188>)
 8001a2a:	f005 fd02 	bl	8007432 <HAL_UART_Transmit>
 8001a2e:	e013      	b.n	8001a58 <baca_input+0x164>
		   } else{
			   ukuranstring = sprintf((char*)buffer, "Data salah\r\n");
 8001a30:	4a10      	ldr	r2, [pc, #64]	; (8001a74 <baca_input+0x180>)
 8001a32:	4b1a      	ldr	r3, [pc, #104]	; (8001a9c <baca_input+0x1a8>)
 8001a34:	4614      	mov	r4, r2
 8001a36:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001a38:	6020      	str	r0, [r4, #0]
 8001a3a:	6061      	str	r1, [r4, #4]
 8001a3c:	60a2      	str	r2, [r4, #8]
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	7323      	strb	r3, [r4, #12]
 8001a42:	230c      	movs	r3, #12
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <baca_input+0x184>)
 8001a48:	801a      	strh	r2, [r3, #0]
			   HAL_UART_Transmit(&huart1, buffer, ukuranstring, 100);
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <baca_input+0x184>)
 8001a4c:	881a      	ldrh	r2, [r3, #0]
 8001a4e:	2364      	movs	r3, #100	; 0x64
 8001a50:	4908      	ldr	r1, [pc, #32]	; (8001a74 <baca_input+0x180>)
 8001a52:	480a      	ldr	r0, [pc, #40]	; (8001a7c <baca_input+0x188>)
 8001a54:	f005 fced 	bl	8007432 <HAL_UART_Transmit>
		   }
		   USART1DataFlag = false;
 8001a58:	4b03      	ldr	r3, [pc, #12]	; (8001a68 <baca_input+0x174>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
	}
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bdb0      	pop	{r4, r5, r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000620 	.word	0x20000620
 8001a6c:	2000042c 	.word	0x2000042c
 8001a70:	0800c4b4 	.word	0x0800c4b4
 8001a74:	200010d4 	.word	0x200010d4
 8001a78:	200011de 	.word	0x200011de
 8001a7c:	20001088 	.word	0x20001088
 8001a80:	20000624 	.word	0x20000624
 8001a84:	20000010 	.word	0x20000010
 8001a88:	42b40000 	.word	0x42b40000
 8001a8c:	42b40000 	.word	0x42b40000
 8001a90:	43b38000 	.word	0x43b38000
 8001a94:	43b38000 	.word	0x43b38000
 8001a98:	0800c4c8 	.word	0x0800c4c8
 8001a9c:	0800c4e4 	.word	0x0800c4e4

08001aa0 <PID_PITCH>:
//------------------------PID CONTROL-----------------------
void PID_PITCH(){
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
	errorPitch = setPoint_pitch - data_Pitch1;
 8001aa6:	4b5f      	ldr	r3, [pc, #380]	; (8001c24 <PID_PITCH+0x184>)
 8001aa8:	ed93 7a00 	vldr	s14, [r3]
 8001aac:	4b5e      	ldr	r3, [pc, #376]	; (8001c28 <PID_PITCH+0x188>)
 8001aae:	edd3 7a00 	vldr	s15, [r3]
 8001ab2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ab6:	4b5d      	ldr	r3, [pc, #372]	; (8001c2c <PID_PITCH+0x18c>)
 8001ab8:	edc3 7a00 	vstr	s15, [r3]
	int maxPitchSpeed = 300;
 8001abc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001ac0:	607b      	str	r3, [r7, #4]
	if (errorPitch < 0){
 8001ac2:	4b5a      	ldr	r3, [pc, #360]	; (8001c2c <PID_PITCH+0x18c>)
 8001ac4:	edd3 7a00 	vldr	s15, [r3]
 8001ac8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad0:	d505      	bpl.n	8001ade <PID_PITCH+0x3e>
		dir_pitch = 0;   //TURUN
 8001ad2:	4b57      	ldr	r3, [pc, #348]	; (8001c30 <PID_PITCH+0x190>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
		maxPitchSpeed = 90;
 8001ad8:	235a      	movs	r3, #90	; 0x5a
 8001ada:	607b      	str	r3, [r7, #4]
 8001adc:	e002      	b.n	8001ae4 <PID_PITCH+0x44>
	} else {
		dir_pitch = 1;  //NAIK
 8001ade:	4b54      	ldr	r3, [pc, #336]	; (8001c30 <PID_PITCH+0x190>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]
	}

	pitch_P  = KP_PITCH * errorPitch;
 8001ae4:	4b51      	ldr	r3, [pc, #324]	; (8001c2c <PID_PITCH+0x18c>)
 8001ae6:	edd3 7a00 	vldr	s15, [r3]
 8001aea:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8001c34 <PID_PITCH+0x194>
 8001aee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001af2:	4b51      	ldr	r3, [pc, #324]	; (8001c38 <PID_PITCH+0x198>)
 8001af4:	edc3 7a00 	vstr	s15, [r3]
	pitch_I += KI_PITCH * errorPitch;
 8001af8:	4b4c      	ldr	r3, [pc, #304]	; (8001c2c <PID_PITCH+0x18c>)
 8001afa:	edd3 7a00 	vldr	s15, [r3]
 8001afe:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001c3c <PID_PITCH+0x19c>
 8001b02:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b06:	4b4e      	ldr	r3, [pc, #312]	; (8001c40 <PID_PITCH+0x1a0>)
 8001b08:	edd3 7a00 	vldr	s15, [r3]
 8001b0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b10:	4b4b      	ldr	r3, [pc, #300]	; (8001c40 <PID_PITCH+0x1a0>)
 8001b12:	edc3 7a00 	vstr	s15, [r3]
	pitch_D  = KD_PITCH * (errorPitch - last_errorPitch);
 8001b16:	4b45      	ldr	r3, [pc, #276]	; (8001c2c <PID_PITCH+0x18c>)
 8001b18:	ed93 7a00 	vldr	s14, [r3]
 8001b1c:	4b49      	ldr	r3, [pc, #292]	; (8001c44 <PID_PITCH+0x1a4>)
 8001b1e:	edd3 7a00 	vldr	s15, [r3]
 8001b22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b26:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8001b2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b2e:	4b46      	ldr	r3, [pc, #280]	; (8001c48 <PID_PITCH+0x1a8>)
 8001b30:	edc3 7a00 	vstr	s15, [r3]

	if (-5.0f < errorPitch && errorPitch < 5.0f){
 8001b34:	4b3d      	ldr	r3, [pc, #244]	; (8001c2c <PID_PITCH+0x18c>)
 8001b36:	edd3 7a00 	vldr	s15, [r3]
 8001b3a:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 8001b3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b46:	dd2a      	ble.n	8001b9e <PID_PITCH+0xfe>
 8001b48:	4b38      	ldr	r3, [pc, #224]	; (8001c2c <PID_PITCH+0x18c>)
 8001b4a:	edd3 7a00 	vldr	s15, [r3]
 8001b4e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001b52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b5a:	d520      	bpl.n	8001b9e <PID_PITCH+0xfe>
		if (pitch_I > 90)
 8001b5c:	4b38      	ldr	r3, [pc, #224]	; (8001c40 <PID_PITCH+0x1a0>)
 8001b5e:	edd3 7a00 	vldr	s15, [r3]
 8001b62:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001c4c <PID_PITCH+0x1ac>
 8001b66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b6e:	dd03      	ble.n	8001b78 <PID_PITCH+0xd8>
			pitch_I = 90;
 8001b70:	4b33      	ldr	r3, [pc, #204]	; (8001c40 <PID_PITCH+0x1a0>)
 8001b72:	4a37      	ldr	r2, [pc, #220]	; (8001c50 <PID_PITCH+0x1b0>)
 8001b74:	601a      	str	r2, [r3, #0]
		if (pitch_I > 90)
 8001b76:	e015      	b.n	8001ba4 <PID_PITCH+0x104>
		else if (pitch_I < (-90)){
 8001b78:	4b31      	ldr	r3, [pc, #196]	; (8001c40 <PID_PITCH+0x1a0>)
 8001b7a:	edd3 7a00 	vldr	s15, [r3]
 8001b7e:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001c54 <PID_PITCH+0x1b4>
 8001b82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b8a:	d400      	bmi.n	8001b8e <PID_PITCH+0xee>
		if (pitch_I > 90)
 8001b8c:	e00a      	b.n	8001ba4 <PID_PITCH+0x104>
			pitch_I = -90;
 8001b8e:	4b2c      	ldr	r3, [pc, #176]	; (8001c40 <PID_PITCH+0x1a0>)
 8001b90:	4a31      	ldr	r2, [pc, #196]	; (8001c58 <PID_PITCH+0x1b8>)
 8001b92:	601a      	str	r2, [r3, #0]
			KI_pitch = 0.5;
 8001b94:	4b31      	ldr	r3, [pc, #196]	; (8001c5c <PID_PITCH+0x1bc>)
 8001b96:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001b9a:	601a      	str	r2, [r3, #0]
		if (pitch_I > 90)
 8001b9c:	e002      	b.n	8001ba4 <PID_PITCH+0x104>
		}
	} else {
		KI_pitch = 0.9;
 8001b9e:	4b2f      	ldr	r3, [pc, #188]	; (8001c5c <PID_PITCH+0x1bc>)
 8001ba0:	4a2f      	ldr	r2, [pc, #188]	; (8001c60 <PID_PITCH+0x1c0>)
 8001ba2:	601a      	str	r2, [r3, #0]
	}
	Out_PIDPITCH = pitch_P + pitch_I + pitch_D;
 8001ba4:	4b24      	ldr	r3, [pc, #144]	; (8001c38 <PID_PITCH+0x198>)
 8001ba6:	ed93 7a00 	vldr	s14, [r3]
 8001baa:	4b25      	ldr	r3, [pc, #148]	; (8001c40 <PID_PITCH+0x1a0>)
 8001bac:	edd3 7a00 	vldr	s15, [r3]
 8001bb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bb4:	4b24      	ldr	r3, [pc, #144]	; (8001c48 <PID_PITCH+0x1a8>)
 8001bb6:	edd3 7a00 	vldr	s15, [r3]
 8001bba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bc2:	ee17 2a90 	vmov	r2, s15
 8001bc6:	4b27      	ldr	r3, [pc, #156]	; (8001c64 <PID_PITCH+0x1c4>)
 8001bc8:	601a      	str	r2, [r3, #0]
	if (Out_PIDPITCH < 0)Out_PIDPITCH *= -1;
 8001bca:	4b26      	ldr	r3, [pc, #152]	; (8001c64 <PID_PITCH+0x1c4>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	da04      	bge.n	8001bdc <PID_PITCH+0x13c>
 8001bd2:	4b24      	ldr	r3, [pc, #144]	; (8001c64 <PID_PITCH+0x1c4>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	425b      	negs	r3, r3
 8001bd8:	4a22      	ldr	r2, [pc, #136]	; (8001c64 <PID_PITCH+0x1c4>)
 8001bda:	6013      	str	r3, [r2, #0]
	if (Out_PIDPITCH > maxPitchSpeed) Out_PIDPITCH = maxPitchSpeed;
 8001bdc:	4b21      	ldr	r3, [pc, #132]	; (8001c64 <PID_PITCH+0x1c4>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	da02      	bge.n	8001bec <PID_PITCH+0x14c>
 8001be6:	4a1f      	ldr	r2, [pc, #124]	; (8001c64 <PID_PITCH+0x1c4>)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6013      	str	r3, [r2, #0]
	if (errorPitch == 0) Out_PIDPITCH = 0;
 8001bec:	4b0f      	ldr	r3, [pc, #60]	; (8001c2c <PID_PITCH+0x18c>)
 8001bee:	edd3 7a00 	vldr	s15, [r3]
 8001bf2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfa:	d102      	bne.n	8001c02 <PID_PITCH+0x162>
 8001bfc:	4b19      	ldr	r3, [pc, #100]	; (8001c64 <PID_PITCH+0x1c4>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
		SetDriverMotor_pitch(dir_pitch, Out_PIDPITCH);
 8001c02:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <PID_PITCH+0x190>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <PID_PITCH+0x1c4>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4610      	mov	r0, r2
 8001c10:	f7ff fd2e 	bl	8001670 <SetDriverMotor_pitch>
		last_errorPitch = errorPitch;
 8001c14:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <PID_PITCH+0x18c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a0a      	ldr	r2, [pc, #40]	; (8001c44 <PID_PITCH+0x1a4>)
 8001c1a:	6013      	str	r3, [r2, #0]
}
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20000624 	.word	0x20000624
 8001c28:	2000129c 	.word	0x2000129c
 8001c2c:	200011b0 	.word	0x200011b0
 8001c30:	20000224 	.word	0x20000224
 8001c34:	428c0000 	.word	0x428c0000
 8001c38:	200011c0 	.word	0x200011c0
 8001c3c:	00000000 	.word	0x00000000
 8001c40:	20000a3c 	.word	0x20000a3c
 8001c44:	200012c0 	.word	0x200012c0
 8001c48:	20000f90 	.word	0x20000f90
 8001c4c:	42b40000 	.word	0x42b40000
 8001c50:	42b40000 	.word	0x42b40000
 8001c54:	c2b40000 	.word	0xc2b40000
 8001c58:	c2b40000 	.word	0xc2b40000
 8001c5c:	2000022c 	.word	0x2000022c
 8001c60:	3f666666 	.word	0x3f666666
 8001c64:	200011f4 	.word	0x200011f4

08001c68 <PID_YAW>:
void PID_YAW(){
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
	errorYaw = setPoint_yaw - data_heading;
 8001c6c:	4b89      	ldr	r3, [pc, #548]	; (8001e94 <PID_YAW+0x22c>)
 8001c6e:	ed93 7a00 	vldr	s14, [r3]
 8001c72:	4b89      	ldr	r3, [pc, #548]	; (8001e98 <PID_YAW+0x230>)
 8001c74:	edd3 7a00 	vldr	s15, [r3]
 8001c78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c7c:	4b87      	ldr	r3, [pc, #540]	; (8001e9c <PID_YAW+0x234>)
 8001c7e:	edc3 7a00 	vstr	s15, [r3]
	if (data_heading >= 265 && setPoint_yaw <= 95){
 8001c82:	4b85      	ldr	r3, [pc, #532]	; (8001e98 <PID_YAW+0x230>)
 8001c84:	edd3 7a00 	vldr	s15, [r3]
 8001c88:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8001ea0 <PID_YAW+0x238>
 8001c8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c94:	db14      	blt.n	8001cc0 <PID_YAW+0x58>
 8001c96:	4b7f      	ldr	r3, [pc, #508]	; (8001e94 <PID_YAW+0x22c>)
 8001c98:	edd3 7a00 	vldr	s15, [r3]
 8001c9c:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8001ea4 <PID_YAW+0x23c>
 8001ca0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca8:	d80a      	bhi.n	8001cc0 <PID_YAW+0x58>
		errorYaw += 359;
 8001caa:	4b7c      	ldr	r3, [pc, #496]	; (8001e9c <PID_YAW+0x234>)
 8001cac:	edd3 7a00 	vldr	s15, [r3]
 8001cb0:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8001ea8 <PID_YAW+0x240>
 8001cb4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001cb8:	4b78      	ldr	r3, [pc, #480]	; (8001e9c <PID_YAW+0x234>)
 8001cba:	edc3 7a00 	vstr	s15, [r3]
 8001cbe:	e025      	b.n	8001d0c <PID_YAW+0xa4>
	} else if (data_heading <= 95 && setPoint_yaw >= 265){
 8001cc0:	4b75      	ldr	r3, [pc, #468]	; (8001e98 <PID_YAW+0x230>)
 8001cc2:	edd3 7a00 	vldr	s15, [r3]
 8001cc6:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8001ea4 <PID_YAW+0x23c>
 8001cca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd2:	d81b      	bhi.n	8001d0c <PID_YAW+0xa4>
 8001cd4:	4b6f      	ldr	r3, [pc, #444]	; (8001e94 <PID_YAW+0x22c>)
 8001cd6:	edd3 7a00 	vldr	s15, [r3]
 8001cda:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8001ea0 <PID_YAW+0x238>
 8001cde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce6:	db11      	blt.n	8001d0c <PID_YAW+0xa4>
		errorYaw += 359;
 8001ce8:	4b6c      	ldr	r3, [pc, #432]	; (8001e9c <PID_YAW+0x234>)
 8001cea:	edd3 7a00 	vldr	s15, [r3]
 8001cee:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8001ea8 <PID_YAW+0x240>
 8001cf2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001cf6:	4b69      	ldr	r3, [pc, #420]	; (8001e9c <PID_YAW+0x234>)
 8001cf8:	edc3 7a00 	vstr	s15, [r3]
		errorYaw *= -1;
 8001cfc:	4b67      	ldr	r3, [pc, #412]	; (8001e9c <PID_YAW+0x234>)
 8001cfe:	edd3 7a00 	vldr	s15, [r3]
 8001d02:	eef1 7a67 	vneg.f32	s15, s15
 8001d06:	4b65      	ldr	r3, [pc, #404]	; (8001e9c <PID_YAW+0x234>)
 8001d08:	edc3 7a00 	vstr	s15, [r3]
	}
	if (errorYaw < 0){
 8001d0c:	4b63      	ldr	r3, [pc, #396]	; (8001e9c <PID_YAW+0x234>)
 8001d0e:	edd3 7a00 	vldr	s15, [r3]
 8001d12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1a:	d503      	bpl.n	8001d24 <PID_YAW+0xbc>
		dir_yaw = 1;
 8001d1c:	4b63      	ldr	r3, [pc, #396]	; (8001eac <PID_YAW+0x244>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	e002      	b.n	8001d2a <PID_YAW+0xc2>
	} else {
		dir_yaw = 0;
 8001d24:	4b61      	ldr	r3, [pc, #388]	; (8001eac <PID_YAW+0x244>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
	}

	yaw_P  = KP_YAW * errorYaw;
 8001d2a:	4b5c      	ldr	r3, [pc, #368]	; (8001e9c <PID_YAW+0x234>)
 8001d2c:	edd3 7a00 	vldr	s15, [r3]
 8001d30:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001d34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d38:	4b5d      	ldr	r3, [pc, #372]	; (8001eb0 <PID_YAW+0x248>)
 8001d3a:	edc3 7a00 	vstr	s15, [r3]
	yaw_I += KI_YAW * errorYaw;
 8001d3e:	4b57      	ldr	r3, [pc, #348]	; (8001e9c <PID_YAW+0x234>)
 8001d40:	edd3 7a00 	vldr	s15, [r3]
 8001d44:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8001eb4 <PID_YAW+0x24c>
 8001d48:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d4c:	4b5a      	ldr	r3, [pc, #360]	; (8001eb8 <PID_YAW+0x250>)
 8001d4e:	edd3 7a00 	vldr	s15, [r3]
 8001d52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d56:	4b58      	ldr	r3, [pc, #352]	; (8001eb8 <PID_YAW+0x250>)
 8001d58:	edc3 7a00 	vstr	s15, [r3]
	yaw_D  = KD_YAW * (errorYaw - last_errorYaw);
 8001d5c:	4b4f      	ldr	r3, [pc, #316]	; (8001e9c <PID_YAW+0x234>)
 8001d5e:	ed93 7a00 	vldr	s14, [r3]
 8001d62:	4b56      	ldr	r3, [pc, #344]	; (8001ebc <PID_YAW+0x254>)
 8001d64:	edd3 7a00 	vldr	s15, [r3]
 8001d68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d6c:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001ec0 <PID_YAW+0x258>
 8001d70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d74:	4b53      	ldr	r3, [pc, #332]	; (8001ec4 <PID_YAW+0x25c>)
 8001d76:	edc3 7a00 	vstr	s15, [r3]

	if (-5.0f < errorYaw && errorYaw < 5.0f){
 8001d7a:	4b48      	ldr	r3, [pc, #288]	; (8001e9c <PID_YAW+0x234>)
 8001d7c:	edd3 7a00 	vldr	s15, [r3]
 8001d80:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 8001d84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8c:	dd33      	ble.n	8001df6 <PID_YAW+0x18e>
 8001d8e:	4b43      	ldr	r3, [pc, #268]	; (8001e9c <PID_YAW+0x234>)
 8001d90:	edd3 7a00 	vldr	s15, [r3]
 8001d94:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001d98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da0:	d529      	bpl.n	8001df6 <PID_YAW+0x18e>
		if (yaw_I > 120) yaw_I = -120;
 8001da2:	4b45      	ldr	r3, [pc, #276]	; (8001eb8 <PID_YAW+0x250>)
 8001da4:	edd3 7a00 	vldr	s15, [r3]
 8001da8:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001ec8 <PID_YAW+0x260>
 8001dac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db4:	dd03      	ble.n	8001dbe <PID_YAW+0x156>
 8001db6:	4b40      	ldr	r3, [pc, #256]	; (8001eb8 <PID_YAW+0x250>)
 8001db8:	4a44      	ldr	r2, [pc, #272]	; (8001ecc <PID_YAW+0x264>)
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	e01e      	b.n	8001dfc <PID_YAW+0x194>
		else if (-2.0f < errorYaw && errorYaw < 2.0f) KI_yaw = 0.2;
 8001dbe:	4b37      	ldr	r3, [pc, #220]	; (8001e9c <PID_YAW+0x234>)
 8001dc0:	edd3 7a00 	vldr	s15, [r3]
 8001dc4:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8001dc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd0:	dd0d      	ble.n	8001dee <PID_YAW+0x186>
 8001dd2:	4b32      	ldr	r3, [pc, #200]	; (8001e9c <PID_YAW+0x234>)
 8001dd4:	edd3 7a00 	vldr	s15, [r3]
 8001dd8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001ddc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de4:	d503      	bpl.n	8001dee <PID_YAW+0x186>
 8001de6:	4b3a      	ldr	r3, [pc, #232]	; (8001ed0 <PID_YAW+0x268>)
 8001de8:	4a3a      	ldr	r2, [pc, #232]	; (8001ed4 <PID_YAW+0x26c>)
 8001dea:	601a      	str	r2, [r3, #0]
		if (yaw_I > 120) yaw_I = -120;
 8001dec:	e006      	b.n	8001dfc <PID_YAW+0x194>
		else (KI_yaw = 0.4);
 8001dee:	4b38      	ldr	r3, [pc, #224]	; (8001ed0 <PID_YAW+0x268>)
 8001df0:	4a39      	ldr	r2, [pc, #228]	; (8001ed8 <PID_YAW+0x270>)
 8001df2:	601a      	str	r2, [r3, #0]
		if (yaw_I > 120) yaw_I = -120;
 8001df4:	e002      	b.n	8001dfc <PID_YAW+0x194>
	} else {
		KI_yaw = 0.4;
 8001df6:	4b36      	ldr	r3, [pc, #216]	; (8001ed0 <PID_YAW+0x268>)
 8001df8:	4a37      	ldr	r2, [pc, #220]	; (8001ed8 <PID_YAW+0x270>)
 8001dfa:	601a      	str	r2, [r3, #0]
	}
	Out_PIDYAW = yaw_P + yaw_I + yaw_D;
 8001dfc:	4b2c      	ldr	r3, [pc, #176]	; (8001eb0 <PID_YAW+0x248>)
 8001dfe:	ed93 7a00 	vldr	s14, [r3]
 8001e02:	4b2d      	ldr	r3, [pc, #180]	; (8001eb8 <PID_YAW+0x250>)
 8001e04:	edd3 7a00 	vldr	s15, [r3]
 8001e08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e0c:	4b2d      	ldr	r3, [pc, #180]	; (8001ec4 <PID_YAW+0x25c>)
 8001e0e:	edd3 7a00 	vldr	s15, [r3]
 8001e12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e1a:	ee17 2a90 	vmov	r2, s15
 8001e1e:	4b2f      	ldr	r3, [pc, #188]	; (8001edc <PID_YAW+0x274>)
 8001e20:	601a      	str	r2, [r3, #0]

	if (Out_PIDYAW < 0) Out_PIDYAW *= -1;
 8001e22:	4b2e      	ldr	r3, [pc, #184]	; (8001edc <PID_YAW+0x274>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	da04      	bge.n	8001e34 <PID_YAW+0x1cc>
 8001e2a:	4b2c      	ldr	r3, [pc, #176]	; (8001edc <PID_YAW+0x274>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	425b      	negs	r3, r3
 8001e30:	4a2a      	ldr	r2, [pc, #168]	; (8001edc <PID_YAW+0x274>)
 8001e32:	6013      	str	r3, [r2, #0]
	if (Out_PIDYAW > 500) Out_PIDYAW = 500;
 8001e34:	4b29      	ldr	r3, [pc, #164]	; (8001edc <PID_YAW+0x274>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e3c:	dd03      	ble.n	8001e46 <PID_YAW+0x1de>
 8001e3e:	4b27      	ldr	r3, [pc, #156]	; (8001edc <PID_YAW+0x274>)
 8001e40:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001e44:	601a      	str	r2, [r3, #0]

	if (-1.5f < errorYaw && errorYaw < 1.5f) Out_PIDYAW = 0;
 8001e46:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <PID_YAW+0x234>)
 8001e48:	edd3 7a00 	vldr	s15, [r3]
 8001e4c:	eebf 7a08 	vmov.f32	s14, #248	; 0xbfc00000 -1.5
 8001e50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e58:	dd0c      	ble.n	8001e74 <PID_YAW+0x20c>
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <PID_YAW+0x234>)
 8001e5c:	edd3 7a00 	vldr	s15, [r3]
 8001e60:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001e64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e6c:	d502      	bpl.n	8001e74 <PID_YAW+0x20c>
 8001e6e:	4b1b      	ldr	r3, [pc, #108]	; (8001edc <PID_YAW+0x274>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
	SetDriverMotor_yaw(dir_yaw, Out_PIDYAW);
 8001e74:	4b0d      	ldr	r3, [pc, #52]	; (8001eac <PID_YAW+0x244>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4b18      	ldr	r3, [pc, #96]	; (8001edc <PID_YAW+0x274>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4610      	mov	r0, r2
 8001e82:	f7ff fbc3 	bl	800160c <SetDriverMotor_yaw>
	last_errorYaw = errorYaw;
 8001e86:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <PID_YAW+0x234>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a0c      	ldr	r2, [pc, #48]	; (8001ebc <PID_YAW+0x254>)
 8001e8c:	6013      	str	r3, [r2, #0]
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000010 	.word	0x20000010
 8001e98:	200012c4 	.word	0x200012c4
 8001e9c:	200011b4 	.word	0x200011b4
 8001ea0:	43848000 	.word	0x43848000
 8001ea4:	42be0000 	.word	0x42be0000
 8001ea8:	43b38000 	.word	0x43b38000
 8001eac:	20000228 	.word	0x20000228
 8001eb0:	200011bc 	.word	0x200011bc
 8001eb4:	00000000 	.word	0x00000000
 8001eb8:	200011ac 	.word	0x200011ac
 8001ebc:	20000c94 	.word	0x20000c94
 8001ec0:	425c0000 	.word	0x425c0000
 8001ec4:	200011e4 	.word	0x200011e4
 8001ec8:	42f00000 	.word	0x42f00000
 8001ecc:	c2f00000 	.word	0xc2f00000
 8001ed0:	20000230 	.word	0x20000230
 8001ed4:	3e4ccccd 	.word	0x3e4ccccd
 8001ed8:	3ecccccd 	.word	0x3ecccccd
 8001edc:	20001298 	.word	0x20001298

08001ee0 <input_data_wahana>:
void input_data_wahana(){
 8001ee0:	b598      	push	{r3, r4, r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
	if(USART3DataFlag == true){
 8001ee4:	4b6b      	ldr	r3, [pc, #428]	; (8002094 <input_data_wahana+0x1b4>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 8176 	beq.w	80021da <input_data_wahana+0x2fa>
		ukuranstring = sprintf((char*)buffer, "Wahana input = %s\r\n", data_wahana);
 8001eee:	4a6a      	ldr	r2, [pc, #424]	; (8002098 <input_data_wahana+0x1b8>)
 8001ef0:	496a      	ldr	r1, [pc, #424]	; (800209c <input_data_wahana+0x1bc>)
 8001ef2:	486b      	ldr	r0, [pc, #428]	; (80020a0 <input_data_wahana+0x1c0>)
 8001ef4:	f007 f8dc 	bl	80090b0 <siprintf>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	4b69      	ldr	r3, [pc, #420]	; (80020a4 <input_data_wahana+0x1c4>)
 8001efe:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, buffer, ukuranstring, 10);
 8001f00:	4b68      	ldr	r3, [pc, #416]	; (80020a4 <input_data_wahana+0x1c4>)
 8001f02:	881a      	ldrh	r2, [r3, #0]
 8001f04:	230a      	movs	r3, #10
 8001f06:	4966      	ldr	r1, [pc, #408]	; (80020a0 <input_data_wahana+0x1c0>)
 8001f08:	4867      	ldr	r0, [pc, #412]	; (80020a8 <input_data_wahana+0x1c8>)
 8001f0a:	f005 fa92 	bl	8007432 <HAL_UART_Transmit>
		for (cek_w = 0; cek_w < sizeof(data_wahana); cek_w++){
 8001f0e:	4b67      	ldr	r3, [pc, #412]	; (80020ac <input_data_wahana+0x1cc>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	e01b      	b.n	8001f4e <input_data_wahana+0x6e>
			if(('t' == data_wahana[cek_w]) && (flag_w == 0)){
 8001f16:	4b65      	ldr	r3, [pc, #404]	; (80020ac <input_data_wahana+0x1cc>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a5f      	ldr	r2, [pc, #380]	; (8002098 <input_data_wahana+0x1b8>)
 8001f1c:	5cd3      	ldrb	r3, [r2, r3]
 8001f1e:	2b74      	cmp	r3, #116	; 0x74
 8001f20:	d110      	bne.n	8001f44 <input_data_wahana+0x64>
 8001f22:	4b63      	ldr	r3, [pc, #396]	; (80020b0 <input_data_wahana+0x1d0>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d10c      	bne.n	8001f44 <input_data_wahana+0x64>
				if(flag_w == 0){
 8001f2a:	4b61      	ldr	r3, [pc, #388]	; (80020b0 <input_data_wahana+0x1d0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d113      	bne.n	8001f5a <input_data_wahana+0x7a>
					a_w = cek_w + 1;
 8001f32:	4b5e      	ldr	r3, [pc, #376]	; (80020ac <input_data_wahana+0x1cc>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	3301      	adds	r3, #1
 8001f38:	4a5e      	ldr	r2, [pc, #376]	; (80020b4 <input_data_wahana+0x1d4>)
 8001f3a:	6013      	str	r3, [r2, #0]
					flag_w = 9;
 8001f3c:	4b5c      	ldr	r3, [pc, #368]	; (80020b0 <input_data_wahana+0x1d0>)
 8001f3e:	2209      	movs	r2, #9
 8001f40:	601a      	str	r2, [r3, #0]
				}
				break;
 8001f42:	e00a      	b.n	8001f5a <input_data_wahana+0x7a>
		for (cek_w = 0; cek_w < sizeof(data_wahana); cek_w++){
 8001f44:	4b59      	ldr	r3, [pc, #356]	; (80020ac <input_data_wahana+0x1cc>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	4a58      	ldr	r2, [pc, #352]	; (80020ac <input_data_wahana+0x1cc>)
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	4b57      	ldr	r3, [pc, #348]	; (80020ac <input_data_wahana+0x1cc>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f56:	d3de      	bcc.n	8001f16 <input_data_wahana+0x36>
 8001f58:	e000      	b.n	8001f5c <input_data_wahana+0x7c>
				break;
 8001f5a:	bf00      	nop
			}
		}
		if (flag_w == 9){
 8001f5c:	4b54      	ldr	r3, [pc, #336]	; (80020b0 <input_data_wahana+0x1d0>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2b09      	cmp	r3, #9
 8001f62:	f040 80d1 	bne.w	8002108 <input_data_wahana+0x228>
			for(cek_w = a_w; cek_w < sizeof(data_wahana); cek_w++){
 8001f66:	4b53      	ldr	r3, [pc, #332]	; (80020b4 <input_data_wahana+0x1d4>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a50      	ldr	r2, [pc, #320]	; (80020ac <input_data_wahana+0x1cc>)
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	e0c5      	b.n	80020fc <input_data_wahana+0x21c>
				if (data_wahana[cek_w] == ','){
 8001f70:	4b4e      	ldr	r3, [pc, #312]	; (80020ac <input_data_wahana+0x1cc>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a48      	ldr	r2, [pc, #288]	; (8002098 <input_data_wahana+0x1b8>)
 8001f76:	5cd3      	ldrb	r3, [r2, r3]
 8001f78:	2b2c      	cmp	r3, #44	; 0x2c
 8001f7a:	d108      	bne.n	8001f8e <input_data_wahana+0xae>
					bit_w ++;
 8001f7c:	4b4e      	ldr	r3, [pc, #312]	; (80020b8 <input_data_wahana+0x1d8>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	3301      	adds	r3, #1
 8001f82:	4a4d      	ldr	r2, [pc, #308]	; (80020b8 <input_data_wahana+0x1d8>)
 8001f84:	6013      	str	r3, [r2, #0]
					ke_w = 0;
 8001f86:	4b4d      	ldr	r3, [pc, #308]	; (80020bc <input_data_wahana+0x1dc>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
					continue;
 8001f8c:	e0b1      	b.n	80020f2 <input_data_wahana+0x212>
				} else {
					if(bit_w == 1){
 8001f8e:	4b4a      	ldr	r3, [pc, #296]	; (80020b8 <input_data_wahana+0x1d8>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d108      	bne.n	8001fa8 <input_data_wahana+0xc8>
						data_mode_w[ke_w] = data_wahana[cek_w];
 8001f96:	4b45      	ldr	r3, [pc, #276]	; (80020ac <input_data_wahana+0x1cc>)
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	4b48      	ldr	r3, [pc, #288]	; (80020bc <input_data_wahana+0x1dc>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	493e      	ldr	r1, [pc, #248]	; (8002098 <input_data_wahana+0x1b8>)
 8001fa0:	5c89      	ldrb	r1, [r1, r2]
 8001fa2:	4a47      	ldr	r2, [pc, #284]	; (80020c0 <input_data_wahana+0x1e0>)
 8001fa4:	54d1      	strb	r1, [r2, r3]
 8001fa6:	e09f      	b.n	80020e8 <input_data_wahana+0x208>
					} else if (bit_w == 2){
 8001fa8:	4b43      	ldr	r3, [pc, #268]	; (80020b8 <input_data_wahana+0x1d8>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d108      	bne.n	8001fc2 <input_data_wahana+0xe2>
						data_yaw_w[ke_w] = data_wahana[cek_w];
 8001fb0:	4b3e      	ldr	r3, [pc, #248]	; (80020ac <input_data_wahana+0x1cc>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	4b41      	ldr	r3, [pc, #260]	; (80020bc <input_data_wahana+0x1dc>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4937      	ldr	r1, [pc, #220]	; (8002098 <input_data_wahana+0x1b8>)
 8001fba:	5c89      	ldrb	r1, [r1, r2]
 8001fbc:	4a41      	ldr	r2, [pc, #260]	; (80020c4 <input_data_wahana+0x1e4>)
 8001fbe:	54d1      	strb	r1, [r2, r3]
 8001fc0:	e092      	b.n	80020e8 <input_data_wahana+0x208>
					} else if (bit_w == 3){
 8001fc2:	4b3d      	ldr	r3, [pc, #244]	; (80020b8 <input_data_wahana+0x1d8>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2b03      	cmp	r3, #3
 8001fc8:	d108      	bne.n	8001fdc <input_data_wahana+0xfc>
						data_pitch_w[ke_w] = data_wahana[cek_w];
 8001fca:	4b38      	ldr	r3, [pc, #224]	; (80020ac <input_data_wahana+0x1cc>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	4b3b      	ldr	r3, [pc, #236]	; (80020bc <input_data_wahana+0x1dc>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4931      	ldr	r1, [pc, #196]	; (8002098 <input_data_wahana+0x1b8>)
 8001fd4:	5c89      	ldrb	r1, [r1, r2]
 8001fd6:	4a3c      	ldr	r2, [pc, #240]	; (80020c8 <input_data_wahana+0x1e8>)
 8001fd8:	54d1      	strb	r1, [r2, r3]
 8001fda:	e085      	b.n	80020e8 <input_data_wahana+0x208>
					} else if (bit_w == 4){
 8001fdc:	4b36      	ldr	r3, [pc, #216]	; (80020b8 <input_data_wahana+0x1d8>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b04      	cmp	r3, #4
 8001fe2:	d108      	bne.n	8001ff6 <input_data_wahana+0x116>
						data_roll_w[ke_w] = data_wahana[cek_w];
 8001fe4:	4b31      	ldr	r3, [pc, #196]	; (80020ac <input_data_wahana+0x1cc>)
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	4b34      	ldr	r3, [pc, #208]	; (80020bc <input_data_wahana+0x1dc>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	492a      	ldr	r1, [pc, #168]	; (8002098 <input_data_wahana+0x1b8>)
 8001fee:	5c89      	ldrb	r1, [r1, r2]
 8001ff0:	4a36      	ldr	r2, [pc, #216]	; (80020cc <input_data_wahana+0x1ec>)
 8001ff2:	54d1      	strb	r1, [r2, r3]
 8001ff4:	e078      	b.n	80020e8 <input_data_wahana+0x208>
					} else if (bit_w == 5){
 8001ff6:	4b30      	ldr	r3, [pc, #192]	; (80020b8 <input_data_wahana+0x1d8>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2b05      	cmp	r3, #5
 8001ffc:	d108      	bne.n	8002010 <input_data_wahana+0x130>
						data_angin_w[ke_w] = data_wahana[cek_w];
 8001ffe:	4b2b      	ldr	r3, [pc, #172]	; (80020ac <input_data_wahana+0x1cc>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	4b2e      	ldr	r3, [pc, #184]	; (80020bc <input_data_wahana+0x1dc>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4924      	ldr	r1, [pc, #144]	; (8002098 <input_data_wahana+0x1b8>)
 8002008:	5c89      	ldrb	r1, [r1, r2]
 800200a:	4a31      	ldr	r2, [pc, #196]	; (80020d0 <input_data_wahana+0x1f0>)
 800200c:	54d1      	strb	r1, [r2, r3]
 800200e:	e06b      	b.n	80020e8 <input_data_wahana+0x208>
					} else if (bit_w == 6){
 8002010:	4b29      	ldr	r3, [pc, #164]	; (80020b8 <input_data_wahana+0x1d8>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b06      	cmp	r3, #6
 8002016:	d108      	bne.n	800202a <input_data_wahana+0x14a>
						data_alti_w[ke_w] = data_wahana[cek_w];
 8002018:	4b24      	ldr	r3, [pc, #144]	; (80020ac <input_data_wahana+0x1cc>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	4b27      	ldr	r3, [pc, #156]	; (80020bc <input_data_wahana+0x1dc>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	491d      	ldr	r1, [pc, #116]	; (8002098 <input_data_wahana+0x1b8>)
 8002022:	5c89      	ldrb	r1, [r1, r2]
 8002024:	4a2b      	ldr	r2, [pc, #172]	; (80020d4 <input_data_wahana+0x1f4>)
 8002026:	54d1      	strb	r1, [r2, r3]
 8002028:	e05e      	b.n	80020e8 <input_data_wahana+0x208>
					} else if (bit_w == 7){
 800202a:	4b23      	ldr	r3, [pc, #140]	; (80020b8 <input_data_wahana+0x1d8>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2b07      	cmp	r3, #7
 8002030:	d108      	bne.n	8002044 <input_data_wahana+0x164>
						data_lat_w[ke_w] = data_wahana[cek_w];
 8002032:	4b1e      	ldr	r3, [pc, #120]	; (80020ac <input_data_wahana+0x1cc>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	4b21      	ldr	r3, [pc, #132]	; (80020bc <input_data_wahana+0x1dc>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4917      	ldr	r1, [pc, #92]	; (8002098 <input_data_wahana+0x1b8>)
 800203c:	5c89      	ldrb	r1, [r1, r2]
 800203e:	4a26      	ldr	r2, [pc, #152]	; (80020d8 <input_data_wahana+0x1f8>)
 8002040:	54d1      	strb	r1, [r2, r3]
 8002042:	e051      	b.n	80020e8 <input_data_wahana+0x208>
					} else if (bit_w == 8){
 8002044:	4b1c      	ldr	r3, [pc, #112]	; (80020b8 <input_data_wahana+0x1d8>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b08      	cmp	r3, #8
 800204a:	d108      	bne.n	800205e <input_data_wahana+0x17e>
						data_long_w[ke_w] = data_wahana[cek_w];
 800204c:	4b17      	ldr	r3, [pc, #92]	; (80020ac <input_data_wahana+0x1cc>)
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	4b1a      	ldr	r3, [pc, #104]	; (80020bc <input_data_wahana+0x1dc>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4910      	ldr	r1, [pc, #64]	; (8002098 <input_data_wahana+0x1b8>)
 8002056:	5c89      	ldrb	r1, [r1, r2]
 8002058:	4a20      	ldr	r2, [pc, #128]	; (80020dc <input_data_wahana+0x1fc>)
 800205a:	54d1      	strb	r1, [r2, r3]
 800205c:	e044      	b.n	80020e8 <input_data_wahana+0x208>
					} else if (bit_w == 9){
 800205e:	4b16      	ldr	r3, [pc, #88]	; (80020b8 <input_data_wahana+0x1d8>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2b09      	cmp	r3, #9
 8002064:	d108      	bne.n	8002078 <input_data_wahana+0x198>
						data_bat_w[ke_w] = data_wahana[cek_w];
 8002066:	4b11      	ldr	r3, [pc, #68]	; (80020ac <input_data_wahana+0x1cc>)
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	4b14      	ldr	r3, [pc, #80]	; (80020bc <input_data_wahana+0x1dc>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	490a      	ldr	r1, [pc, #40]	; (8002098 <input_data_wahana+0x1b8>)
 8002070:	5c89      	ldrb	r1, [r1, r2]
 8002072:	4a1b      	ldr	r2, [pc, #108]	; (80020e0 <input_data_wahana+0x200>)
 8002074:	54d1      	strb	r1, [r2, r3]
 8002076:	e037      	b.n	80020e8 <input_data_wahana+0x208>
					} else if (bit_w > 9){
 8002078:	4b0f      	ldr	r3, [pc, #60]	; (80020b8 <input_data_wahana+0x1d8>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b09      	cmp	r3, #9
 800207e:	dd33      	ble.n	80020e8 <input_data_wahana+0x208>
						bit_w = 0;
 8002080:	4b0d      	ldr	r3, [pc, #52]	; (80020b8 <input_data_wahana+0x1d8>)
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
						flag_w = 0;
 8002086:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <input_data_wahana+0x1d0>)
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
						out_w = 1;
 800208c:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <input_data_wahana+0x204>)
 800208e:	2201      	movs	r2, #1
 8002090:	601a      	str	r2, [r3, #0]
						break;
 8002092:	e039      	b.n	8002108 <input_data_wahana+0x228>
 8002094:	2000081c 	.word	0x2000081c
 8002098:	20000628 	.word	0x20000628
 800209c:	0800c4f4 	.word	0x0800c4f4
 80020a0:	200010d4 	.word	0x200010d4
 80020a4:	200011de 	.word	0x200011de
 80020a8:	20000f4c 	.word	0x20000f4c
 80020ac:	200011f8 	.word	0x200011f8
 80020b0:	200011e0 	.word	0x200011e0
 80020b4:	20001290 	.word	0x20001290
 80020b8:	20000844 	.word	0x20000844
 80020bc:	20000820 	.word	0x20000820
 80020c0:	200011c8 	.word	0x200011c8
 80020c4:	200011d4 	.word	0x200011d4
 80020c8:	20001070 	.word	0x20001070
 80020cc:	20000fa8 	.word	0x20000fa8
 80020d0:	200011a0 	.word	0x200011a0
 80020d4:	200011e8 	.word	0x200011e8
 80020d8:	2000107c 	.word	0x2000107c
 80020dc:	20001244 	.word	0x20001244
 80020e0:	20001000 	.word	0x20001000
 80020e4:	200012a4 	.word	0x200012a4
					} ke_w++;
 80020e8:	4b3d      	ldr	r3, [pc, #244]	; (80021e0 <input_data_wahana+0x300>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	3301      	adds	r3, #1
 80020ee:	4a3c      	ldr	r2, [pc, #240]	; (80021e0 <input_data_wahana+0x300>)
 80020f0:	6013      	str	r3, [r2, #0]
			for(cek_w = a_w; cek_w < sizeof(data_wahana); cek_w++){
 80020f2:	4b3c      	ldr	r3, [pc, #240]	; (80021e4 <input_data_wahana+0x304>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	3301      	adds	r3, #1
 80020f8:	4a3a      	ldr	r2, [pc, #232]	; (80021e4 <input_data_wahana+0x304>)
 80020fa:	6013      	str	r3, [r2, #0]
 80020fc:	4b39      	ldr	r3, [pc, #228]	; (80021e4 <input_data_wahana+0x304>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002104:	f4ff af34 	bcc.w	8001f70 <input_data_wahana+0x90>
				}
			}
		}
		mode_w  = atoi(data_mode_w);
 8002108:	4837      	ldr	r0, [pc, #220]	; (80021e8 <input_data_wahana+0x308>)
 800210a:	f006 f956 	bl	80083ba <atoi>
 800210e:	4602      	mov	r2, r0
 8002110:	4b36      	ldr	r3, [pc, #216]	; (80021ec <input_data_wahana+0x30c>)
 8002112:	601a      	str	r2, [r3, #0]
		yaw_w   = atof(data_yaw_w);
 8002114:	4836      	ldr	r0, [pc, #216]	; (80021f0 <input_data_wahana+0x310>)
 8002116:	f006 f94d 	bl	80083b4 <atof>
 800211a:	ec54 3b10 	vmov	r3, r4, d0
 800211e:	4618      	mov	r0, r3
 8002120:	4621      	mov	r1, r4
 8002122:	f7fe fd61 	bl	8000be8 <__aeabi_d2f>
 8002126:	4602      	mov	r2, r0
 8002128:	4b32      	ldr	r3, [pc, #200]	; (80021f4 <input_data_wahana+0x314>)
 800212a:	601a      	str	r2, [r3, #0]
		pitch_w = atof(data_pitch_w);
 800212c:	4832      	ldr	r0, [pc, #200]	; (80021f8 <input_data_wahana+0x318>)
 800212e:	f006 f941 	bl	80083b4 <atof>
 8002132:	ec54 3b10 	vmov	r3, r4, d0
 8002136:	4618      	mov	r0, r3
 8002138:	4621      	mov	r1, r4
 800213a:	f7fe fd55 	bl	8000be8 <__aeabi_d2f>
 800213e:	4602      	mov	r2, r0
 8002140:	4b2e      	ldr	r3, [pc, #184]	; (80021fc <input_data_wahana+0x31c>)
 8002142:	601a      	str	r2, [r3, #0]
		roll_w  = atof(data_roll_w);
 8002144:	482e      	ldr	r0, [pc, #184]	; (8002200 <input_data_wahana+0x320>)
 8002146:	f006 f935 	bl	80083b4 <atof>
 800214a:	ec54 3b10 	vmov	r3, r4, d0
 800214e:	4618      	mov	r0, r3
 8002150:	4621      	mov	r1, r4
 8002152:	f7fe fd49 	bl	8000be8 <__aeabi_d2f>
 8002156:	4602      	mov	r2, r0
 8002158:	4b2a      	ldr	r3, [pc, #168]	; (8002204 <input_data_wahana+0x324>)
 800215a:	601a      	str	r2, [r3, #0]
		angin_w = atof(data_angin_w);
 800215c:	482a      	ldr	r0, [pc, #168]	; (8002208 <input_data_wahana+0x328>)
 800215e:	f006 f929 	bl	80083b4 <atof>
 8002162:	ec54 3b10 	vmov	r3, r4, d0
 8002166:	4618      	mov	r0, r3
 8002168:	4621      	mov	r1, r4
 800216a:	f7fe fd3d 	bl	8000be8 <__aeabi_d2f>
 800216e:	4602      	mov	r2, r0
 8002170:	4b26      	ldr	r3, [pc, #152]	; (800220c <input_data_wahana+0x32c>)
 8002172:	601a      	str	r2, [r3, #0]
		alti_w  = atof(data_alti_w);
 8002174:	4826      	ldr	r0, [pc, #152]	; (8002210 <input_data_wahana+0x330>)
 8002176:	f006 f91d 	bl	80083b4 <atof>
 800217a:	ec54 3b10 	vmov	r3, r4, d0
 800217e:	4618      	mov	r0, r3
 8002180:	4621      	mov	r1, r4
 8002182:	f7fe fd31 	bl	8000be8 <__aeabi_d2f>
 8002186:	4602      	mov	r2, r0
 8002188:	4b22      	ldr	r3, [pc, #136]	; (8002214 <input_data_wahana+0x334>)
 800218a:	601a      	str	r2, [r3, #0]
		lat_w	= atof(data_lat_w);
 800218c:	4822      	ldr	r0, [pc, #136]	; (8002218 <input_data_wahana+0x338>)
 800218e:	f006 f911 	bl	80083b4 <atof>
 8002192:	ec54 3b10 	vmov	r3, r4, d0
 8002196:	4618      	mov	r0, r3
 8002198:	4621      	mov	r1, r4
 800219a:	f7fe fd25 	bl	8000be8 <__aeabi_d2f>
 800219e:	4602      	mov	r2, r0
 80021a0:	4b1e      	ldr	r3, [pc, #120]	; (800221c <input_data_wahana+0x33c>)
 80021a2:	601a      	str	r2, [r3, #0]
		long_w	= atof(data_long_w);
 80021a4:	481e      	ldr	r0, [pc, #120]	; (8002220 <input_data_wahana+0x340>)
 80021a6:	f006 f905 	bl	80083b4 <atof>
 80021aa:	ec54 3b10 	vmov	r3, r4, d0
 80021ae:	4618      	mov	r0, r3
 80021b0:	4621      	mov	r1, r4
 80021b2:	f7fe fd19 	bl	8000be8 <__aeabi_d2f>
 80021b6:	4602      	mov	r2, r0
 80021b8:	4b1a      	ldr	r3, [pc, #104]	; (8002224 <input_data_wahana+0x344>)
 80021ba:	601a      	str	r2, [r3, #0]
		bat_w	= atof(data_bat_w);
 80021bc:	481a      	ldr	r0, [pc, #104]	; (8002228 <input_data_wahana+0x348>)
 80021be:	f006 f8f9 	bl	80083b4 <atof>
 80021c2:	ec54 3b10 	vmov	r3, r4, d0
 80021c6:	4618      	mov	r0, r3
 80021c8:	4621      	mov	r1, r4
 80021ca:	f7fe fd0d 	bl	8000be8 <__aeabi_d2f>
 80021ce:	4602      	mov	r2, r0
 80021d0:	4b16      	ldr	r3, [pc, #88]	; (800222c <input_data_wahana+0x34c>)
 80021d2:	601a      	str	r2, [r3, #0]
		USART3DataFlag = false;
 80021d4:	4b16      	ldr	r3, [pc, #88]	; (8002230 <input_data_wahana+0x350>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	701a      	strb	r2, [r3, #0]
	}
}
 80021da:	bf00      	nop
 80021dc:	bd98      	pop	{r3, r4, r7, pc}
 80021de:	bf00      	nop
 80021e0:	20000820 	.word	0x20000820
 80021e4:	200011f8 	.word	0x200011f8
 80021e8:	200011c8 	.word	0x200011c8
 80021ec:	200011b8 	.word	0x200011b8
 80021f0:	200011d4 	.word	0x200011d4
 80021f4:	20000840 	.word	0x20000840
 80021f8:	20001070 	.word	0x20001070
 80021fc:	200012c8 	.word	0x200012c8
 8002200:	20000fa8 	.word	0x20000fa8
 8002204:	200012bc 	.word	0x200012bc
 8002208:	200011a0 	.word	0x200011a0
 800220c:	20000cf4 	.word	0x20000cf4
 8002210:	200011e8 	.word	0x200011e8
 8002214:	20000cec 	.word	0x20000cec
 8002218:	2000107c 	.word	0x2000107c
 800221c:	2000083c 	.word	0x2000083c
 8002220:	20001244 	.word	0x20001244
 8002224:	20000f94 	.word	0x20000f94
 8002228:	20001000 	.word	0x20001000
 800222c:	20000f8c 	.word	0x20000f8c
 8002230:	2000081c 	.word	0x2000081c

08002234 <kirim_GCS>:
void kirim_GCS(){
 8002234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002238:	b0ab      	sub	sp, #172	; 0xac
 800223a:	af18      	add	r7, sp, #96	; 0x60
	ukuranstring = sprintf((char*)buffer, "%d,%2.f,%2.f,%2.f,%2.f,%2.f,%2.f,%f,%2.f,%f,%f,%f,%f\r\n", mode_w, yaw_w,
 800223c:	4b49      	ldr	r3, [pc, #292]	; (8002364 <kirim_GCS+0x130>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	647b      	str	r3, [r7, #68]	; 0x44
 8002242:	4b49      	ldr	r3, [pc, #292]	; (8002368 <kirim_GCS+0x134>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe f97e 	bl	8000548 <__aeabi_f2d>
 800224c:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8002250:	4b46      	ldr	r3, [pc, #280]	; (800236c <kirim_GCS+0x138>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f7fe f977 	bl	8000548 <__aeabi_f2d>
 800225a:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 800225e:	4b44      	ldr	r3, [pc, #272]	; (8002370 <kirim_GCS+0x13c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe f970 	bl	8000548 <__aeabi_f2d>
 8002268:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 800226c:	4b41      	ldr	r3, [pc, #260]	; (8002374 <kirim_GCS+0x140>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f7fe f969 	bl	8000548 <__aeabi_f2d>
 8002276:	e9c7 0108 	strd	r0, r1, [r7, #32]
 800227a:	4b3f      	ldr	r3, [pc, #252]	; (8002378 <kirim_GCS+0x144>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe f962 	bl	8000548 <__aeabi_f2d>
 8002284:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002288:	4b3c      	ldr	r3, [pc, #240]	; (800237c <kirim_GCS+0x148>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f7fe f95b 	bl	8000548 <__aeabi_f2d>
 8002292:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002296:	4b3a      	ldr	r3, [pc, #232]	; (8002380 <kirim_GCS+0x14c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f7fe f954 	bl	8000548 <__aeabi_f2d>
 80022a0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80022a4:	4b37      	ldr	r3, [pc, #220]	; (8002384 <kirim_GCS+0x150>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7fe f94d 	bl	8000548 <__aeabi_f2d>
 80022ae:	e9c7 0100 	strd	r0, r1, [r7]
 80022b2:	4b35      	ldr	r3, [pc, #212]	; (8002388 <kirim_GCS+0x154>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fe f946 	bl	8000548 <__aeabi_f2d>
 80022bc:	4682      	mov	sl, r0
 80022be:	468b      	mov	fp, r1
 80022c0:	4b32      	ldr	r3, [pc, #200]	; (800238c <kirim_GCS+0x158>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7fe f93f 	bl	8000548 <__aeabi_f2d>
 80022ca:	4680      	mov	r8, r0
 80022cc:	4689      	mov	r9, r1
 80022ce:	4b30      	ldr	r3, [pc, #192]	; (8002390 <kirim_GCS+0x15c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7fe f938 	bl	8000548 <__aeabi_f2d>
 80022d8:	4605      	mov	r5, r0
 80022da:	460e      	mov	r6, r1
 80022dc:	4b2d      	ldr	r3, [pc, #180]	; (8002394 <kirim_GCS+0x160>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7fe f931 	bl	8000548 <__aeabi_f2d>
 80022e6:	4603      	mov	r3, r0
 80022e8:	460c      	mov	r4, r1
 80022ea:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
 80022ee:	e9cd 5614 	strd	r5, r6, [sp, #80]	; 0x50
 80022f2:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80022f6:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
 80022fa:	ed97 7b00 	vldr	d7, [r7]
 80022fe:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8002302:	ed97 7b02 	vldr	d7, [r7, #8]
 8002306:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800230a:	ed97 7b04 	vldr	d7, [r7, #16]
 800230e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8002312:	ed97 7b06 	vldr	d7, [r7, #24]
 8002316:	ed8d 7b08 	vstr	d7, [sp, #32]
 800231a:	ed97 7b08 	vldr	d7, [r7, #32]
 800231e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002322:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002326:	ed8d 7b04 	vstr	d7, [sp, #16]
 800232a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800232e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002332:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002336:	ed8d 7b00 	vstr	d7, [sp]
 800233a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800233c:	4916      	ldr	r1, [pc, #88]	; (8002398 <kirim_GCS+0x164>)
 800233e:	4817      	ldr	r0, [pc, #92]	; (800239c <kirim_GCS+0x168>)
 8002340:	f006 feb6 	bl	80090b0 <siprintf>
 8002344:	4603      	mov	r3, r0
 8002346:	b29a      	uxth	r2, r3
 8002348:	4b15      	ldr	r3, [pc, #84]	; (80023a0 <kirim_GCS+0x16c>)
 800234a:	801a      	strh	r2, [r3, #0]
			pitch_w, roll_w, angin_w, alti_w, lat_w, long_w, bat_w, data_Pitch1, data_heading, lat_gps, lon_gps);
	//ukuranstring = sprintf((char*)buffer, "POT:%f | HMC:%f | P:%d | Y:%d\r\n", data_Pitch1, data_heading, Out_PIDPITCH, Out_PIDYAW);
	HAL_UART_Transmit(&huart1, buffer, ukuranstring, 30);
 800234c:	4b14      	ldr	r3, [pc, #80]	; (80023a0 <kirim_GCS+0x16c>)
 800234e:	881a      	ldrh	r2, [r3, #0]
 8002350:	231e      	movs	r3, #30
 8002352:	4912      	ldr	r1, [pc, #72]	; (800239c <kirim_GCS+0x168>)
 8002354:	4813      	ldr	r0, [pc, #76]	; (80023a4 <kirim_GCS+0x170>)
 8002356:	f005 f86c 	bl	8007432 <HAL_UART_Transmit>
}
 800235a:	bf00      	nop
 800235c:	374c      	adds	r7, #76	; 0x4c
 800235e:	46bd      	mov	sp, r7
 8002360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002364:	200011b8 	.word	0x200011b8
 8002368:	20000840 	.word	0x20000840
 800236c:	200012c8 	.word	0x200012c8
 8002370:	200012bc 	.word	0x200012bc
 8002374:	20000cf4 	.word	0x20000cf4
 8002378:	20000cec 	.word	0x20000cec
 800237c:	2000083c 	.word	0x2000083c
 8002380:	20000f94 	.word	0x20000f94
 8002384:	20000f8c 	.word	0x20000f8c
 8002388:	2000129c 	.word	0x2000129c
 800238c:	200012c4 	.word	0x200012c4
 8002390:	20001294 	.word	0x20001294
 8002394:	200012b8 	.word	0x200012b8
 8002398:	0800c508 	.word	0x0800c508
 800239c:	200010d4 	.word	0x200010d4
 80023a0:	200011de 	.word	0x200011de
 80023a4:	20001088 	.word	0x20001088

080023a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023ac:	f001 f91a 	bl	80035e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023b0:	f000 f8ca 	bl	8002548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023b4:	f000 faee 	bl	8002994 <MX_GPIO_Init>
  MX_DMA_Init();
 80023b8:	f000 faae 	bl	8002918 <MX_DMA_Init>
  MX_I2C3_Init();
 80023bc:	f000 f980 	bl	80026c0 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 80023c0:	f000 fa56 	bl	8002870 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80023c4:	f000 f92a 	bl	800261c <MX_ADC1_Init>
  MX_TIM2_Init();
 80023c8:	f000 f9a8 	bl	800271c <MX_TIM2_Init>
  MX_UART4_Init();
 80023cc:	f000 fa26 	bl	800281c <MX_UART4_Init>
  MX_USART3_UART_Init();
 80023d0:	f000 fa78 	bl	80028c4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  I2Cdev_init(&hi2c3);
 80023d4:	4850      	ldr	r0, [pc, #320]	; (8002518 <main+0x170>)
 80023d6:	f7fe fea3 	bl	8001120 <I2Cdev_init>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80023da:	2100      	movs	r1, #0
 80023dc:	484f      	ldr	r0, [pc, #316]	; (800251c <main+0x174>)
 80023de:	f004 fa93 	bl	8006908 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80023e2:	2104      	movs	r1, #4
 80023e4:	484d      	ldr	r0, [pc, #308]	; (800251c <main+0x174>)
 80023e6:	f004 fa8f 	bl	8006908 <HAL_TIM_PWM_Start>
  HMC5883LInit();
 80023ea:	f7fe ffaf 	bl	800134c <HMC5883LInit>
  bacaheading();
 80023ee:	f7ff f80f 	bl	8001410 <bacaheading>
  HAL_ADC_Start(&hadc1);
 80023f2:	484b      	ldr	r0, [pc, #300]	; (8002520 <main+0x178>)
 80023f4:	f001 f9ce 	bl	8003794 <HAL_ADC_Start>

  //interupt usart3
  __HAL_UART_ENABLE_IT(&huart4, UART_IT_IDLE);
 80023f8:	4b4a      	ldr	r3, [pc, #296]	; (8002524 <main+0x17c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68da      	ldr	r2, [r3, #12]
 80023fe:	4b49      	ldr	r3, [pc, #292]	; (8002524 <main+0x17c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 0210 	orr.w	r2, r2, #16
 8002406:	60da      	str	r2, [r3, #12]
  if(HAL_UART_Receive_DMA(&huart4, dma_rx4_buf, DMA_BUF_SIZE) != HAL_OK){
 8002408:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800240c:	4946      	ldr	r1, [pc, #280]	; (8002528 <main+0x180>)
 800240e:	4845      	ldr	r0, [pc, #276]	; (8002524 <main+0x17c>)
 8002410:	f005 f8a8 	bl	8007564 <HAL_UART_Receive_DMA>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <main+0x76>
	  Error_Handler();
 800241a:	f000 fc99 	bl	8002d50 <Error_Handler>
  }

  __HAL_DMA_DISABLE_IT(huart4.hdmarx, DMA_IT_HT);
 800241e:	4b41      	ldr	r3, [pc, #260]	; (8002524 <main+0x17c>)
 8002420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	4b3f      	ldr	r3, [pc, #252]	; (8002524 <main+0x17c>)
 8002428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 0208 	bic.w	r2, r2, #8
 8002430:	601a      	str	r2, [r3, #0]


  //interupt uart1
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8002432:	4b3e      	ldr	r3, [pc, #248]	; (800252c <main+0x184>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68da      	ldr	r2, [r3, #12]
 8002438:	4b3c      	ldr	r3, [pc, #240]	; (800252c <main+0x184>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f042 0210 	orr.w	r2, r2, #16
 8002440:	60da      	str	r2, [r3, #12]
  if(HAL_UART_Receive_DMA(&huart1, dma_rx1_buf, DMA_BUF_SIZE) != HAL_OK){
 8002442:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002446:	493a      	ldr	r1, [pc, #232]	; (8002530 <main+0x188>)
 8002448:	4838      	ldr	r0, [pc, #224]	; (800252c <main+0x184>)
 800244a:	f005 f88b 	bl	8007564 <HAL_UART_Receive_DMA>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <main+0xb0>
	  Error_Handler();
 8002454:	f000 fc7c 	bl	8002d50 <Error_Handler>
  }

  __HAL_DMA_DISABLE_IT(huart1.hdmarx, DMA_IT_HT);
 8002458:	4b34      	ldr	r3, [pc, #208]	; (800252c <main+0x184>)
 800245a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	4b32      	ldr	r3, [pc, #200]	; (800252c <main+0x184>)
 8002462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 0208 	bic.w	r2, r2, #8
 800246a:	601a      	str	r2, [r3, #0]


  //interupt usart2
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);
 800246c:	4b31      	ldr	r3, [pc, #196]	; (8002534 <main+0x18c>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	4b30      	ldr	r3, [pc, #192]	; (8002534 <main+0x18c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0210 	orr.w	r2, r2, #16
 800247a:	60da      	str	r2, [r3, #12]
  if(HAL_UART_Receive_DMA(&huart3, dma_rx3_buf, DMA_BUF_SIZE) != HAL_OK){
 800247c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002480:	492d      	ldr	r1, [pc, #180]	; (8002538 <main+0x190>)
 8002482:	482c      	ldr	r0, [pc, #176]	; (8002534 <main+0x18c>)
 8002484:	f005 f86e 	bl	8007564 <HAL_UART_Receive_DMA>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <main+0xea>
	  Error_Handler();
 800248e:	f000 fc5f 	bl	8002d50 <Error_Handler>
  }

  __HAL_DMA_DISABLE_IT(huart3.hdmarx, DMA_IT_HT);
 8002492:	4b28      	ldr	r3, [pc, #160]	; (8002534 <main+0x18c>)
 8002494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	4b26      	ldr	r3, [pc, #152]	; (8002534 <main+0x18c>)
 800249c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0208 	bic.w	r2, r2, #8
 80024a4:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ukuranstring = sprintf((char*)buffer, "=========SISTEM TRACKER DICOBA======\r\n");
 80024a6:	4b25      	ldr	r3, [pc, #148]	; (800253c <main+0x194>)
 80024a8:	4a25      	ldr	r2, [pc, #148]	; (8002540 <main+0x198>)
 80024aa:	4614      	mov	r4, r2
 80024ac:	469c      	mov	ip, r3
 80024ae:	f104 0e20 	add.w	lr, r4, #32
 80024b2:	4665      	mov	r5, ip
 80024b4:	4626      	mov	r6, r4
 80024b6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80024b8:	6028      	str	r0, [r5, #0]
 80024ba:	6069      	str	r1, [r5, #4]
 80024bc:	60aa      	str	r2, [r5, #8]
 80024be:	60eb      	str	r3, [r5, #12]
 80024c0:	3410      	adds	r4, #16
 80024c2:	f10c 0c10 	add.w	ip, ip, #16
 80024c6:	4574      	cmp	r4, lr
 80024c8:	d1f3      	bne.n	80024b2 <main+0x10a>
 80024ca:	4663      	mov	r3, ip
 80024cc:	4622      	mov	r2, r4
 80024ce:	6810      	ldr	r0, [r2, #0]
 80024d0:	6018      	str	r0, [r3, #0]
 80024d2:	8891      	ldrh	r1, [r2, #4]
 80024d4:	7992      	ldrb	r2, [r2, #6]
 80024d6:	8099      	strh	r1, [r3, #4]
 80024d8:	719a      	strb	r2, [r3, #6]
 80024da:	2326      	movs	r3, #38	; 0x26
 80024dc:	b29a      	uxth	r2, r3
 80024de:	4b19      	ldr	r3, [pc, #100]	; (8002544 <main+0x19c>)
 80024e0:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, buffer, ukuranstring, 5);
 80024e2:	4b18      	ldr	r3, [pc, #96]	; (8002544 <main+0x19c>)
 80024e4:	881a      	ldrh	r2, [r3, #0]
 80024e6:	2305      	movs	r3, #5
 80024e8:	4914      	ldr	r1, [pc, #80]	; (800253c <main+0x194>)
 80024ea:	4810      	ldr	r0, [pc, #64]	; (800252c <main+0x184>)
 80024ec:	f004 ffa1 	bl	8007432 <HAL_UART_Transmit>
  while (1)
  {
	  input_data_wahana();
 80024f0:	f7ff fcf6 	bl	8001ee0 <input_data_wahana>
	  gps_parse();
 80024f4:	f7ff f8ee 	bl	80016d4 <gps_parse>
	  GetHMC5893L();
 80024f8:	f7ff f846 	bl	8001588 <GetHMC5893L>
	  GetPOTENSIO();
 80024fc:	f7fe ff18 	bl	8001330 <GetPOTENSIO>
	  cek_heading();
 8002500:	f7ff f854 	bl	80015ac <cek_heading>
	  baca_input();     //send : "#,{arahVertikal},{arahHorizontal}\n
 8002504:	f7ff f9f6 	bl	80018f4 <baca_input>
	  PID_YAW();
 8002508:	f7ff fbae 	bl	8001c68 <PID_YAW>
	  PID_PITCH();
 800250c:	f7ff fac8 	bl	8001aa0 <PID_PITCH>
	  kirim_GCS();
 8002510:	f7ff fe90 	bl	8002234 <kirim_GCS>
	  input_data_wahana();
 8002514:	e7ec      	b.n	80024f0 <main+0x148>
 8002516:	bf00      	nop
 8002518:	20000c98 	.word	0x20000c98
 800251c:	20001250 	.word	0x20001250
 8002520:	20000fb8 	.word	0x20000fb8
 8002524:	20001200 	.word	0x20001200
 8002528:	20000848 	.word	0x20000848
 800252c:	20001088 	.word	0x20001088
 8002530:	20000aa0 	.word	0x20000aa0
 8002534:	20000f4c 	.word	0x20000f4c
 8002538:	20000cf8 	.word	0x20000cf8
 800253c:	200010d4 	.word	0x200010d4
 8002540:	0800c540 	.word	0x0800c540
 8002544:	200011de 	.word	0x200011de

08002548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b094      	sub	sp, #80	; 0x50
 800254c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800254e:	f107 0320 	add.w	r3, r7, #32
 8002552:	2230      	movs	r2, #48	; 0x30
 8002554:	2100      	movs	r1, #0
 8002556:	4618      	mov	r0, r3
 8002558:	f005 ff5e 	bl	8008418 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800255c:	f107 030c 	add.w	r3, r7, #12
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800256c:	2300      	movs	r3, #0
 800256e:	60bb      	str	r3, [r7, #8]
 8002570:	4b28      	ldr	r3, [pc, #160]	; (8002614 <SystemClock_Config+0xcc>)
 8002572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002574:	4a27      	ldr	r2, [pc, #156]	; (8002614 <SystemClock_Config+0xcc>)
 8002576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800257a:	6413      	str	r3, [r2, #64]	; 0x40
 800257c:	4b25      	ldr	r3, [pc, #148]	; (8002614 <SystemClock_Config+0xcc>)
 800257e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002584:	60bb      	str	r3, [r7, #8]
 8002586:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002588:	2300      	movs	r3, #0
 800258a:	607b      	str	r3, [r7, #4]
 800258c:	4b22      	ldr	r3, [pc, #136]	; (8002618 <SystemClock_Config+0xd0>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a21      	ldr	r2, [pc, #132]	; (8002618 <SystemClock_Config+0xd0>)
 8002592:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002596:	6013      	str	r3, [r2, #0]
 8002598:	4b1f      	ldr	r3, [pc, #124]	; (8002618 <SystemClock_Config+0xd0>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025a0:	607b      	str	r3, [r7, #4]
 80025a2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025a4:	2301      	movs	r3, #1
 80025a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025ae:	2302      	movs	r3, #2
 80025b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80025b8:	2308      	movs	r3, #8
 80025ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80025bc:	23a8      	movs	r3, #168	; 0xa8
 80025be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025c0:	2302      	movs	r3, #2
 80025c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80025c4:	2304      	movs	r3, #4
 80025c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025c8:	f107 0320 	add.w	r3, r7, #32
 80025cc:	4618      	mov	r0, r3
 80025ce:	f003 fcdb 	bl	8005f88 <HAL_RCC_OscConfig>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80025d8:	f000 fbba 	bl	8002d50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025dc:	230f      	movs	r3, #15
 80025de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025e0:	2302      	movs	r3, #2
 80025e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025e4:	2300      	movs	r3, #0
 80025e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80025e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80025ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80025ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80025f4:	f107 030c 	add.w	r3, r7, #12
 80025f8:	2105      	movs	r1, #5
 80025fa:	4618      	mov	r0, r3
 80025fc:	f003 ff34 	bl	8006468 <HAL_RCC_ClockConfig>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002606:	f000 fba3 	bl	8002d50 <Error_Handler>
  }
}
 800260a:	bf00      	nop
 800260c:	3750      	adds	r7, #80	; 0x50
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40023800 	.word	0x40023800
 8002618:	40007000 	.word	0x40007000

0800261c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002622:	463b      	mov	r3, r7
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800262e:	4b21      	ldr	r3, [pc, #132]	; (80026b4 <MX_ADC1_Init+0x98>)
 8002630:	4a21      	ldr	r2, [pc, #132]	; (80026b8 <MX_ADC1_Init+0x9c>)
 8002632:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002634:	4b1f      	ldr	r3, [pc, #124]	; (80026b4 <MX_ADC1_Init+0x98>)
 8002636:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800263a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800263c:	4b1d      	ldr	r3, [pc, #116]	; (80026b4 <MX_ADC1_Init+0x98>)
 800263e:	2200      	movs	r2, #0
 8002640:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002642:	4b1c      	ldr	r3, [pc, #112]	; (80026b4 <MX_ADC1_Init+0x98>)
 8002644:	2200      	movs	r2, #0
 8002646:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002648:	4b1a      	ldr	r3, [pc, #104]	; (80026b4 <MX_ADC1_Init+0x98>)
 800264a:	2201      	movs	r2, #1
 800264c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800264e:	4b19      	ldr	r3, [pc, #100]	; (80026b4 <MX_ADC1_Init+0x98>)
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002656:	4b17      	ldr	r3, [pc, #92]	; (80026b4 <MX_ADC1_Init+0x98>)
 8002658:	2200      	movs	r2, #0
 800265a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800265c:	4b15      	ldr	r3, [pc, #84]	; (80026b4 <MX_ADC1_Init+0x98>)
 800265e:	4a17      	ldr	r2, [pc, #92]	; (80026bc <MX_ADC1_Init+0xa0>)
 8002660:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002662:	4b14      	ldr	r3, [pc, #80]	; (80026b4 <MX_ADC1_Init+0x98>)
 8002664:	2200      	movs	r2, #0
 8002666:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002668:	4b12      	ldr	r3, [pc, #72]	; (80026b4 <MX_ADC1_Init+0x98>)
 800266a:	2201      	movs	r2, #1
 800266c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800266e:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <MX_ADC1_Init+0x98>)
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002676:	4b0f      	ldr	r3, [pc, #60]	; (80026b4 <MX_ADC1_Init+0x98>)
 8002678:	2201      	movs	r2, #1
 800267a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800267c:	480d      	ldr	r0, [pc, #52]	; (80026b4 <MX_ADC1_Init+0x98>)
 800267e:	f001 f845 	bl	800370c <HAL_ADC_Init>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002688:	f000 fb62 	bl	8002d50 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800268c:	230e      	movs	r3, #14
 800268e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002690:	2301      	movs	r3, #1
 8002692:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002694:	2300      	movs	r3, #0
 8002696:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002698:	463b      	mov	r3, r7
 800269a:	4619      	mov	r1, r3
 800269c:	4805      	ldr	r0, [pc, #20]	; (80026b4 <MX_ADC1_Init+0x98>)
 800269e:	f001 fadf 	bl	8003c60 <HAL_ADC_ConfigChannel>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80026a8:	f000 fb52 	bl	8002d50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80026ac:	bf00      	nop
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	20000fb8 	.word	0x20000fb8
 80026b8:	40012000 	.word	0x40012000
 80026bc:	0f000001 	.word	0x0f000001

080026c0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80026c4:	4b12      	ldr	r3, [pc, #72]	; (8002710 <MX_I2C3_Init+0x50>)
 80026c6:	4a13      	ldr	r2, [pc, #76]	; (8002714 <MX_I2C3_Init+0x54>)
 80026c8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80026ca:	4b11      	ldr	r3, [pc, #68]	; (8002710 <MX_I2C3_Init+0x50>)
 80026cc:	4a12      	ldr	r2, [pc, #72]	; (8002718 <MX_I2C3_Init+0x58>)
 80026ce:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80026d0:	4b0f      	ldr	r3, [pc, #60]	; (8002710 <MX_I2C3_Init+0x50>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80026d6:	4b0e      	ldr	r3, [pc, #56]	; (8002710 <MX_I2C3_Init+0x50>)
 80026d8:	2200      	movs	r2, #0
 80026da:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026dc:	4b0c      	ldr	r3, [pc, #48]	; (8002710 <MX_I2C3_Init+0x50>)
 80026de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026e2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026e4:	4b0a      	ldr	r3, [pc, #40]	; (8002710 <MX_I2C3_Init+0x50>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80026ea:	4b09      	ldr	r3, [pc, #36]	; (8002710 <MX_I2C3_Init+0x50>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026f0:	4b07      	ldr	r3, [pc, #28]	; (8002710 <MX_I2C3_Init+0x50>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026f6:	4b06      	ldr	r3, [pc, #24]	; (8002710 <MX_I2C3_Init+0x50>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80026fc:	4804      	ldr	r0, [pc, #16]	; (8002710 <MX_I2C3_Init+0x50>)
 80026fe:	f002 fb2d 	bl	8004d5c <HAL_I2C_Init>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002708:	f000 fb22 	bl	8002d50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800270c:	bf00      	nop
 800270e:	bd80      	pop	{r7, pc}
 8002710:	20000c98 	.word	0x20000c98
 8002714:	40005c00 	.word	0x40005c00
 8002718:	000186a0 	.word	0x000186a0

0800271c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b08e      	sub	sp, #56	; 0x38
 8002720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002722:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	605a      	str	r2, [r3, #4]
 800272c:	609a      	str	r2, [r3, #8]
 800272e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002730:	f107 0320 	add.w	r3, r7, #32
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800273a:	1d3b      	adds	r3, r7, #4
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	605a      	str	r2, [r3, #4]
 8002742:	609a      	str	r2, [r3, #8]
 8002744:	60da      	str	r2, [r3, #12]
 8002746:	611a      	str	r2, [r3, #16]
 8002748:	615a      	str	r2, [r3, #20]
 800274a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800274c:	4b32      	ldr	r3, [pc, #200]	; (8002818 <MX_TIM2_Init+0xfc>)
 800274e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002752:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 168-1;
 8002754:	4b30      	ldr	r3, [pc, #192]	; (8002818 <MX_TIM2_Init+0xfc>)
 8002756:	22a7      	movs	r2, #167	; 0xa7
 8002758:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800275a:	4b2f      	ldr	r3, [pc, #188]	; (8002818 <MX_TIM2_Init+0xfc>)
 800275c:	2200      	movs	r2, #0
 800275e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000 - 1;
 8002760:	4b2d      	ldr	r3, [pc, #180]	; (8002818 <MX_TIM2_Init+0xfc>)
 8002762:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002766:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002768:	4b2b      	ldr	r3, [pc, #172]	; (8002818 <MX_TIM2_Init+0xfc>)
 800276a:	2200      	movs	r2, #0
 800276c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800276e:	4b2a      	ldr	r3, [pc, #168]	; (8002818 <MX_TIM2_Init+0xfc>)
 8002770:	2200      	movs	r2, #0
 8002772:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002774:	4828      	ldr	r0, [pc, #160]	; (8002818 <MX_TIM2_Init+0xfc>)
 8002776:	f004 f867 	bl	8006848 <HAL_TIM_Base_Init>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002780:	f000 fae6 	bl	8002d50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002788:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800278a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800278e:	4619      	mov	r1, r3
 8002790:	4821      	ldr	r0, [pc, #132]	; (8002818 <MX_TIM2_Init+0xfc>)
 8002792:	f004 f9bd 	bl	8006b10 <HAL_TIM_ConfigClockSource>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800279c:	f000 fad8 	bl	8002d50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80027a0:	481d      	ldr	r0, [pc, #116]	; (8002818 <MX_TIM2_Init+0xfc>)
 80027a2:	f004 f87c 	bl	800689e <HAL_TIM_PWM_Init>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80027ac:	f000 fad0 	bl	8002d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027b0:	2300      	movs	r3, #0
 80027b2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027b4:	2300      	movs	r3, #0
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027b8:	f107 0320 	add.w	r3, r7, #32
 80027bc:	4619      	mov	r1, r3
 80027be:	4816      	ldr	r0, [pc, #88]	; (8002818 <MX_TIM2_Init+0xfc>)
 80027c0:	f004 fd6e 	bl	80072a0 <HAL_TIMEx_MasterConfigSynchronization>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80027ca:	f000 fac1 	bl	8002d50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027ce:	2360      	movs	r3, #96	; 0x60
 80027d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80027d2:	2300      	movs	r3, #0
 80027d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027d6:	2300      	movs	r3, #0
 80027d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027da:	2300      	movs	r3, #0
 80027dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027de:	1d3b      	adds	r3, r7, #4
 80027e0:	2200      	movs	r2, #0
 80027e2:	4619      	mov	r1, r3
 80027e4:	480c      	ldr	r0, [pc, #48]	; (8002818 <MX_TIM2_Init+0xfc>)
 80027e6:	f004 f8cd 	bl	8006984 <HAL_TIM_PWM_ConfigChannel>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80027f0:	f000 faae 	bl	8002d50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80027f4:	1d3b      	adds	r3, r7, #4
 80027f6:	2204      	movs	r2, #4
 80027f8:	4619      	mov	r1, r3
 80027fa:	4807      	ldr	r0, [pc, #28]	; (8002818 <MX_TIM2_Init+0xfc>)
 80027fc:	f004 f8c2 	bl	8006984 <HAL_TIM_PWM_ConfigChannel>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8002806:	f000 faa3 	bl	8002d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800280a:	4803      	ldr	r0, [pc, #12]	; (8002818 <MX_TIM2_Init+0xfc>)
 800280c:	f000 fba6 	bl	8002f5c <HAL_TIM_MspPostInit>

}
 8002810:	bf00      	nop
 8002812:	3738      	adds	r7, #56	; 0x38
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	20001250 	.word	0x20001250

0800281c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002820:	4b11      	ldr	r3, [pc, #68]	; (8002868 <MX_UART4_Init+0x4c>)
 8002822:	4a12      	ldr	r2, [pc, #72]	; (800286c <MX_UART4_Init+0x50>)
 8002824:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002826:	4b10      	ldr	r3, [pc, #64]	; (8002868 <MX_UART4_Init+0x4c>)
 8002828:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800282c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800282e:	4b0e      	ldr	r3, [pc, #56]	; (8002868 <MX_UART4_Init+0x4c>)
 8002830:	2200      	movs	r2, #0
 8002832:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002834:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <MX_UART4_Init+0x4c>)
 8002836:	2200      	movs	r2, #0
 8002838:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800283a:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <MX_UART4_Init+0x4c>)
 800283c:	2200      	movs	r2, #0
 800283e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002840:	4b09      	ldr	r3, [pc, #36]	; (8002868 <MX_UART4_Init+0x4c>)
 8002842:	220c      	movs	r2, #12
 8002844:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002846:	4b08      	ldr	r3, [pc, #32]	; (8002868 <MX_UART4_Init+0x4c>)
 8002848:	2200      	movs	r2, #0
 800284a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800284c:	4b06      	ldr	r3, [pc, #24]	; (8002868 <MX_UART4_Init+0x4c>)
 800284e:	2200      	movs	r2, #0
 8002850:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002852:	4805      	ldr	r0, [pc, #20]	; (8002868 <MX_UART4_Init+0x4c>)
 8002854:	f004 fda0 	bl	8007398 <HAL_UART_Init>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800285e:	f000 fa77 	bl	8002d50 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	20001200 	.word	0x20001200
 800286c:	40004c00 	.word	0x40004c00

08002870 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002874:	4b11      	ldr	r3, [pc, #68]	; (80028bc <MX_USART1_UART_Init+0x4c>)
 8002876:	4a12      	ldr	r2, [pc, #72]	; (80028c0 <MX_USART1_UART_Init+0x50>)
 8002878:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800287a:	4b10      	ldr	r3, [pc, #64]	; (80028bc <MX_USART1_UART_Init+0x4c>)
 800287c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002880:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002882:	4b0e      	ldr	r3, [pc, #56]	; (80028bc <MX_USART1_UART_Init+0x4c>)
 8002884:	2200      	movs	r2, #0
 8002886:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002888:	4b0c      	ldr	r3, [pc, #48]	; (80028bc <MX_USART1_UART_Init+0x4c>)
 800288a:	2200      	movs	r2, #0
 800288c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800288e:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <MX_USART1_UART_Init+0x4c>)
 8002890:	2200      	movs	r2, #0
 8002892:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002894:	4b09      	ldr	r3, [pc, #36]	; (80028bc <MX_USART1_UART_Init+0x4c>)
 8002896:	220c      	movs	r2, #12
 8002898:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800289a:	4b08      	ldr	r3, [pc, #32]	; (80028bc <MX_USART1_UART_Init+0x4c>)
 800289c:	2200      	movs	r2, #0
 800289e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028a0:	4b06      	ldr	r3, [pc, #24]	; (80028bc <MX_USART1_UART_Init+0x4c>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028a6:	4805      	ldr	r0, [pc, #20]	; (80028bc <MX_USART1_UART_Init+0x4c>)
 80028a8:	f004 fd76 	bl	8007398 <HAL_UART_Init>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80028b2:	f000 fa4d 	bl	8002d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028b6:	bf00      	nop
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	20001088 	.word	0x20001088
 80028c0:	40011000 	.word	0x40011000

080028c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80028c8:	4b11      	ldr	r3, [pc, #68]	; (8002910 <MX_USART3_UART_Init+0x4c>)
 80028ca:	4a12      	ldr	r2, [pc, #72]	; (8002914 <MX_USART3_UART_Init+0x50>)
 80028cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80028ce:	4b10      	ldr	r3, [pc, #64]	; (8002910 <MX_USART3_UART_Init+0x4c>)
 80028d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80028d6:	4b0e      	ldr	r3, [pc, #56]	; (8002910 <MX_USART3_UART_Init+0x4c>)
 80028d8:	2200      	movs	r2, #0
 80028da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80028dc:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <MX_USART3_UART_Init+0x4c>)
 80028de:	2200      	movs	r2, #0
 80028e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80028e2:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <MX_USART3_UART_Init+0x4c>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80028e8:	4b09      	ldr	r3, [pc, #36]	; (8002910 <MX_USART3_UART_Init+0x4c>)
 80028ea:	220c      	movs	r2, #12
 80028ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ee:	4b08      	ldr	r3, [pc, #32]	; (8002910 <MX_USART3_UART_Init+0x4c>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80028f4:	4b06      	ldr	r3, [pc, #24]	; (8002910 <MX_USART3_UART_Init+0x4c>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80028fa:	4805      	ldr	r0, [pc, #20]	; (8002910 <MX_USART3_UART_Init+0x4c>)
 80028fc:	f004 fd4c 	bl	8007398 <HAL_UART_Init>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002906:	f000 fa23 	bl	8002d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800290a:	bf00      	nop
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	20000f4c 	.word	0x20000f4c
 8002914:	40004800 	.word	0x40004800

08002918 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	607b      	str	r3, [r7, #4]
 8002922:	4b1b      	ldr	r3, [pc, #108]	; (8002990 <MX_DMA_Init+0x78>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	4a1a      	ldr	r2, [pc, #104]	; (8002990 <MX_DMA_Init+0x78>)
 8002928:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800292c:	6313      	str	r3, [r2, #48]	; 0x30
 800292e:	4b18      	ldr	r3, [pc, #96]	; (8002990 <MX_DMA_Init+0x78>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002936:	607b      	str	r3, [r7, #4]
 8002938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800293a:	2300      	movs	r3, #0
 800293c:	603b      	str	r3, [r7, #0]
 800293e:	4b14      	ldr	r3, [pc, #80]	; (8002990 <MX_DMA_Init+0x78>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	4a13      	ldr	r2, [pc, #76]	; (8002990 <MX_DMA_Init+0x78>)
 8002944:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002948:	6313      	str	r3, [r2, #48]	; 0x30
 800294a:	4b11      	ldr	r3, [pc, #68]	; (8002990 <MX_DMA_Init+0x78>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002952:	603b      	str	r3, [r7, #0]
 8002954:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002956:	2200      	movs	r2, #0
 8002958:	2100      	movs	r1, #0
 800295a:	200c      	movs	r0, #12
 800295c:	f001 fc83 	bl	8004266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002960:	200c      	movs	r0, #12
 8002962:	f001 fc9c 	bl	800429e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002966:	2200      	movs	r2, #0
 8002968:	2100      	movs	r1, #0
 800296a:	200d      	movs	r0, #13
 800296c:	f001 fc7b 	bl	8004266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002970:	200d      	movs	r0, #13
 8002972:	f001 fc94 	bl	800429e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002976:	2200      	movs	r2, #0
 8002978:	2100      	movs	r1, #0
 800297a:	203a      	movs	r0, #58	; 0x3a
 800297c:	f001 fc73 	bl	8004266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002980:	203a      	movs	r0, #58	; 0x3a
 8002982:	f001 fc8c 	bl	800429e <HAL_NVIC_EnableIRQ>

}
 8002986:	bf00      	nop
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40023800 	.word	0x40023800

08002994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b08c      	sub	sp, #48	; 0x30
 8002998:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800299a:	f107 031c 	add.w	r3, r7, #28
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	605a      	str	r2, [r3, #4]
 80029a4:	609a      	str	r2, [r3, #8]
 80029a6:	60da      	str	r2, [r3, #12]
 80029a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	61bb      	str	r3, [r7, #24]
 80029ae:	4b40      	ldr	r3, [pc, #256]	; (8002ab0 <MX_GPIO_Init+0x11c>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	4a3f      	ldr	r2, [pc, #252]	; (8002ab0 <MX_GPIO_Init+0x11c>)
 80029b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029b8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ba:	4b3d      	ldr	r3, [pc, #244]	; (8002ab0 <MX_GPIO_Init+0x11c>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c2:	61bb      	str	r3, [r7, #24]
 80029c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	617b      	str	r3, [r7, #20]
 80029ca:	4b39      	ldr	r3, [pc, #228]	; (8002ab0 <MX_GPIO_Init+0x11c>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	4a38      	ldr	r2, [pc, #224]	; (8002ab0 <MX_GPIO_Init+0x11c>)
 80029d0:	f043 0304 	orr.w	r3, r3, #4
 80029d4:	6313      	str	r3, [r2, #48]	; 0x30
 80029d6:	4b36      	ldr	r3, [pc, #216]	; (8002ab0 <MX_GPIO_Init+0x11c>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	f003 0304 	and.w	r3, r3, #4
 80029de:	617b      	str	r3, [r7, #20]
 80029e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	613b      	str	r3, [r7, #16]
 80029e6:	4b32      	ldr	r3, [pc, #200]	; (8002ab0 <MX_GPIO_Init+0x11c>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	4a31      	ldr	r2, [pc, #196]	; (8002ab0 <MX_GPIO_Init+0x11c>)
 80029ec:	f043 0310 	orr.w	r3, r3, #16
 80029f0:	6313      	str	r3, [r2, #48]	; 0x30
 80029f2:	4b2f      	ldr	r3, [pc, #188]	; (8002ab0 <MX_GPIO_Init+0x11c>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	f003 0310 	and.w	r3, r3, #16
 80029fa:	613b      	str	r3, [r7, #16]
 80029fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	4b2b      	ldr	r3, [pc, #172]	; (8002ab0 <MX_GPIO_Init+0x11c>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	4a2a      	ldr	r2, [pc, #168]	; (8002ab0 <MX_GPIO_Init+0x11c>)
 8002a08:	f043 0302 	orr.w	r3, r3, #2
 8002a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a0e:	4b28      	ldr	r3, [pc, #160]	; (8002ab0 <MX_GPIO_Init+0x11c>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60bb      	str	r3, [r7, #8]
 8002a1e:	4b24      	ldr	r3, [pc, #144]	; (8002ab0 <MX_GPIO_Init+0x11c>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	4a23      	ldr	r2, [pc, #140]	; (8002ab0 <MX_GPIO_Init+0x11c>)
 8002a24:	f043 0308 	orr.w	r3, r3, #8
 8002a28:	6313      	str	r3, [r2, #48]	; 0x30
 8002a2a:	4b21      	ldr	r3, [pc, #132]	; (8002ab0 <MX_GPIO_Init+0x11c>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	60bb      	str	r3, [r7, #8]
 8002a34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	607b      	str	r3, [r7, #4]
 8002a3a:	4b1d      	ldr	r3, [pc, #116]	; (8002ab0 <MX_GPIO_Init+0x11c>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	4a1c      	ldr	r2, [pc, #112]	; (8002ab0 <MX_GPIO_Init+0x11c>)
 8002a40:	f043 0301 	orr.w	r3, r3, #1
 8002a44:	6313      	str	r3, [r2, #48]	; 0x30
 8002a46:	4b1a      	ldr	r3, [pc, #104]	; (8002ab0 <MX_GPIO_Init+0x11c>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	607b      	str	r3, [r7, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8002a52:	2200      	movs	r2, #0
 8002a54:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002a58:	4816      	ldr	r0, [pc, #88]	; (8002ab4 <MX_GPIO_Init+0x120>)
 8002a5a:	f002 f965 	bl	8004d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8002a64:	4814      	ldr	r0, [pc, #80]	; (8002ab8 <MX_GPIO_Init+0x124>)
 8002a66:	f002 f95f 	bl	8004d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE9 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a6a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a70:	2301      	movs	r3, #1
 8002a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a74:	2300      	movs	r3, #0
 8002a76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a7c:	f107 031c 	add.w	r3, r7, #28
 8002a80:	4619      	mov	r1, r3
 8002a82:	480c      	ldr	r0, [pc, #48]	; (8002ab4 <MX_GPIO_Init+0x120>)
 8002a84:	f001 ffb6 	bl	80049f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002a88:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002a8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a92:	2300      	movs	r3, #0
 8002a94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a96:	2300      	movs	r3, #0
 8002a98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a9a:	f107 031c 	add.w	r3, r7, #28
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4805      	ldr	r0, [pc, #20]	; (8002ab8 <MX_GPIO_Init+0x124>)
 8002aa2:	f001 ffa7 	bl	80049f4 <HAL_GPIO_Init>

}
 8002aa6:	bf00      	nop
 8002aa8:	3730      	adds	r7, #48	; 0x30
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	40020400 	.word	0x40020400

08002abc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002abc:	b480      	push	{r7}
 8002abe:	b08b      	sub	sp, #44	; 0x2c
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART4){
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a92      	ldr	r2, [pc, #584]	; (8002d14 <HAL_UART_RxCpltCallback+0x258>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d15b      	bne.n	8002b86 <HAL_UART_RxCpltCallback+0xca>
	    uint16_t i, pos, start, length;
	    uint16_t currCNDTR = __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	81bb      	strh	r3, [r7, #12]

	    if(dma_uart4_rx.flag && currCNDTR == DMA_BUF_SIZE)
 8002ad8:	4b8f      	ldr	r3, [pc, #572]	; (8002d18 <HAL_UART_RxCpltCallback+0x25c>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d007      	beq.n	8002af2 <HAL_UART_RxCpltCallback+0x36>
 8002ae2:	89bb      	ldrh	r3, [r7, #12]
 8002ae4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ae8:	d103      	bne.n	8002af2 <HAL_UART_RxCpltCallback+0x36>
	    {
	        dma_uart4_rx.flag = 0;
 8002aea:	4b8b      	ldr	r3, [pc, #556]	; (8002d18 <HAL_UART_RxCpltCallback+0x25c>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	701a      	strb	r2, [r3, #0]
	        return;
 8002af0:	e10a      	b.n	8002d08 <HAL_UART_RxCpltCallback+0x24c>
	    }
	    start = (dma_uart4_rx.prevCNDTR < DMA_BUF_SIZE) ? (DMA_BUF_SIZE - dma_uart4_rx.prevCNDTR) : 0;
 8002af2:	4b89      	ldr	r3, [pc, #548]	; (8002d18 <HAL_UART_RxCpltCallback+0x25c>)
 8002af4:	889b      	ldrh	r3, [r3, #4]
 8002af6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002afa:	d205      	bcs.n	8002b08 <HAL_UART_RxCpltCallback+0x4c>
 8002afc:	4b86      	ldr	r3, [pc, #536]	; (8002d18 <HAL_UART_RxCpltCallback+0x25c>)
 8002afe:	889b      	ldrh	r3, [r3, #4]
 8002b00:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	e000      	b.n	8002b0a <HAL_UART_RxCpltCallback+0x4e>
 8002b08:	2300      	movs	r3, #0
 8002b0a:	817b      	strh	r3, [r7, #10]
	    if(dma_uart4_rx.flag)    /* Timeout event */
 8002b0c:	4b82      	ldr	r3, [pc, #520]	; (8002d18 <HAL_UART_RxCpltCallback+0x25c>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d016      	beq.n	8002b44 <HAL_UART_RxCpltCallback+0x88>
	    {
	        length = (dma_uart4_rx.prevCNDTR < DMA_BUF_SIZE) ? (dma_uart4_rx.prevCNDTR - currCNDTR) : (DMA_BUF_SIZE - currCNDTR);
 8002b16:	4b80      	ldr	r3, [pc, #512]	; (8002d18 <HAL_UART_RxCpltCallback+0x25c>)
 8002b18:	889b      	ldrh	r3, [r3, #4]
 8002b1a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b1e:	d205      	bcs.n	8002b2c <HAL_UART_RxCpltCallback+0x70>
 8002b20:	4b7d      	ldr	r3, [pc, #500]	; (8002d18 <HAL_UART_RxCpltCallback+0x25c>)
 8002b22:	889a      	ldrh	r2, [r3, #4]
 8002b24:	89bb      	ldrh	r3, [r7, #12]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	e003      	b.n	8002b34 <HAL_UART_RxCpltCallback+0x78>
 8002b2c:	89bb      	ldrh	r3, [r7, #12]
 8002b2e:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	847b      	strh	r3, [r7, #34]	; 0x22
	        dma_uart4_rx.prevCNDTR = currCNDTR;
 8002b36:	4a78      	ldr	r2, [pc, #480]	; (8002d18 <HAL_UART_RxCpltCallback+0x25c>)
 8002b38:	89bb      	ldrh	r3, [r7, #12]
 8002b3a:	8093      	strh	r3, [r2, #4]
	        dma_uart4_rx.flag = 0;
 8002b3c:	4b76      	ldr	r3, [pc, #472]	; (8002d18 <HAL_UART_RxCpltCallback+0x25c>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	701a      	strb	r2, [r3, #0]
 8002b42:	e007      	b.n	8002b54 <HAL_UART_RxCpltCallback+0x98>
	    }
	    else                /* DMA Rx Complete event */
	    {
	        length = DMA_BUF_SIZE - start;
 8002b44:	897b      	ldrh	r3, [r7, #10]
 8002b46:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 8002b4a:	847b      	strh	r3, [r7, #34]	; 0x22
	        dma_uart4_rx.prevCNDTR = DMA_BUF_SIZE;
 8002b4c:	4b72      	ldr	r3, [pc, #456]	; (8002d18 <HAL_UART_RxCpltCallback+0x25c>)
 8002b4e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002b52:	809a      	strh	r2, [r3, #4]
	    }
	    for(i=0,pos=start; i<length; ++i,++pos)
 8002b54:	2300      	movs	r3, #0
 8002b56:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002b58:	897b      	ldrh	r3, [r7, #10]
 8002b5a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002b5c:	e00b      	b.n	8002b76 <HAL_UART_RxCpltCallback+0xba>
	    {
	        data_gps[i] = dma_rx4_buf[pos];
 8002b5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002b62:	496e      	ldr	r1, [pc, #440]	; (8002d1c <HAL_UART_RxCpltCallback+0x260>)
 8002b64:	5c89      	ldrb	r1, [r1, r2]
 8002b66:	4a6e      	ldr	r2, [pc, #440]	; (8002d20 <HAL_UART_RxCpltCallback+0x264>)
 8002b68:	54d1      	strb	r1, [r2, r3]
	    for(i=0,pos=start; i<length; ++i,++pos)
 8002b6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002b70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b72:	3301      	adds	r3, #1
 8002b74:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002b76:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002b78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d3ef      	bcc.n	8002b5e <HAL_UART_RxCpltCallback+0xa2>
	    }
	    UART4DataFlag = true;
 8002b7e:	4b69      	ldr	r3, [pc, #420]	; (8002d24 <HAL_UART_RxCpltCallback+0x268>)
 8002b80:	2201      	movs	r2, #1
 8002b82:	701a      	strb	r2, [r3, #0]
 8002b84:	e0c0      	b.n	8002d08 <HAL_UART_RxCpltCallback+0x24c>
	}
	else if(huart->Instance == USART1){
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a67      	ldr	r2, [pc, #412]	; (8002d28 <HAL_UART_RxCpltCallback+0x26c>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d15b      	bne.n	8002c48 <HAL_UART_RxCpltCallback+0x18c>
		uint16_t a, pos, mulai, kanan;
		uint16_t currCNDTR = __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	823b      	strh	r3, [r7, #16]
		if (dma_uart1_rx.flag && currCNDTR == DMA_BUF_SIZE){
 8002b9a:	4b64      	ldr	r3, [pc, #400]	; (8002d2c <HAL_UART_RxCpltCallback+0x270>)
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d007      	beq.n	8002bb4 <HAL_UART_RxCpltCallback+0xf8>
 8002ba4:	8a3b      	ldrh	r3, [r7, #16]
 8002ba6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002baa:	d103      	bne.n	8002bb4 <HAL_UART_RxCpltCallback+0xf8>
			dma_uart1_rx.flag = 0;
 8002bac:	4b5f      	ldr	r3, [pc, #380]	; (8002d2c <HAL_UART_RxCpltCallback+0x270>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	701a      	strb	r2, [r3, #0]
			return;
 8002bb2:	e0a9      	b.n	8002d08 <HAL_UART_RxCpltCallback+0x24c>
		}
		mulai = (dma_uart1_rx.prevCNDTR < DMA_BUF_SIZE) ? (DMA_BUF_SIZE - dma_uart1_rx.prevCNDTR) : 0;
 8002bb4:	4b5d      	ldr	r3, [pc, #372]	; (8002d2c <HAL_UART_RxCpltCallback+0x270>)
 8002bb6:	889b      	ldrh	r3, [r3, #4]
 8002bb8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002bbc:	d205      	bcs.n	8002bca <HAL_UART_RxCpltCallback+0x10e>
 8002bbe:	4b5b      	ldr	r3, [pc, #364]	; (8002d2c <HAL_UART_RxCpltCallback+0x270>)
 8002bc0:	889b      	ldrh	r3, [r3, #4]
 8002bc2:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	e000      	b.n	8002bcc <HAL_UART_RxCpltCallback+0x110>
 8002bca:	2300      	movs	r3, #0
 8002bcc:	81fb      	strh	r3, [r7, #14]

		if (dma_uart1_rx.flag) { // time out
 8002bce:	4b57      	ldr	r3, [pc, #348]	; (8002d2c <HAL_UART_RxCpltCallback+0x270>)
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d016      	beq.n	8002c06 <HAL_UART_RxCpltCallback+0x14a>
			kanan = (dma_uart1_rx.prevCNDTR < DMA_BUF_SIZE) ? (dma_uart1_rx.prevCNDTR - currCNDTR) : (DMA_BUF_SIZE - currCNDTR);
 8002bd8:	4b54      	ldr	r3, [pc, #336]	; (8002d2c <HAL_UART_RxCpltCallback+0x270>)
 8002bda:	889b      	ldrh	r3, [r3, #4]
 8002bdc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002be0:	d205      	bcs.n	8002bee <HAL_UART_RxCpltCallback+0x132>
 8002be2:	4b52      	ldr	r3, [pc, #328]	; (8002d2c <HAL_UART_RxCpltCallback+0x270>)
 8002be4:	889a      	ldrh	r2, [r3, #4]
 8002be6:	8a3b      	ldrh	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	e003      	b.n	8002bf6 <HAL_UART_RxCpltCallback+0x13a>
 8002bee:	8a3b      	ldrh	r3, [r7, #16]
 8002bf0:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	83bb      	strh	r3, [r7, #28]
			dma_uart1_rx.prevCNDTR = currCNDTR;
 8002bf8:	4a4c      	ldr	r2, [pc, #304]	; (8002d2c <HAL_UART_RxCpltCallback+0x270>)
 8002bfa:	8a3b      	ldrh	r3, [r7, #16]
 8002bfc:	8093      	strh	r3, [r2, #4]
			dma_uart1_rx.flag = 0;
 8002bfe:	4b4b      	ldr	r3, [pc, #300]	; (8002d2c <HAL_UART_RxCpltCallback+0x270>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	701a      	strb	r2, [r3, #0]
 8002c04:	e007      	b.n	8002c16 <HAL_UART_RxCpltCallback+0x15a>
		} else {				//complete event
			kanan = DMA_BUF_SIZE - mulai;
 8002c06:	89fb      	ldrh	r3, [r7, #14]
 8002c08:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 8002c0c:	83bb      	strh	r3, [r7, #28]
			dma_uart1_rx.prevCNDTR = DMA_BUF_SIZE;
 8002c0e:	4b47      	ldr	r3, [pc, #284]	; (8002d2c <HAL_UART_RxCpltCallback+0x270>)
 8002c10:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002c14:	809a      	strh	r2, [r3, #4]
		}
		for (a = 0,pos = mulai; a < kanan; ++a,++pos){
 8002c16:	2300      	movs	r3, #0
 8002c18:	843b      	strh	r3, [r7, #32]
 8002c1a:	89fb      	ldrh	r3, [r7, #14]
 8002c1c:	83fb      	strh	r3, [r7, #30]
 8002c1e:	e00b      	b.n	8002c38 <HAL_UART_RxCpltCallback+0x17c>
			data_input[a] = dma_rx1_buf[pos];
 8002c20:	8bfa      	ldrh	r2, [r7, #30]
 8002c22:	8c3b      	ldrh	r3, [r7, #32]
 8002c24:	4942      	ldr	r1, [pc, #264]	; (8002d30 <HAL_UART_RxCpltCallback+0x274>)
 8002c26:	5c89      	ldrb	r1, [r1, r2]
 8002c28:	4a42      	ldr	r2, [pc, #264]	; (8002d34 <HAL_UART_RxCpltCallback+0x278>)
 8002c2a:	54d1      	strb	r1, [r2, r3]
		for (a = 0,pos = mulai; a < kanan; ++a,++pos){
 8002c2c:	8c3b      	ldrh	r3, [r7, #32]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	843b      	strh	r3, [r7, #32]
 8002c32:	8bfb      	ldrh	r3, [r7, #30]
 8002c34:	3301      	adds	r3, #1
 8002c36:	83fb      	strh	r3, [r7, #30]
 8002c38:	8c3a      	ldrh	r2, [r7, #32]
 8002c3a:	8bbb      	ldrh	r3, [r7, #28]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d3ef      	bcc.n	8002c20 <HAL_UART_RxCpltCallback+0x164>
		}
		USART1DataFlag = true;
 8002c40:	4b3d      	ldr	r3, [pc, #244]	; (8002d38 <HAL_UART_RxCpltCallback+0x27c>)
 8002c42:	2201      	movs	r2, #1
 8002c44:	701a      	strb	r2, [r3, #0]
 8002c46:	e05f      	b.n	8002d08 <HAL_UART_RxCpltCallback+0x24c>
	}
	else if (huart->Instance == USART3){
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a3b      	ldr	r2, [pc, #236]	; (8002d3c <HAL_UART_RxCpltCallback+0x280>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d15a      	bne.n	8002d08 <HAL_UART_RxCpltCallback+0x24c>
		uint16_t c, pos, mulai, kiri;
		uint16_t currCNDTR = __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	82bb      	strh	r3, [r7, #20]
		if(dma_uart3_rx.flag && currCNDTR == DMA_BUF_SIZE){
 8002c5c:	4b38      	ldr	r3, [pc, #224]	; (8002d40 <HAL_UART_RxCpltCallback+0x284>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d007      	beq.n	8002c76 <HAL_UART_RxCpltCallback+0x1ba>
 8002c66:	8abb      	ldrh	r3, [r7, #20]
 8002c68:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c6c:	d103      	bne.n	8002c76 <HAL_UART_RxCpltCallback+0x1ba>
			dma_uart3_rx.flag = 0;
 8002c6e:	4b34      	ldr	r3, [pc, #208]	; (8002d40 <HAL_UART_RxCpltCallback+0x284>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]
			return;
 8002c74:	e048      	b.n	8002d08 <HAL_UART_RxCpltCallback+0x24c>
		}
		mulai = (dma_uart3_rx.prevCNDTR < DMA_BUF_SIZE) ? (DMA_BUF_SIZE - dma_uart3_rx.prevCNDTR) : 0;
 8002c76:	4b32      	ldr	r3, [pc, #200]	; (8002d40 <HAL_UART_RxCpltCallback+0x284>)
 8002c78:	889b      	ldrh	r3, [r3, #4]
 8002c7a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c7e:	d205      	bcs.n	8002c8c <HAL_UART_RxCpltCallback+0x1d0>
 8002c80:	4b2f      	ldr	r3, [pc, #188]	; (8002d40 <HAL_UART_RxCpltCallback+0x284>)
 8002c82:	889b      	ldrh	r3, [r3, #4]
 8002c84:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	e000      	b.n	8002c8e <HAL_UART_RxCpltCallback+0x1d2>
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	827b      	strh	r3, [r7, #18]

		if (dma_uart3_rx.flag){
 8002c90:	4b2b      	ldr	r3, [pc, #172]	; (8002d40 <HAL_UART_RxCpltCallback+0x284>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d016      	beq.n	8002cc8 <HAL_UART_RxCpltCallback+0x20c>
			kiri = (dma_uart3_rx.prevCNDTR < DMA_BUF_SIZE) ? (dma_uart3_rx.prevCNDTR - currCNDTR) : (DMA_BUF_SIZE - currCNDTR);
 8002c9a:	4b29      	ldr	r3, [pc, #164]	; (8002d40 <HAL_UART_RxCpltCallback+0x284>)
 8002c9c:	889b      	ldrh	r3, [r3, #4]
 8002c9e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ca2:	d205      	bcs.n	8002cb0 <HAL_UART_RxCpltCallback+0x1f4>
 8002ca4:	4b26      	ldr	r3, [pc, #152]	; (8002d40 <HAL_UART_RxCpltCallback+0x284>)
 8002ca6:	889a      	ldrh	r2, [r3, #4]
 8002ca8:	8abb      	ldrh	r3, [r7, #20]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	e003      	b.n	8002cb8 <HAL_UART_RxCpltCallback+0x1fc>
 8002cb0:	8abb      	ldrh	r3, [r7, #20]
 8002cb2:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	82fb      	strh	r3, [r7, #22]
			dma_uart3_rx.prevCNDTR = currCNDTR;
 8002cba:	4a21      	ldr	r2, [pc, #132]	; (8002d40 <HAL_UART_RxCpltCallback+0x284>)
 8002cbc:	8abb      	ldrh	r3, [r7, #20]
 8002cbe:	8093      	strh	r3, [r2, #4]
			dma_uart3_rx.flag = 0;
 8002cc0:	4b1f      	ldr	r3, [pc, #124]	; (8002d40 <HAL_UART_RxCpltCallback+0x284>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	701a      	strb	r2, [r3, #0]
 8002cc6:	e007      	b.n	8002cd8 <HAL_UART_RxCpltCallback+0x21c>
		} else {
			kiri = DMA_BUF_SIZE - mulai;
 8002cc8:	8a7b      	ldrh	r3, [r7, #18]
 8002cca:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 8002cce:	82fb      	strh	r3, [r7, #22]
			dma_uart3_rx.prevCNDTR = DMA_BUF_SIZE;
 8002cd0:	4b1b      	ldr	r3, [pc, #108]	; (8002d40 <HAL_UART_RxCpltCallback+0x284>)
 8002cd2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002cd6:	809a      	strh	r2, [r3, #4]
		}
		for(c = 0,pos = mulai; c < kiri; ++c, ++pos){
 8002cd8:	2300      	movs	r3, #0
 8002cda:	837b      	strh	r3, [r7, #26]
 8002cdc:	8a7b      	ldrh	r3, [r7, #18]
 8002cde:	833b      	strh	r3, [r7, #24]
 8002ce0:	e00b      	b.n	8002cfa <HAL_UART_RxCpltCallback+0x23e>
			data_wahana[c] = dma_rx3_buf[pos];
 8002ce2:	8b3a      	ldrh	r2, [r7, #24]
 8002ce4:	8b7b      	ldrh	r3, [r7, #26]
 8002ce6:	4917      	ldr	r1, [pc, #92]	; (8002d44 <HAL_UART_RxCpltCallback+0x288>)
 8002ce8:	5c89      	ldrb	r1, [r1, r2]
 8002cea:	4a17      	ldr	r2, [pc, #92]	; (8002d48 <HAL_UART_RxCpltCallback+0x28c>)
 8002cec:	54d1      	strb	r1, [r2, r3]
		for(c = 0,pos = mulai; c < kiri; ++c, ++pos){
 8002cee:	8b7b      	ldrh	r3, [r7, #26]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	837b      	strh	r3, [r7, #26]
 8002cf4:	8b3b      	ldrh	r3, [r7, #24]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	833b      	strh	r3, [r7, #24]
 8002cfa:	8b7a      	ldrh	r2, [r7, #26]
 8002cfc:	8afb      	ldrh	r3, [r7, #22]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d3ef      	bcc.n	8002ce2 <HAL_UART_RxCpltCallback+0x226>
		}
		USART3DataFlag = true;
 8002d02:	4b12      	ldr	r3, [pc, #72]	; (8002d4c <HAL_UART_RxCpltCallback+0x290>)
 8002d04:	2201      	movs	r2, #1
 8002d06:	701a      	strb	r2, [r3, #0]
	}
}
 8002d08:	372c      	adds	r7, #44	; 0x2c
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	40004c00 	.word	0x40004c00
 8002d18:	20000000 	.word	0x20000000
 8002d1c:	20000848 	.word	0x20000848
 8002d20:	20000234 	.word	0x20000234
 8002d24:	20000428 	.word	0x20000428
 8002d28:	40011000 	.word	0x40011000
 8002d2c:	20000008 	.word	0x20000008
 8002d30:	20000aa0 	.word	0x20000aa0
 8002d34:	2000042c 	.word	0x2000042c
 8002d38:	20000620 	.word	0x20000620
 8002d3c:	40004800 	.word	0x40004800
 8002d40:	20000014 	.word	0x20000014
 8002d44:	20000cf8 	.word	0x20000cf8
 8002d48:	20000628 	.word	0x20000628
 8002d4c:	2000081c 	.word	0x2000081c

08002d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002d54:	bf00      	nop
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
	...

08002d60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d66:	2300      	movs	r3, #0
 8002d68:	607b      	str	r3, [r7, #4]
 8002d6a:	4b10      	ldr	r3, [pc, #64]	; (8002dac <HAL_MspInit+0x4c>)
 8002d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6e:	4a0f      	ldr	r2, [pc, #60]	; (8002dac <HAL_MspInit+0x4c>)
 8002d70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d74:	6453      	str	r3, [r2, #68]	; 0x44
 8002d76:	4b0d      	ldr	r3, [pc, #52]	; (8002dac <HAL_MspInit+0x4c>)
 8002d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d7e:	607b      	str	r3, [r7, #4]
 8002d80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	603b      	str	r3, [r7, #0]
 8002d86:	4b09      	ldr	r3, [pc, #36]	; (8002dac <HAL_MspInit+0x4c>)
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	4a08      	ldr	r2, [pc, #32]	; (8002dac <HAL_MspInit+0x4c>)
 8002d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d90:	6413      	str	r3, [r2, #64]	; 0x40
 8002d92:	4b06      	ldr	r3, [pc, #24]	; (8002dac <HAL_MspInit+0x4c>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9a:	603b      	str	r3, [r7, #0]
 8002d9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	40023800 	.word	0x40023800

08002db0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b08a      	sub	sp, #40	; 0x28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db8:	f107 0314 	add.w	r3, r7, #20
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	605a      	str	r2, [r3, #4]
 8002dc2:	609a      	str	r2, [r3, #8]
 8002dc4:	60da      	str	r2, [r3, #12]
 8002dc6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a1b      	ldr	r2, [pc, #108]	; (8002e3c <HAL_ADC_MspInit+0x8c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d12f      	bne.n	8002e32 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	613b      	str	r3, [r7, #16]
 8002dd6:	4b1a      	ldr	r3, [pc, #104]	; (8002e40 <HAL_ADC_MspInit+0x90>)
 8002dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dda:	4a19      	ldr	r2, [pc, #100]	; (8002e40 <HAL_ADC_MspInit+0x90>)
 8002ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002de0:	6453      	str	r3, [r2, #68]	; 0x44
 8002de2:	4b17      	ldr	r3, [pc, #92]	; (8002e40 <HAL_ADC_MspInit+0x90>)
 8002de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dea:	613b      	str	r3, [r7, #16]
 8002dec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dee:	2300      	movs	r3, #0
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	4b13      	ldr	r3, [pc, #76]	; (8002e40 <HAL_ADC_MspInit+0x90>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	4a12      	ldr	r2, [pc, #72]	; (8002e40 <HAL_ADC_MspInit+0x90>)
 8002df8:	f043 0304 	orr.w	r3, r3, #4
 8002dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dfe:	4b10      	ldr	r3, [pc, #64]	; (8002e40 <HAL_ADC_MspInit+0x90>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	f003 0304 	and.w	r3, r3, #4
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002e0a:	2310      	movs	r3, #16
 8002e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e12:	2300      	movs	r3, #0
 8002e14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e16:	f107 0314 	add.w	r3, r7, #20
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4809      	ldr	r0, [pc, #36]	; (8002e44 <HAL_ADC_MspInit+0x94>)
 8002e1e:	f001 fde9 	bl	80049f4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002e22:	2200      	movs	r2, #0
 8002e24:	2100      	movs	r1, #0
 8002e26:	2012      	movs	r0, #18
 8002e28:	f001 fa1d 	bl	8004266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002e2c:	2012      	movs	r0, #18
 8002e2e:	f001 fa36 	bl	800429e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002e32:	bf00      	nop
 8002e34:	3728      	adds	r7, #40	; 0x28
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40012000 	.word	0x40012000
 8002e40:	40023800 	.word	0x40023800
 8002e44:	40020800 	.word	0x40020800

08002e48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b08a      	sub	sp, #40	; 0x28
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e50:	f107 0314 	add.w	r3, r7, #20
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	605a      	str	r2, [r3, #4]
 8002e5a:	609a      	str	r2, [r3, #8]
 8002e5c:	60da      	str	r2, [r3, #12]
 8002e5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a29      	ldr	r2, [pc, #164]	; (8002f0c <HAL_I2C_MspInit+0xc4>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d14b      	bne.n	8002f02 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	613b      	str	r3, [r7, #16]
 8002e6e:	4b28      	ldr	r3, [pc, #160]	; (8002f10 <HAL_I2C_MspInit+0xc8>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	4a27      	ldr	r2, [pc, #156]	; (8002f10 <HAL_I2C_MspInit+0xc8>)
 8002e74:	f043 0304 	orr.w	r3, r3, #4
 8002e78:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7a:	4b25      	ldr	r3, [pc, #148]	; (8002f10 <HAL_I2C_MspInit+0xc8>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	f003 0304 	and.w	r3, r3, #4
 8002e82:	613b      	str	r3, [r7, #16]
 8002e84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e86:	2300      	movs	r3, #0
 8002e88:	60fb      	str	r3, [r7, #12]
 8002e8a:	4b21      	ldr	r3, [pc, #132]	; (8002f10 <HAL_I2C_MspInit+0xc8>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	4a20      	ldr	r2, [pc, #128]	; (8002f10 <HAL_I2C_MspInit+0xc8>)
 8002e90:	f043 0301 	orr.w	r3, r3, #1
 8002e94:	6313      	str	r3, [r2, #48]	; 0x30
 8002e96:	4b1e      	ldr	r3, [pc, #120]	; (8002f10 <HAL_I2C_MspInit+0xc8>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	60fb      	str	r3, [r7, #12]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ea2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ea8:	2312      	movs	r3, #18
 8002eaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002eac:	2301      	movs	r3, #1
 8002eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002eb4:	2304      	movs	r3, #4
 8002eb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eb8:	f107 0314 	add.w	r3, r7, #20
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4815      	ldr	r0, [pc, #84]	; (8002f14 <HAL_I2C_MspInit+0xcc>)
 8002ec0:	f001 fd98 	bl	80049f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ec4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002eca:	2312      	movs	r3, #18
 8002ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002ed6:	2304      	movs	r3, #4
 8002ed8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eda:	f107 0314 	add.w	r3, r7, #20
 8002ede:	4619      	mov	r1, r3
 8002ee0:	480d      	ldr	r0, [pc, #52]	; (8002f18 <HAL_I2C_MspInit+0xd0>)
 8002ee2:	f001 fd87 	bl	80049f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60bb      	str	r3, [r7, #8]
 8002eea:	4b09      	ldr	r3, [pc, #36]	; (8002f10 <HAL_I2C_MspInit+0xc8>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	4a08      	ldr	r2, [pc, #32]	; (8002f10 <HAL_I2C_MspInit+0xc8>)
 8002ef0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ef6:	4b06      	ldr	r3, [pc, #24]	; (8002f10 <HAL_I2C_MspInit+0xc8>)
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002efe:	60bb      	str	r3, [r7, #8]
 8002f00:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002f02:	bf00      	nop
 8002f04:	3728      	adds	r7, #40	; 0x28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40005c00 	.word	0x40005c00
 8002f10:	40023800 	.word	0x40023800
 8002f14:	40020800 	.word	0x40020800
 8002f18:	40020000 	.word	0x40020000

08002f1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f2c:	d10d      	bne.n	8002f4a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60fb      	str	r3, [r7, #12]
 8002f32:	4b09      	ldr	r3, [pc, #36]	; (8002f58 <HAL_TIM_Base_MspInit+0x3c>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	4a08      	ldr	r2, [pc, #32]	; (8002f58 <HAL_TIM_Base_MspInit+0x3c>)
 8002f38:	f043 0301 	orr.w	r3, r3, #1
 8002f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f3e:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <HAL_TIM_Base_MspInit+0x3c>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002f4a:	bf00      	nop
 8002f4c:	3714      	adds	r7, #20
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	40023800 	.word	0x40023800

08002f5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b08a      	sub	sp, #40	; 0x28
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f64:	f107 0314 	add.w	r3, r7, #20
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	605a      	str	r2, [r3, #4]
 8002f6e:	609a      	str	r2, [r3, #8]
 8002f70:	60da      	str	r2, [r3, #12]
 8002f72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f7c:	d13c      	bne.n	8002ff8 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f7e:	2300      	movs	r3, #0
 8002f80:	613b      	str	r3, [r7, #16]
 8002f82:	4b1f      	ldr	r3, [pc, #124]	; (8003000 <HAL_TIM_MspPostInit+0xa4>)
 8002f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f86:	4a1e      	ldr	r2, [pc, #120]	; (8003000 <HAL_TIM_MspPostInit+0xa4>)
 8002f88:	f043 0301 	orr.w	r3, r3, #1
 8002f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f8e:	4b1c      	ldr	r3, [pc, #112]	; (8003000 <HAL_TIM_MspPostInit+0xa4>)
 8002f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	613b      	str	r3, [r7, #16]
 8002f98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	4b18      	ldr	r3, [pc, #96]	; (8003000 <HAL_TIM_MspPostInit+0xa4>)
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa2:	4a17      	ldr	r2, [pc, #92]	; (8003000 <HAL_TIM_MspPostInit+0xa4>)
 8002fa4:	f043 0302 	orr.w	r3, r3, #2
 8002fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8002faa:	4b15      	ldr	r3, [pc, #84]	; (8003000 <HAL_TIM_MspPostInit+0xa4>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002fb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fcc:	f107 0314 	add.w	r3, r7, #20
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	480c      	ldr	r0, [pc, #48]	; (8003004 <HAL_TIM_MspPostInit+0xa8>)
 8002fd4:	f001 fd0e 	bl	80049f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002fd8:	2308      	movs	r3, #8
 8002fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fdc:	2302      	movs	r3, #2
 8002fde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fec:	f107 0314 	add.w	r3, r7, #20
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	4805      	ldr	r0, [pc, #20]	; (8003008 <HAL_TIM_MspPostInit+0xac>)
 8002ff4:	f001 fcfe 	bl	80049f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002ff8:	bf00      	nop
 8002ffa:	3728      	adds	r7, #40	; 0x28
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40023800 	.word	0x40023800
 8003004:	40020000 	.word	0x40020000
 8003008:	40020400 	.word	0x40020400

0800300c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b08e      	sub	sp, #56	; 0x38
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003014:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	605a      	str	r2, [r3, #4]
 800301e:	609a      	str	r2, [r3, #8]
 8003020:	60da      	str	r2, [r3, #12]
 8003022:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a9f      	ldr	r2, [pc, #636]	; (80032a8 <HAL_UART_MspInit+0x29c>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d164      	bne.n	80030f8 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800302e:	2300      	movs	r3, #0
 8003030:	623b      	str	r3, [r7, #32]
 8003032:	4b9e      	ldr	r3, [pc, #632]	; (80032ac <HAL_UART_MspInit+0x2a0>)
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	4a9d      	ldr	r2, [pc, #628]	; (80032ac <HAL_UART_MspInit+0x2a0>)
 8003038:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800303c:	6413      	str	r3, [r2, #64]	; 0x40
 800303e:	4b9b      	ldr	r3, [pc, #620]	; (80032ac <HAL_UART_MspInit+0x2a0>)
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003046:	623b      	str	r3, [r7, #32]
 8003048:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800304a:	2300      	movs	r3, #0
 800304c:	61fb      	str	r3, [r7, #28]
 800304e:	4b97      	ldr	r3, [pc, #604]	; (80032ac <HAL_UART_MspInit+0x2a0>)
 8003050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003052:	4a96      	ldr	r2, [pc, #600]	; (80032ac <HAL_UART_MspInit+0x2a0>)
 8003054:	f043 0304 	orr.w	r3, r3, #4
 8003058:	6313      	str	r3, [r2, #48]	; 0x30
 800305a:	4b94      	ldr	r3, [pc, #592]	; (80032ac <HAL_UART_MspInit+0x2a0>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305e:	f003 0304 	and.w	r3, r3, #4
 8003062:	61fb      	str	r3, [r7, #28]
 8003064:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003066:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800306a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800306c:	2302      	movs	r3, #2
 800306e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003070:	2301      	movs	r3, #1
 8003072:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003074:	2303      	movs	r3, #3
 8003076:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003078:	2308      	movs	r3, #8
 800307a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800307c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003080:	4619      	mov	r1, r3
 8003082:	488b      	ldr	r0, [pc, #556]	; (80032b0 <HAL_UART_MspInit+0x2a4>)
 8003084:	f001 fcb6 	bl	80049f4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8003088:	4b8a      	ldr	r3, [pc, #552]	; (80032b4 <HAL_UART_MspInit+0x2a8>)
 800308a:	4a8b      	ldr	r2, [pc, #556]	; (80032b8 <HAL_UART_MspInit+0x2ac>)
 800308c:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800308e:	4b89      	ldr	r3, [pc, #548]	; (80032b4 <HAL_UART_MspInit+0x2a8>)
 8003090:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003094:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003096:	4b87      	ldr	r3, [pc, #540]	; (80032b4 <HAL_UART_MspInit+0x2a8>)
 8003098:	2200      	movs	r2, #0
 800309a:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800309c:	4b85      	ldr	r3, [pc, #532]	; (80032b4 <HAL_UART_MspInit+0x2a8>)
 800309e:	2200      	movs	r2, #0
 80030a0:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030a2:	4b84      	ldr	r3, [pc, #528]	; (80032b4 <HAL_UART_MspInit+0x2a8>)
 80030a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030a8:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030aa:	4b82      	ldr	r3, [pc, #520]	; (80032b4 <HAL_UART_MspInit+0x2a8>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030b0:	4b80      	ldr	r3, [pc, #512]	; (80032b4 <HAL_UART_MspInit+0x2a8>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80030b6:	4b7f      	ldr	r3, [pc, #508]	; (80032b4 <HAL_UART_MspInit+0x2a8>)
 80030b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030bc:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80030be:	4b7d      	ldr	r3, [pc, #500]	; (80032b4 <HAL_UART_MspInit+0x2a8>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030c4:	4b7b      	ldr	r3, [pc, #492]	; (80032b4 <HAL_UART_MspInit+0x2a8>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80030ca:	487a      	ldr	r0, [pc, #488]	; (80032b4 <HAL_UART_MspInit+0x2a8>)
 80030cc:	f001 f902 	bl	80042d4 <HAL_DMA_Init>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80030d6:	f7ff fe3b 	bl	8002d50 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a75      	ldr	r2, [pc, #468]	; (80032b4 <HAL_UART_MspInit+0x2a8>)
 80030de:	635a      	str	r2, [r3, #52]	; 0x34
 80030e0:	4a74      	ldr	r2, [pc, #464]	; (80032b4 <HAL_UART_MspInit+0x2a8>)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80030e6:	2200      	movs	r2, #0
 80030e8:	2100      	movs	r1, #0
 80030ea:	2034      	movs	r0, #52	; 0x34
 80030ec:	f001 f8bb 	bl	8004266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80030f0:	2034      	movs	r0, #52	; 0x34
 80030f2:	f001 f8d4 	bl	800429e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80030f6:	e0d2      	b.n	800329e <HAL_UART_MspInit+0x292>
  else if(huart->Instance==USART1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a6f      	ldr	r2, [pc, #444]	; (80032bc <HAL_UART_MspInit+0x2b0>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d164      	bne.n	80031cc <HAL_UART_MspInit+0x1c0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	61bb      	str	r3, [r7, #24]
 8003106:	4b69      	ldr	r3, [pc, #420]	; (80032ac <HAL_UART_MspInit+0x2a0>)
 8003108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310a:	4a68      	ldr	r2, [pc, #416]	; (80032ac <HAL_UART_MspInit+0x2a0>)
 800310c:	f043 0310 	orr.w	r3, r3, #16
 8003110:	6453      	str	r3, [r2, #68]	; 0x44
 8003112:	4b66      	ldr	r3, [pc, #408]	; (80032ac <HAL_UART_MspInit+0x2a0>)
 8003114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003116:	f003 0310 	and.w	r3, r3, #16
 800311a:	61bb      	str	r3, [r7, #24]
 800311c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800311e:	2300      	movs	r3, #0
 8003120:	617b      	str	r3, [r7, #20]
 8003122:	4b62      	ldr	r3, [pc, #392]	; (80032ac <HAL_UART_MspInit+0x2a0>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	4a61      	ldr	r2, [pc, #388]	; (80032ac <HAL_UART_MspInit+0x2a0>)
 8003128:	f043 0301 	orr.w	r3, r3, #1
 800312c:	6313      	str	r3, [r2, #48]	; 0x30
 800312e:	4b5f      	ldr	r3, [pc, #380]	; (80032ac <HAL_UART_MspInit+0x2a0>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	617b      	str	r3, [r7, #20]
 8003138:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800313a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800313e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003140:	2302      	movs	r3, #2
 8003142:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003144:	2300      	movs	r3, #0
 8003146:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003148:	2303      	movs	r3, #3
 800314a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800314c:	2307      	movs	r3, #7
 800314e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003150:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003154:	4619      	mov	r1, r3
 8003156:	485a      	ldr	r0, [pc, #360]	; (80032c0 <HAL_UART_MspInit+0x2b4>)
 8003158:	f001 fc4c 	bl	80049f4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800315c:	4b59      	ldr	r3, [pc, #356]	; (80032c4 <HAL_UART_MspInit+0x2b8>)
 800315e:	4a5a      	ldr	r2, [pc, #360]	; (80032c8 <HAL_UART_MspInit+0x2bc>)
 8003160:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003162:	4b58      	ldr	r3, [pc, #352]	; (80032c4 <HAL_UART_MspInit+0x2b8>)
 8003164:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003168:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800316a:	4b56      	ldr	r3, [pc, #344]	; (80032c4 <HAL_UART_MspInit+0x2b8>)
 800316c:	2200      	movs	r2, #0
 800316e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003170:	4b54      	ldr	r3, [pc, #336]	; (80032c4 <HAL_UART_MspInit+0x2b8>)
 8003172:	2200      	movs	r2, #0
 8003174:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003176:	4b53      	ldr	r3, [pc, #332]	; (80032c4 <HAL_UART_MspInit+0x2b8>)
 8003178:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800317c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800317e:	4b51      	ldr	r3, [pc, #324]	; (80032c4 <HAL_UART_MspInit+0x2b8>)
 8003180:	2200      	movs	r2, #0
 8003182:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003184:	4b4f      	ldr	r3, [pc, #316]	; (80032c4 <HAL_UART_MspInit+0x2b8>)
 8003186:	2200      	movs	r2, #0
 8003188:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800318a:	4b4e      	ldr	r3, [pc, #312]	; (80032c4 <HAL_UART_MspInit+0x2b8>)
 800318c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003190:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003192:	4b4c      	ldr	r3, [pc, #304]	; (80032c4 <HAL_UART_MspInit+0x2b8>)
 8003194:	2200      	movs	r2, #0
 8003196:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003198:	4b4a      	ldr	r3, [pc, #296]	; (80032c4 <HAL_UART_MspInit+0x2b8>)
 800319a:	2200      	movs	r2, #0
 800319c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800319e:	4849      	ldr	r0, [pc, #292]	; (80032c4 <HAL_UART_MspInit+0x2b8>)
 80031a0:	f001 f898 	bl	80042d4 <HAL_DMA_Init>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <HAL_UART_MspInit+0x1a2>
      Error_Handler();
 80031aa:	f7ff fdd1 	bl	8002d50 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a44      	ldr	r2, [pc, #272]	; (80032c4 <HAL_UART_MspInit+0x2b8>)
 80031b2:	635a      	str	r2, [r3, #52]	; 0x34
 80031b4:	4a43      	ldr	r2, [pc, #268]	; (80032c4 <HAL_UART_MspInit+0x2b8>)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80031ba:	2200      	movs	r2, #0
 80031bc:	2100      	movs	r1, #0
 80031be:	2025      	movs	r0, #37	; 0x25
 80031c0:	f001 f851 	bl	8004266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80031c4:	2025      	movs	r0, #37	; 0x25
 80031c6:	f001 f86a 	bl	800429e <HAL_NVIC_EnableIRQ>
}
 80031ca:	e068      	b.n	800329e <HAL_UART_MspInit+0x292>
  else if(huart->Instance==USART3)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a3e      	ldr	r2, [pc, #248]	; (80032cc <HAL_UART_MspInit+0x2c0>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d163      	bne.n	800329e <HAL_UART_MspInit+0x292>
    __HAL_RCC_USART3_CLK_ENABLE();
 80031d6:	2300      	movs	r3, #0
 80031d8:	613b      	str	r3, [r7, #16]
 80031da:	4b34      	ldr	r3, [pc, #208]	; (80032ac <HAL_UART_MspInit+0x2a0>)
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	4a33      	ldr	r2, [pc, #204]	; (80032ac <HAL_UART_MspInit+0x2a0>)
 80031e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031e4:	6413      	str	r3, [r2, #64]	; 0x40
 80031e6:	4b31      	ldr	r3, [pc, #196]	; (80032ac <HAL_UART_MspInit+0x2a0>)
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031ee:	613b      	str	r3, [r7, #16]
 80031f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031f2:	2300      	movs	r3, #0
 80031f4:	60fb      	str	r3, [r7, #12]
 80031f6:	4b2d      	ldr	r3, [pc, #180]	; (80032ac <HAL_UART_MspInit+0x2a0>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	4a2c      	ldr	r2, [pc, #176]	; (80032ac <HAL_UART_MspInit+0x2a0>)
 80031fc:	f043 0308 	orr.w	r3, r3, #8
 8003200:	6313      	str	r3, [r2, #48]	; 0x30
 8003202:	4b2a      	ldr	r3, [pc, #168]	; (80032ac <HAL_UART_MspInit+0x2a0>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	f003 0308 	and.w	r3, r3, #8
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800320e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003212:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003214:	2302      	movs	r3, #2
 8003216:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003218:	2300      	movs	r3, #0
 800321a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800321c:	2303      	movs	r3, #3
 800321e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003220:	2307      	movs	r3, #7
 8003222:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003224:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003228:	4619      	mov	r1, r3
 800322a:	4829      	ldr	r0, [pc, #164]	; (80032d0 <HAL_UART_MspInit+0x2c4>)
 800322c:	f001 fbe2 	bl	80049f4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003230:	4b28      	ldr	r3, [pc, #160]	; (80032d4 <HAL_UART_MspInit+0x2c8>)
 8003232:	4a29      	ldr	r2, [pc, #164]	; (80032d8 <HAL_UART_MspInit+0x2cc>)
 8003234:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003236:	4b27      	ldr	r3, [pc, #156]	; (80032d4 <HAL_UART_MspInit+0x2c8>)
 8003238:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800323c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800323e:	4b25      	ldr	r3, [pc, #148]	; (80032d4 <HAL_UART_MspInit+0x2c8>)
 8003240:	2200      	movs	r2, #0
 8003242:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003244:	4b23      	ldr	r3, [pc, #140]	; (80032d4 <HAL_UART_MspInit+0x2c8>)
 8003246:	2200      	movs	r2, #0
 8003248:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800324a:	4b22      	ldr	r3, [pc, #136]	; (80032d4 <HAL_UART_MspInit+0x2c8>)
 800324c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003250:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003252:	4b20      	ldr	r3, [pc, #128]	; (80032d4 <HAL_UART_MspInit+0x2c8>)
 8003254:	2200      	movs	r2, #0
 8003256:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003258:	4b1e      	ldr	r3, [pc, #120]	; (80032d4 <HAL_UART_MspInit+0x2c8>)
 800325a:	2200      	movs	r2, #0
 800325c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800325e:	4b1d      	ldr	r3, [pc, #116]	; (80032d4 <HAL_UART_MspInit+0x2c8>)
 8003260:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003264:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003266:	4b1b      	ldr	r3, [pc, #108]	; (80032d4 <HAL_UART_MspInit+0x2c8>)
 8003268:	2200      	movs	r2, #0
 800326a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800326c:	4b19      	ldr	r3, [pc, #100]	; (80032d4 <HAL_UART_MspInit+0x2c8>)
 800326e:	2200      	movs	r2, #0
 8003270:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003272:	4818      	ldr	r0, [pc, #96]	; (80032d4 <HAL_UART_MspInit+0x2c8>)
 8003274:	f001 f82e 	bl	80042d4 <HAL_DMA_Init>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <HAL_UART_MspInit+0x276>
      Error_Handler();
 800327e:	f7ff fd67 	bl	8002d50 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a13      	ldr	r2, [pc, #76]	; (80032d4 <HAL_UART_MspInit+0x2c8>)
 8003286:	635a      	str	r2, [r3, #52]	; 0x34
 8003288:	4a12      	ldr	r2, [pc, #72]	; (80032d4 <HAL_UART_MspInit+0x2c8>)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800328e:	2200      	movs	r2, #0
 8003290:	2100      	movs	r1, #0
 8003292:	2027      	movs	r0, #39	; 0x27
 8003294:	f000 ffe7 	bl	8004266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003298:	2027      	movs	r0, #39	; 0x27
 800329a:	f001 f800 	bl	800429e <HAL_NVIC_EnableIRQ>
}
 800329e:	bf00      	nop
 80032a0:	3738      	adds	r7, #56	; 0x38
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40004c00 	.word	0x40004c00
 80032ac:	40023800 	.word	0x40023800
 80032b0:	40020800 	.word	0x40020800
 80032b4:	20000a40 	.word	0x20000a40
 80032b8:	40026040 	.word	0x40026040
 80032bc:	40011000 	.word	0x40011000
 80032c0:	40020000 	.word	0x40020000
 80032c4:	2000100c 	.word	0x2000100c
 80032c8:	40026440 	.word	0x40026440
 80032cc:	40004800 	.word	0x40004800
 80032d0:	40020c00 	.word	0x40020c00
 80032d4:	20000eec 	.word	0x20000eec
 80032d8:	40026028 	.word	0x40026028

080032dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80032e0:	bf00      	nop
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032ea:	b480      	push	{r7}
 80032ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032ee:	e7fe      	b.n	80032ee <HardFault_Handler+0x4>

080032f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032f4:	e7fe      	b.n	80032f4 <MemManage_Handler+0x4>

080032f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032f6:	b480      	push	{r7}
 80032f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032fa:	e7fe      	b.n	80032fa <BusFault_Handler+0x4>

080032fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003300:	e7fe      	b.n	8003300 <UsageFault_Handler+0x4>

08003302 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003302:	b480      	push	{r7}
 8003304:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003306:	bf00      	nop
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003314:	bf00      	nop
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800331e:	b480      	push	{r7}
 8003320:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003322:	bf00      	nop
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003330:	f000 f9aa 	bl	8003688 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  	  //uart 4
  	  if(dma_uart4_rx.timer == 1)
 8003334:	4b20      	ldr	r3, [pc, #128]	; (80033b8 <SysTick_Handler+0x8c>)
 8003336:	885b      	ldrh	r3, [r3, #2]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d106      	bne.n	800334a <SysTick_Handler+0x1e>
      	  {
          /* DMA Timeout event: set Timeout Flag and call DMA Rx Complete Callback */
          dma_uart4_rx.flag = 1;
 800333c:	4b1e      	ldr	r3, [pc, #120]	; (80033b8 <SysTick_Handler+0x8c>)
 800333e:	2201      	movs	r2, #1
 8003340:	701a      	strb	r2, [r3, #0]
          hdma_uart4_rx.XferCpltCallback(&hdma_uart4_rx);
 8003342:	4b1e      	ldr	r3, [pc, #120]	; (80033bc <SysTick_Handler+0x90>)
 8003344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003346:	481d      	ldr	r0, [pc, #116]	; (80033bc <SysTick_Handler+0x90>)
 8003348:	4798      	blx	r3
      	  }
      if(dma_uart4_rx.timer) { --dma_uart4_rx.timer; }
 800334a:	4b1b      	ldr	r3, [pc, #108]	; (80033b8 <SysTick_Handler+0x8c>)
 800334c:	885b      	ldrh	r3, [r3, #2]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d005      	beq.n	800335e <SysTick_Handler+0x32>
 8003352:	4b19      	ldr	r3, [pc, #100]	; (80033b8 <SysTick_Handler+0x8c>)
 8003354:	885b      	ldrh	r3, [r3, #2]
 8003356:	3b01      	subs	r3, #1
 8003358:	b29a      	uxth	r2, r3
 800335a:	4b17      	ldr	r3, [pc, #92]	; (80033b8 <SysTick_Handler+0x8c>)
 800335c:	805a      	strh	r2, [r3, #2]
      //usart 1
      if(dma_uart1_rx.timer == 1)
 800335e:	4b18      	ldr	r3, [pc, #96]	; (80033c0 <SysTick_Handler+0x94>)
 8003360:	885b      	ldrh	r3, [r3, #2]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d106      	bne.n	8003374 <SysTick_Handler+0x48>
          {
              /* DMA Timeout event: set Timeout Flag and call DMA Rx Complete Callback */
              dma_uart1_rx.flag = 1;
 8003366:	4b16      	ldr	r3, [pc, #88]	; (80033c0 <SysTick_Handler+0x94>)
 8003368:	2201      	movs	r2, #1
 800336a:	701a      	strb	r2, [r3, #0]
              hdma_usart1_rx.XferCpltCallback(&hdma_usart1_rx);
 800336c:	4b15      	ldr	r3, [pc, #84]	; (80033c4 <SysTick_Handler+0x98>)
 800336e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003370:	4814      	ldr	r0, [pc, #80]	; (80033c4 <SysTick_Handler+0x98>)
 8003372:	4798      	blx	r3
          }
       if(dma_uart1_rx.timer) { --dma_uart1_rx.timer; }
 8003374:	4b12      	ldr	r3, [pc, #72]	; (80033c0 <SysTick_Handler+0x94>)
 8003376:	885b      	ldrh	r3, [r3, #2]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d005      	beq.n	8003388 <SysTick_Handler+0x5c>
 800337c:	4b10      	ldr	r3, [pc, #64]	; (80033c0 <SysTick_Handler+0x94>)
 800337e:	885b      	ldrh	r3, [r3, #2]
 8003380:	3b01      	subs	r3, #1
 8003382:	b29a      	uxth	r2, r3
 8003384:	4b0e      	ldr	r3, [pc, #56]	; (80033c0 <SysTick_Handler+0x94>)
 8003386:	805a      	strh	r2, [r3, #2]
       //usart2
       if(dma_uart3_rx.timer == 1)
 8003388:	4b0f      	ldr	r3, [pc, #60]	; (80033c8 <SysTick_Handler+0x9c>)
 800338a:	885b      	ldrh	r3, [r3, #2]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d106      	bne.n	800339e <SysTick_Handler+0x72>
         {
            	/* DMA Timeout event: set Timeout Flag and call DMA Rx Complete Callback */
                dma_uart3_rx.flag = 1;
 8003390:	4b0d      	ldr	r3, [pc, #52]	; (80033c8 <SysTick_Handler+0x9c>)
 8003392:	2201      	movs	r2, #1
 8003394:	701a      	strb	r2, [r3, #0]
                hdma_usart3_rx.XferCpltCallback(&hdma_usart3_rx);
 8003396:	4b0d      	ldr	r3, [pc, #52]	; (80033cc <SysTick_Handler+0xa0>)
 8003398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339a:	480c      	ldr	r0, [pc, #48]	; (80033cc <SysTick_Handler+0xa0>)
 800339c:	4798      	blx	r3
          }
       if(dma_uart3_rx.timer) { --dma_uart3_rx.timer; }
 800339e:	4b0a      	ldr	r3, [pc, #40]	; (80033c8 <SysTick_Handler+0x9c>)
 80033a0:	885b      	ldrh	r3, [r3, #2]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d005      	beq.n	80033b2 <SysTick_Handler+0x86>
 80033a6:	4b08      	ldr	r3, [pc, #32]	; (80033c8 <SysTick_Handler+0x9c>)
 80033a8:	885b      	ldrh	r3, [r3, #2]
 80033aa:	3b01      	subs	r3, #1
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	4b06      	ldr	r3, [pc, #24]	; (80033c8 <SysTick_Handler+0x9c>)
 80033b0:	805a      	strh	r2, [r3, #2]
  /* USER CODE END SysTick_IRQn 1 */
}
 80033b2:	bf00      	nop
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	20000000 	.word	0x20000000
 80033bc:	20000a40 	.word	0x20000a40
 80033c0:	20000008 	.word	0x20000008
 80033c4:	2000100c 	.word	0x2000100c
 80033c8:	20000014 	.word	0x20000014
 80033cc:	20000eec 	.word	0x20000eec

080033d0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80033d4:	4802      	ldr	r0, [pc, #8]	; (80033e0 <DMA1_Stream1_IRQHandler+0x10>)
 80033d6:	f001 f8a5 	bl	8004524 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80033da:	bf00      	nop
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	20000eec 	.word	0x20000eec

080033e4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80033e8:	4802      	ldr	r0, [pc, #8]	; (80033f4 <DMA1_Stream2_IRQHandler+0x10>)
 80033ea:	f001 f89b 	bl	8004524 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80033ee:	bf00      	nop
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	20000a40 	.word	0x20000a40

080033f8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80033fc:	4802      	ldr	r0, [pc, #8]	; (8003408 <ADC_IRQHandler+0x10>)
 80033fe:	f000 fac2 	bl	8003986 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003402:	bf00      	nop
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	20000fb8 	.word	0x20000fb8

0800340c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
    if((USART1->SR & USART_SR_IDLE) != RESET)
 8003412:	4b0d      	ldr	r3, [pc, #52]	; (8003448 <USART1_IRQHandler+0x3c>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0310 	and.w	r3, r3, #16
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00d      	beq.n	800343a <USART1_IRQHandler+0x2e>
    {
        __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 800341e:	2300      	movs	r3, #0
 8003420:	607b      	str	r3, [r7, #4]
 8003422:	4b0a      	ldr	r3, [pc, #40]	; (800344c <USART1_IRQHandler+0x40>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	607b      	str	r3, [r7, #4]
 800342a:	4b08      	ldr	r3, [pc, #32]	; (800344c <USART1_IRQHandler+0x40>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	607b      	str	r3, [r7, #4]
 8003432:	687b      	ldr	r3, [r7, #4]
        /* Start DMA timer */
        dma_uart1_rx.timer = DMA_TIMEOUT_MS;
 8003434:	4b06      	ldr	r3, [pc, #24]	; (8003450 <USART1_IRQHandler+0x44>)
 8003436:	220a      	movs	r2, #10
 8003438:	805a      	strh	r2, [r3, #2]
    }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800343a:	4804      	ldr	r0, [pc, #16]	; (800344c <USART1_IRQHandler+0x40>)
 800343c:	f004 f912 	bl	8007664 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003440:	bf00      	nop
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40011000 	.word	0x40011000
 800344c:	20001088 	.word	0x20001088
 8003450:	20000008 	.word	0x20000008

08003454 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
    if((USART3->SR & USART_SR_IDLE) != RESET)
 800345a:	4b0d      	ldr	r3, [pc, #52]	; (8003490 <USART3_IRQHandler+0x3c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0310 	and.w	r3, r3, #16
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00d      	beq.n	8003482 <USART3_IRQHandler+0x2e>
    {
        __HAL_UART_CLEAR_IDLEFLAG(&huart3);
 8003466:	2300      	movs	r3, #0
 8003468:	607b      	str	r3, [r7, #4]
 800346a:	4b0a      	ldr	r3, [pc, #40]	; (8003494 <USART3_IRQHandler+0x40>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	607b      	str	r3, [r7, #4]
 8003472:	4b08      	ldr	r3, [pc, #32]	; (8003494 <USART3_IRQHandler+0x40>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	607b      	str	r3, [r7, #4]
 800347a:	687b      	ldr	r3, [r7, #4]
        /* Start DMA timer */
        dma_uart3_rx.timer = DMA_TIMEOUT_MS;
 800347c:	4b06      	ldr	r3, [pc, #24]	; (8003498 <USART3_IRQHandler+0x44>)
 800347e:	220a      	movs	r2, #10
 8003480:	805a      	strh	r2, [r3, #2]
    }
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003482:	4804      	ldr	r0, [pc, #16]	; (8003494 <USART3_IRQHandler+0x40>)
 8003484:	f004 f8ee 	bl	8007664 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003488:	bf00      	nop
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40004800 	.word	0x40004800
 8003494:	20000f4c 	.word	0x20000f4c
 8003498:	20000014 	.word	0x20000014

0800349c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
    if(__HAL_UART_GET_FLAG(&huart4, UART_FLAG_IDLE) != RESET)
 80034a2:	4b0e      	ldr	r3, [pc, #56]	; (80034dc <UART4_IRQHandler+0x40>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0310 	and.w	r3, r3, #16
 80034ac:	2b10      	cmp	r3, #16
 80034ae:	d10d      	bne.n	80034cc <UART4_IRQHandler+0x30>
    {
        __HAL_UART_CLEAR_IDLEFLAG(&huart4);
 80034b0:	2300      	movs	r3, #0
 80034b2:	607b      	str	r3, [r7, #4]
 80034b4:	4b09      	ldr	r3, [pc, #36]	; (80034dc <UART4_IRQHandler+0x40>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	607b      	str	r3, [r7, #4]
 80034bc:	4b07      	ldr	r3, [pc, #28]	; (80034dc <UART4_IRQHandler+0x40>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	607b      	str	r3, [r7, #4]
 80034c4:	687b      	ldr	r3, [r7, #4]
        /* Start DMA timer */
        dma_uart4_rx.timer = DMA_TIMEOUT_MS;
 80034c6:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <UART4_IRQHandler+0x44>)
 80034c8:	220a      	movs	r2, #10
 80034ca:	805a      	strh	r2, [r3, #2]
    }
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80034cc:	4803      	ldr	r0, [pc, #12]	; (80034dc <UART4_IRQHandler+0x40>)
 80034ce:	f004 f8c9 	bl	8007664 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80034d2:	bf00      	nop
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	20001200 	.word	0x20001200
 80034e0:	20000000 	.word	0x20000000

080034e4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80034e8:	4802      	ldr	r0, [pc, #8]	; (80034f4 <DMA2_Stream2_IRQHandler+0x10>)
 80034ea:	f001 f81b 	bl	8004524 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80034ee:	bf00      	nop
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	2000100c 	.word	0x2000100c

080034f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003500:	4a14      	ldr	r2, [pc, #80]	; (8003554 <_sbrk+0x5c>)
 8003502:	4b15      	ldr	r3, [pc, #84]	; (8003558 <_sbrk+0x60>)
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800350c:	4b13      	ldr	r3, [pc, #76]	; (800355c <_sbrk+0x64>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d102      	bne.n	800351a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003514:	4b11      	ldr	r3, [pc, #68]	; (800355c <_sbrk+0x64>)
 8003516:	4a12      	ldr	r2, [pc, #72]	; (8003560 <_sbrk+0x68>)
 8003518:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800351a:	4b10      	ldr	r3, [pc, #64]	; (800355c <_sbrk+0x64>)
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4413      	add	r3, r2
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	429a      	cmp	r2, r3
 8003526:	d207      	bcs.n	8003538 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003528:	f004 ff4c 	bl	80083c4 <__errno>
 800352c:	4602      	mov	r2, r0
 800352e:	230c      	movs	r3, #12
 8003530:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003532:	f04f 33ff 	mov.w	r3, #4294967295
 8003536:	e009      	b.n	800354c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003538:	4b08      	ldr	r3, [pc, #32]	; (800355c <_sbrk+0x64>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800353e:	4b07      	ldr	r3, [pc, #28]	; (800355c <_sbrk+0x64>)
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4413      	add	r3, r2
 8003546:	4a05      	ldr	r2, [pc, #20]	; (800355c <_sbrk+0x64>)
 8003548:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800354a:	68fb      	ldr	r3, [r7, #12]
}
 800354c:	4618      	mov	r0, r3
 800354e:	3718      	adds	r7, #24
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	20020000 	.word	0x20020000
 8003558:	00000400 	.word	0x00000400
 800355c:	20000824 	.word	0x20000824
 8003560:	200012e0 	.word	0x200012e0

08003564 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003568:	4b08      	ldr	r3, [pc, #32]	; (800358c <SystemInit+0x28>)
 800356a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356e:	4a07      	ldr	r2, [pc, #28]	; (800358c <SystemInit+0x28>)
 8003570:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003574:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003578:	4b04      	ldr	r3, [pc, #16]	; (800358c <SystemInit+0x28>)
 800357a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800357e:	609a      	str	r2, [r3, #8]
#endif
}
 8003580:	bf00      	nop
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	e000ed00 	.word	0xe000ed00

08003590 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003590:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003594:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003596:	e003      	b.n	80035a0 <LoopCopyDataInit>

08003598 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003598:	4b0c      	ldr	r3, [pc, #48]	; (80035cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800359a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800359c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800359e:	3104      	adds	r1, #4

080035a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80035a0:	480b      	ldr	r0, [pc, #44]	; (80035d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80035a2:	4b0c      	ldr	r3, [pc, #48]	; (80035d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80035a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80035a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80035a8:	d3f6      	bcc.n	8003598 <CopyDataInit>
  ldr  r2, =_sbss
 80035aa:	4a0b      	ldr	r2, [pc, #44]	; (80035d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80035ac:	e002      	b.n	80035b4 <LoopFillZerobss>

080035ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80035ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80035b0:	f842 3b04 	str.w	r3, [r2], #4

080035b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80035b4:	4b09      	ldr	r3, [pc, #36]	; (80035dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80035b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80035b8:	d3f9      	bcc.n	80035ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80035ba:	f7ff ffd3 	bl	8003564 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035be:	f004 ff07 	bl	80083d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035c2:	f7fe fef1 	bl	80023a8 <main>
  bx  lr    
 80035c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80035c8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80035cc:	0800c890 	.word	0x0800c890
  ldr  r0, =_sdata
 80035d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80035d4:	200001f8 	.word	0x200001f8
  ldr  r2, =_sbss
 80035d8:	200001f8 	.word	0x200001f8
  ldr  r3, = _ebss
 80035dc:	200012dc 	.word	0x200012dc

080035e0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035e0:	e7fe      	b.n	80035e0 <CAN1_RX0_IRQHandler>
	...

080035e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035e8:	4b0e      	ldr	r3, [pc, #56]	; (8003624 <HAL_Init+0x40>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a0d      	ldr	r2, [pc, #52]	; (8003624 <HAL_Init+0x40>)
 80035ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035f4:	4b0b      	ldr	r3, [pc, #44]	; (8003624 <HAL_Init+0x40>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a0a      	ldr	r2, [pc, #40]	; (8003624 <HAL_Init+0x40>)
 80035fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003600:	4b08      	ldr	r3, [pc, #32]	; (8003624 <HAL_Init+0x40>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a07      	ldr	r2, [pc, #28]	; (8003624 <HAL_Init+0x40>)
 8003606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800360a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800360c:	2003      	movs	r0, #3
 800360e:	f000 fe1f 	bl	8004250 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003612:	2000      	movs	r0, #0
 8003614:	f000 f808 	bl	8003628 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003618:	f7ff fba2 	bl	8002d60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	40023c00 	.word	0x40023c00

08003628 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003630:	4b12      	ldr	r3, [pc, #72]	; (800367c <HAL_InitTick+0x54>)
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	4b12      	ldr	r3, [pc, #72]	; (8003680 <HAL_InitTick+0x58>)
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	4619      	mov	r1, r3
 800363a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800363e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003642:	fbb2 f3f3 	udiv	r3, r2, r3
 8003646:	4618      	mov	r0, r3
 8003648:	f000 fe37 	bl	80042ba <HAL_SYSTICK_Config>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e00e      	b.n	8003674 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b0f      	cmp	r3, #15
 800365a:	d80a      	bhi.n	8003672 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800365c:	2200      	movs	r2, #0
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	f04f 30ff 	mov.w	r0, #4294967295
 8003664:	f000 fdff 	bl	8004266 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003668:	4a06      	ldr	r2, [pc, #24]	; (8003684 <HAL_InitTick+0x5c>)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800366e:	2300      	movs	r3, #0
 8003670:	e000      	b.n	8003674 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
}
 8003674:	4618      	mov	r0, r3
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	2000001c 	.word	0x2000001c
 8003680:	20000024 	.word	0x20000024
 8003684:	20000020 	.word	0x20000020

08003688 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800368c:	4b06      	ldr	r3, [pc, #24]	; (80036a8 <HAL_IncTick+0x20>)
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	461a      	mov	r2, r3
 8003692:	4b06      	ldr	r3, [pc, #24]	; (80036ac <HAL_IncTick+0x24>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4413      	add	r3, r2
 8003698:	4a04      	ldr	r2, [pc, #16]	; (80036ac <HAL_IncTick+0x24>)
 800369a:	6013      	str	r3, [r2, #0]
}
 800369c:	bf00      	nop
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	20000024 	.word	0x20000024
 80036ac:	200012d4 	.word	0x200012d4

080036b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  return uwTick;
 80036b4:	4b03      	ldr	r3, [pc, #12]	; (80036c4 <HAL_GetTick+0x14>)
 80036b6:	681b      	ldr	r3, [r3, #0]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	200012d4 	.word	0x200012d4

080036c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036d0:	f7ff ffee 	bl	80036b0 <HAL_GetTick>
 80036d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e0:	d005      	beq.n	80036ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036e2:	4b09      	ldr	r3, [pc, #36]	; (8003708 <HAL_Delay+0x40>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	461a      	mov	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4413      	add	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80036ee:	bf00      	nop
 80036f0:	f7ff ffde 	bl	80036b0 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d8f7      	bhi.n	80036f0 <HAL_Delay+0x28>
  {
  }
}
 8003700:	bf00      	nop
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	20000024 	.word	0x20000024

0800370c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003714:	2300      	movs	r3, #0
 8003716:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e033      	b.n	800378a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	2b00      	cmp	r3, #0
 8003728:	d109      	bne.n	800373e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7ff fb40 	bl	8002db0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	f003 0310 	and.w	r3, r3, #16
 8003746:	2b00      	cmp	r3, #0
 8003748:	d118      	bne.n	800377c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003752:	f023 0302 	bic.w	r3, r3, #2
 8003756:	f043 0202 	orr.w	r2, r3, #2
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 fba0 	bl	8003ea4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	f023 0303 	bic.w	r3, r3, #3
 8003772:	f043 0201 	orr.w	r2, r3, #1
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	641a      	str	r2, [r3, #64]	; 0x40
 800377a:	e001      	b.n	8003780 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003788:	7bfb      	ldrb	r3, [r7, #15]
}
 800378a:	4618      	mov	r0, r3
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
	...

08003794 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d101      	bne.n	80037ae <HAL_ADC_Start+0x1a>
 80037aa:	2302      	movs	r3, #2
 80037ac:	e0a5      	b.n	80038fa <HAL_ADC_Start+0x166>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d018      	beq.n	80037f6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689a      	ldr	r2, [r3, #8]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 0201 	orr.w	r2, r2, #1
 80037d2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80037d4:	4b4c      	ldr	r3, [pc, #304]	; (8003908 <HAL_ADC_Start+0x174>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a4c      	ldr	r2, [pc, #304]	; (800390c <HAL_ADC_Start+0x178>)
 80037da:	fba2 2303 	umull	r2, r3, r2, r3
 80037de:	0c9a      	lsrs	r2, r3, #18
 80037e0:	4613      	mov	r3, r2
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	4413      	add	r3, r2
 80037e6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80037e8:	e002      	b.n	80037f0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	3b01      	subs	r3, #1
 80037ee:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1f9      	bne.n	80037ea <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	2b01      	cmp	r3, #1
 8003802:	d179      	bne.n	80038f8 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003808:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800380c:	f023 0301 	bic.w	r3, r3, #1
 8003810:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003822:	2b00      	cmp	r3, #0
 8003824:	d007      	beq.n	8003836 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800382e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800383e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003842:	d106      	bne.n	8003852 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003848:	f023 0206 	bic.w	r2, r3, #6
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	645a      	str	r2, [r3, #68]	; 0x44
 8003850:	e002      	b.n	8003858 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003860:	4b2b      	ldr	r3, [pc, #172]	; (8003910 <HAL_ADC_Start+0x17c>)
 8003862:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800386c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f003 031f 	and.w	r3, r3, #31
 8003876:	2b00      	cmp	r3, #0
 8003878:	d12a      	bne.n	80038d0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a25      	ldr	r2, [pc, #148]	; (8003914 <HAL_ADC_Start+0x180>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d015      	beq.n	80038b0 <HAL_ADC_Start+0x11c>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a23      	ldr	r2, [pc, #140]	; (8003918 <HAL_ADC_Start+0x184>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d105      	bne.n	800389a <HAL_ADC_Start+0x106>
 800388e:	4b20      	ldr	r3, [pc, #128]	; (8003910 <HAL_ADC_Start+0x17c>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f003 031f 	and.w	r3, r3, #31
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00a      	beq.n	80038b0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a1f      	ldr	r2, [pc, #124]	; (800391c <HAL_ADC_Start+0x188>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d129      	bne.n	80038f8 <HAL_ADC_Start+0x164>
 80038a4:	4b1a      	ldr	r3, [pc, #104]	; (8003910 <HAL_ADC_Start+0x17c>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f003 031f 	and.w	r3, r3, #31
 80038ac:	2b0f      	cmp	r3, #15
 80038ae:	d823      	bhi.n	80038f8 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d11c      	bne.n	80038f8 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80038cc:	609a      	str	r2, [r3, #8]
 80038ce:	e013      	b.n	80038f8 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a0f      	ldr	r2, [pc, #60]	; (8003914 <HAL_ADC_Start+0x180>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d10e      	bne.n	80038f8 <HAL_ADC_Start+0x164>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d107      	bne.n	80038f8 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689a      	ldr	r2, [r3, #8]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80038f6:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	2000001c 	.word	0x2000001c
 800390c:	431bde83 	.word	0x431bde83
 8003910:	40012300 	.word	0x40012300
 8003914:	40012000 	.word	0x40012000
 8003918:	40012100 	.word	0x40012100
 800391c:	40012200 	.word	0x40012200

08003920 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800392e:	2b01      	cmp	r3, #1
 8003930:	d101      	bne.n	8003936 <HAL_ADC_Stop+0x16>
 8003932:	2302      	movs	r3, #2
 8003934:	e021      	b.n	800397a <HAL_ADC_Stop+0x5a>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f022 0201 	bic.w	r2, r2, #1
 800394c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	2b00      	cmp	r3, #0
 800395a:	d109      	bne.n	8003970 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003960:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003964:	f023 0301 	bic.w	r3, r3, #1
 8003968:	f043 0201 	orr.w	r2, r3, #1
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr

08003986 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b084      	sub	sp, #16
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	2300      	movs	r3, #0
 8003994:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	bf0c      	ite	eq
 80039a4:	2301      	moveq	r3, #1
 80039a6:	2300      	movne	r3, #0
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f003 0320 	and.w	r3, r3, #32
 80039b6:	2b20      	cmp	r3, #32
 80039b8:	bf0c      	ite	eq
 80039ba:	2301      	moveq	r3, #1
 80039bc:	2300      	movne	r3, #0
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d049      	beq.n	8003a5c <HAL_ADC_IRQHandler+0xd6>
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d046      	beq.n	8003a5c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	f003 0310 	and.w	r3, r3, #16
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d105      	bne.n	80039e6 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d12b      	bne.n	8003a4c <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d127      	bne.n	8003a4c <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a02:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d006      	beq.n	8003a18 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d119      	bne.n	8003a4c <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685a      	ldr	r2, [r3, #4]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 0220 	bic.w	r2, r2, #32
 8003a26:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d105      	bne.n	8003a4c <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a44:	f043 0201 	orr.w	r2, r3, #1
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 f8e8 	bl	8003c22 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f06f 0212 	mvn.w	r2, #18
 8003a5a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0304 	and.w	r3, r3, #4
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	bf0c      	ite	eq
 8003a6a:	2301      	moveq	r3, #1
 8003a6c:	2300      	movne	r3, #0
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a7c:	2b80      	cmp	r3, #128	; 0x80
 8003a7e:	bf0c      	ite	eq
 8003a80:	2301      	moveq	r3, #1
 8003a82:	2300      	movne	r3, #0
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d057      	beq.n	8003b3e <HAL_ADC_IRQHandler+0x1b8>
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d054      	beq.n	8003b3e <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a98:	f003 0310 	and.w	r3, r3, #16
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d105      	bne.n	8003aac <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d139      	bne.n	8003b2e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d006      	beq.n	8003ad6 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d12b      	bne.n	8003b2e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d124      	bne.n	8003b2e <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d11d      	bne.n	8003b2e <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d119      	bne.n	8003b2e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b08:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d105      	bne.n	8003b2e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	f043 0201 	orr.w	r2, r3, #1
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 fab4 	bl	800409c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f06f 020c 	mvn.w	r2, #12
 8003b3c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	bf0c      	ite	eq
 8003b4c:	2301      	moveq	r3, #1
 8003b4e:	2300      	movne	r3, #0
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5e:	2b40      	cmp	r3, #64	; 0x40
 8003b60:	bf0c      	ite	eq
 8003b62:	2301      	moveq	r3, #1
 8003b64:	2300      	movne	r3, #0
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d017      	beq.n	8003ba0 <HAL_ADC_IRQHandler+0x21a>
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d014      	beq.n	8003ba0 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d10d      	bne.n	8003ba0 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f850 	bl	8003c36 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f06f 0201 	mvn.w	r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0320 	and.w	r3, r3, #32
 8003baa:	2b20      	cmp	r3, #32
 8003bac:	bf0c      	ite	eq
 8003bae:	2301      	moveq	r3, #1
 8003bb0:	2300      	movne	r3, #0
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003bc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bc4:	bf0c      	ite	eq
 8003bc6:	2301      	moveq	r3, #1
 8003bc8:	2300      	movne	r3, #0
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d015      	beq.n	8003c00 <HAL_ADC_IRQHandler+0x27a>
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d012      	beq.n	8003c00 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bde:	f043 0202 	orr.w	r2, r3, #2
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f06f 0220 	mvn.w	r2, #32
 8003bee:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 f82a 	bl	8003c4a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f06f 0220 	mvn.w	r2, #32
 8003bfe:	601a      	str	r2, [r3, #0]
  }
}
 8003c00:	bf00      	nop
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003c3e:	bf00      	nop
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
	...

08003c60 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d101      	bne.n	8003c7c <HAL_ADC_ConfigChannel+0x1c>
 8003c78:	2302      	movs	r3, #2
 8003c7a:	e105      	b.n	8003e88 <HAL_ADC_ConfigChannel+0x228>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b09      	cmp	r3, #9
 8003c8a:	d925      	bls.n	8003cd8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68d9      	ldr	r1, [r3, #12]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	461a      	mov	r2, r3
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	4413      	add	r3, r2
 8003ca0:	3b1e      	subs	r3, #30
 8003ca2:	2207      	movs	r2, #7
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	43da      	mvns	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	400a      	ands	r2, r1
 8003cb0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68d9      	ldr	r1, [r3, #12]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	689a      	ldr	r2, [r3, #8]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	4403      	add	r3, r0
 8003cca:	3b1e      	subs	r3, #30
 8003ccc:	409a      	lsls	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	60da      	str	r2, [r3, #12]
 8003cd6:	e022      	b.n	8003d1e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6919      	ldr	r1, [r3, #16]
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	4413      	add	r3, r2
 8003cec:	2207      	movs	r2, #7
 8003cee:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf2:	43da      	mvns	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	400a      	ands	r2, r1
 8003cfa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	6919      	ldr	r1, [r3, #16]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	689a      	ldr	r2, [r3, #8]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	4603      	mov	r3, r0
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	4403      	add	r3, r0
 8003d14:	409a      	lsls	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2b06      	cmp	r3, #6
 8003d24:	d824      	bhi.n	8003d70 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	4613      	mov	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4413      	add	r3, r2
 8003d36:	3b05      	subs	r3, #5
 8003d38:	221f      	movs	r2, #31
 8003d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3e:	43da      	mvns	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	400a      	ands	r2, r1
 8003d46:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	4618      	mov	r0, r3
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	4413      	add	r3, r2
 8003d60:	3b05      	subs	r3, #5
 8003d62:	fa00 f203 	lsl.w	r2, r0, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	635a      	str	r2, [r3, #52]	; 0x34
 8003d6e:	e04c      	b.n	8003e0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	2b0c      	cmp	r3, #12
 8003d76:	d824      	bhi.n	8003dc2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	4613      	mov	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	3b23      	subs	r3, #35	; 0x23
 8003d8a:	221f      	movs	r2, #31
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	43da      	mvns	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	400a      	ands	r2, r1
 8003d98:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	4618      	mov	r0, r3
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	4613      	mov	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	3b23      	subs	r3, #35	; 0x23
 8003db4:	fa00 f203 	lsl.w	r2, r0, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	631a      	str	r2, [r3, #48]	; 0x30
 8003dc0:	e023      	b.n	8003e0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	4413      	add	r3, r2
 8003dd2:	3b41      	subs	r3, #65	; 0x41
 8003dd4:	221f      	movs	r2, #31
 8003dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dda:	43da      	mvns	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	400a      	ands	r2, r1
 8003de2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	4618      	mov	r0, r3
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	4613      	mov	r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	4413      	add	r3, r2
 8003dfc:	3b41      	subs	r3, #65	; 0x41
 8003dfe:	fa00 f203 	lsl.w	r2, r0, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e0a:	4b22      	ldr	r3, [pc, #136]	; (8003e94 <HAL_ADC_ConfigChannel+0x234>)
 8003e0c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a21      	ldr	r2, [pc, #132]	; (8003e98 <HAL_ADC_ConfigChannel+0x238>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d109      	bne.n	8003e2c <HAL_ADC_ConfigChannel+0x1cc>
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b12      	cmp	r3, #18
 8003e1e:	d105      	bne.n	8003e2c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a19      	ldr	r2, [pc, #100]	; (8003e98 <HAL_ADC_ConfigChannel+0x238>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d123      	bne.n	8003e7e <HAL_ADC_ConfigChannel+0x21e>
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2b10      	cmp	r3, #16
 8003e3c:	d003      	beq.n	8003e46 <HAL_ADC_ConfigChannel+0x1e6>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2b11      	cmp	r3, #17
 8003e44:	d11b      	bne.n	8003e7e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2b10      	cmp	r3, #16
 8003e58:	d111      	bne.n	8003e7e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003e5a:	4b10      	ldr	r3, [pc, #64]	; (8003e9c <HAL_ADC_ConfigChannel+0x23c>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a10      	ldr	r2, [pc, #64]	; (8003ea0 <HAL_ADC_ConfigChannel+0x240>)
 8003e60:	fba2 2303 	umull	r2, r3, r2, r3
 8003e64:	0c9a      	lsrs	r2, r3, #18
 8003e66:	4613      	mov	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4413      	add	r3, r2
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003e70:	e002      	b.n	8003e78 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	3b01      	subs	r3, #1
 8003e76:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1f9      	bne.n	8003e72 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr
 8003e94:	40012300 	.word	0x40012300
 8003e98:	40012000 	.word	0x40012000
 8003e9c:	2000001c 	.word	0x2000001c
 8003ea0:	431bde83 	.word	0x431bde83

08003ea4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003eac:	4b79      	ldr	r3, [pc, #484]	; (8004094 <ADC_Init+0x1f0>)
 8003eae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	685a      	ldr	r2, [r3, #4]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ed8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6859      	ldr	r1, [r3, #4]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	021a      	lsls	r2, r3, #8
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003efc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6859      	ldr	r1, [r3, #4]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	689a      	ldr	r2, [r3, #8]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6899      	ldr	r1, [r3, #8]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68da      	ldr	r2, [r3, #12]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f36:	4a58      	ldr	r2, [pc, #352]	; (8004098 <ADC_Init+0x1f4>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d022      	beq.n	8003f82 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	689a      	ldr	r2, [r3, #8]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f4a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6899      	ldr	r1, [r3, #8]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	6899      	ldr	r1, [r3, #8]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	609a      	str	r2, [r3, #8]
 8003f80:	e00f      	b.n	8003fa2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	689a      	ldr	r2, [r3, #8]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689a      	ldr	r2, [r3, #8]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003fa0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	689a      	ldr	r2, [r3, #8]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 0202 	bic.w	r2, r2, #2
 8003fb0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6899      	ldr	r1, [r3, #8]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	7e1b      	ldrb	r3, [r3, #24]
 8003fbc:	005a      	lsls	r2, r3, #1
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d01b      	beq.n	8004008 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685a      	ldr	r2, [r3, #4]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fde:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003fee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	6859      	ldr	r1, [r3, #4]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	035a      	lsls	r2, r3, #13
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	430a      	orrs	r2, r1
 8004004:	605a      	str	r2, [r3, #4]
 8004006:	e007      	b.n	8004018 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685a      	ldr	r2, [r3, #4]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004016:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004026:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	3b01      	subs	r3, #1
 8004034:	051a      	lsls	r2, r3, #20
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	430a      	orrs	r2, r1
 800403c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800404c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6899      	ldr	r1, [r3, #8]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800405a:	025a      	lsls	r2, r3, #9
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	430a      	orrs	r2, r1
 8004062:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689a      	ldr	r2, [r3, #8]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004072:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6899      	ldr	r1, [r3, #8]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	029a      	lsls	r2, r3, #10
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	609a      	str	r2, [r3, #8]
}
 8004088:	bf00      	nop
 800408a:	3714      	adds	r7, #20
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr
 8004094:	40012300 	.word	0x40012300
 8004098:	0f000001 	.word	0x0f000001

0800409c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f003 0307 	and.w	r3, r3, #7
 80040be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040c0:	4b0c      	ldr	r3, [pc, #48]	; (80040f4 <__NVIC_SetPriorityGrouping+0x44>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040cc:	4013      	ands	r3, r2
 80040ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040e2:	4a04      	ldr	r2, [pc, #16]	; (80040f4 <__NVIC_SetPriorityGrouping+0x44>)
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	60d3      	str	r3, [r2, #12]
}
 80040e8:	bf00      	nop
 80040ea:	3714      	adds	r7, #20
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	e000ed00 	.word	0xe000ed00

080040f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040fc:	4b04      	ldr	r3, [pc, #16]	; (8004110 <__NVIC_GetPriorityGrouping+0x18>)
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	0a1b      	lsrs	r3, r3, #8
 8004102:	f003 0307 	and.w	r3, r3, #7
}
 8004106:	4618      	mov	r0, r3
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	e000ed00 	.word	0xe000ed00

08004114 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	4603      	mov	r3, r0
 800411c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800411e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004122:	2b00      	cmp	r3, #0
 8004124:	db0b      	blt.n	800413e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004126:	79fb      	ldrb	r3, [r7, #7]
 8004128:	f003 021f 	and.w	r2, r3, #31
 800412c:	4907      	ldr	r1, [pc, #28]	; (800414c <__NVIC_EnableIRQ+0x38>)
 800412e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004132:	095b      	lsrs	r3, r3, #5
 8004134:	2001      	movs	r0, #1
 8004136:	fa00 f202 	lsl.w	r2, r0, r2
 800413a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	e000e100 	.word	0xe000e100

08004150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	4603      	mov	r3, r0
 8004158:	6039      	str	r1, [r7, #0]
 800415a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800415c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004160:	2b00      	cmp	r3, #0
 8004162:	db0a      	blt.n	800417a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	b2da      	uxtb	r2, r3
 8004168:	490c      	ldr	r1, [pc, #48]	; (800419c <__NVIC_SetPriority+0x4c>)
 800416a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800416e:	0112      	lsls	r2, r2, #4
 8004170:	b2d2      	uxtb	r2, r2
 8004172:	440b      	add	r3, r1
 8004174:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004178:	e00a      	b.n	8004190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	b2da      	uxtb	r2, r3
 800417e:	4908      	ldr	r1, [pc, #32]	; (80041a0 <__NVIC_SetPriority+0x50>)
 8004180:	79fb      	ldrb	r3, [r7, #7]
 8004182:	f003 030f 	and.w	r3, r3, #15
 8004186:	3b04      	subs	r3, #4
 8004188:	0112      	lsls	r2, r2, #4
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	440b      	add	r3, r1
 800418e:	761a      	strb	r2, [r3, #24]
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr
 800419c:	e000e100 	.word	0xe000e100
 80041a0:	e000ed00 	.word	0xe000ed00

080041a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b089      	sub	sp, #36	; 0x24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	f1c3 0307 	rsb	r3, r3, #7
 80041be:	2b04      	cmp	r3, #4
 80041c0:	bf28      	it	cs
 80041c2:	2304      	movcs	r3, #4
 80041c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	3304      	adds	r3, #4
 80041ca:	2b06      	cmp	r3, #6
 80041cc:	d902      	bls.n	80041d4 <NVIC_EncodePriority+0x30>
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	3b03      	subs	r3, #3
 80041d2:	e000      	b.n	80041d6 <NVIC_EncodePriority+0x32>
 80041d4:	2300      	movs	r3, #0
 80041d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041d8:	f04f 32ff 	mov.w	r2, #4294967295
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	fa02 f303 	lsl.w	r3, r2, r3
 80041e2:	43da      	mvns	r2, r3
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	401a      	ands	r2, r3
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041ec:	f04f 31ff 	mov.w	r1, #4294967295
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	fa01 f303 	lsl.w	r3, r1, r3
 80041f6:	43d9      	mvns	r1, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041fc:	4313      	orrs	r3, r2
         );
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3724      	adds	r7, #36	; 0x24
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
	...

0800420c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3b01      	subs	r3, #1
 8004218:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800421c:	d301      	bcc.n	8004222 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800421e:	2301      	movs	r3, #1
 8004220:	e00f      	b.n	8004242 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004222:	4a0a      	ldr	r2, [pc, #40]	; (800424c <SysTick_Config+0x40>)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	3b01      	subs	r3, #1
 8004228:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800422a:	210f      	movs	r1, #15
 800422c:	f04f 30ff 	mov.w	r0, #4294967295
 8004230:	f7ff ff8e 	bl	8004150 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004234:	4b05      	ldr	r3, [pc, #20]	; (800424c <SysTick_Config+0x40>)
 8004236:	2200      	movs	r2, #0
 8004238:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800423a:	4b04      	ldr	r3, [pc, #16]	; (800424c <SysTick_Config+0x40>)
 800423c:	2207      	movs	r2, #7
 800423e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3708      	adds	r7, #8
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	e000e010 	.word	0xe000e010

08004250 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f7ff ff29 	bl	80040b0 <__NVIC_SetPriorityGrouping>
}
 800425e:	bf00      	nop
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004266:	b580      	push	{r7, lr}
 8004268:	b086      	sub	sp, #24
 800426a:	af00      	add	r7, sp, #0
 800426c:	4603      	mov	r3, r0
 800426e:	60b9      	str	r1, [r7, #8]
 8004270:	607a      	str	r2, [r7, #4]
 8004272:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004274:	2300      	movs	r3, #0
 8004276:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004278:	f7ff ff3e 	bl	80040f8 <__NVIC_GetPriorityGrouping>
 800427c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	68b9      	ldr	r1, [r7, #8]
 8004282:	6978      	ldr	r0, [r7, #20]
 8004284:	f7ff ff8e 	bl	80041a4 <NVIC_EncodePriority>
 8004288:	4602      	mov	r2, r0
 800428a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800428e:	4611      	mov	r1, r2
 8004290:	4618      	mov	r0, r3
 8004292:	f7ff ff5d 	bl	8004150 <__NVIC_SetPriority>
}
 8004296:	bf00      	nop
 8004298:	3718      	adds	r7, #24
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b082      	sub	sp, #8
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	4603      	mov	r3, r0
 80042a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7ff ff31 	bl	8004114 <__NVIC_EnableIRQ>
}
 80042b2:	bf00      	nop
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b082      	sub	sp, #8
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7ff ffa2 	bl	800420c <SysTick_Config>
 80042c8:	4603      	mov	r3, r0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
	...

080042d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80042dc:	2300      	movs	r3, #0
 80042de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80042e0:	f7ff f9e6 	bl	80036b0 <HAL_GetTick>
 80042e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d101      	bne.n	80042f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e099      	b.n	8004424 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2202      	movs	r2, #2
 80042fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 0201 	bic.w	r2, r2, #1
 800430e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004310:	e00f      	b.n	8004332 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004312:	f7ff f9cd 	bl	80036b0 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b05      	cmp	r3, #5
 800431e:	d908      	bls.n	8004332 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2220      	movs	r2, #32
 8004324:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2203      	movs	r2, #3
 800432a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e078      	b.n	8004424 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1e8      	bne.n	8004312 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	4b38      	ldr	r3, [pc, #224]	; (800442c <HAL_DMA_Init+0x158>)
 800434c:	4013      	ands	r3, r2
 800434e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800435e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800436a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004376:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	4313      	orrs	r3, r2
 8004382:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	2b04      	cmp	r3, #4
 800438a:	d107      	bne.n	800439c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004394:	4313      	orrs	r3, r2
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	4313      	orrs	r3, r2
 800439a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	f023 0307 	bic.w	r3, r3, #7
 80043b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c2:	2b04      	cmp	r3, #4
 80043c4:	d117      	bne.n	80043f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00e      	beq.n	80043f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 fa91 	bl	8004900 <DMA_CheckFifoParam>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d008      	beq.n	80043f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2240      	movs	r2, #64	; 0x40
 80043e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80043f2:	2301      	movs	r3, #1
 80043f4:	e016      	b.n	8004424 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 fa48 	bl	8004894 <DMA_CalcBaseAndBitshift>
 8004404:	4603      	mov	r3, r0
 8004406:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800440c:	223f      	movs	r2, #63	; 0x3f
 800440e:	409a      	lsls	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3718      	adds	r7, #24
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	f010803f 	.word	0xf010803f

08004430 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
 800443c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800443e:	2300      	movs	r3, #0
 8004440:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004446:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800444e:	2b01      	cmp	r3, #1
 8004450:	d101      	bne.n	8004456 <HAL_DMA_Start_IT+0x26>
 8004452:	2302      	movs	r3, #2
 8004454:	e040      	b.n	80044d8 <HAL_DMA_Start_IT+0xa8>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b01      	cmp	r3, #1
 8004468:	d12f      	bne.n	80044ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2202      	movs	r2, #2
 800446e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	68b9      	ldr	r1, [r7, #8]
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f000 f9da 	bl	8004838 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004488:	223f      	movs	r2, #63	; 0x3f
 800448a:	409a      	lsls	r2, r3
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 0216 	orr.w	r2, r2, #22
 800449e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d007      	beq.n	80044b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0208 	orr.w	r2, r2, #8
 80044b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f042 0201 	orr.w	r2, r2, #1
 80044c6:	601a      	str	r2, [r3, #0]
 80044c8:	e005      	b.n	80044d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80044d2:	2302      	movs	r3, #2
 80044d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80044d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3718      	adds	r7, #24
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d004      	beq.n	80044fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2280      	movs	r2, #128	; 0x80
 80044f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e00c      	b.n	8004518 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2205      	movs	r2, #5
 8004502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f022 0201 	bic.w	r2, r2, #1
 8004514:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800452c:	2300      	movs	r3, #0
 800452e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004530:	4b92      	ldr	r3, [pc, #584]	; (800477c <HAL_DMA_IRQHandler+0x258>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a92      	ldr	r2, [pc, #584]	; (8004780 <HAL_DMA_IRQHandler+0x25c>)
 8004536:	fba2 2303 	umull	r2, r3, r2, r3
 800453a:	0a9b      	lsrs	r3, r3, #10
 800453c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004542:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800454e:	2208      	movs	r2, #8
 8004550:	409a      	lsls	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	4013      	ands	r3, r2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d01a      	beq.n	8004590 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0304 	and.w	r3, r3, #4
 8004564:	2b00      	cmp	r3, #0
 8004566:	d013      	beq.n	8004590 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 0204 	bic.w	r2, r2, #4
 8004576:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800457c:	2208      	movs	r2, #8
 800457e:	409a      	lsls	r2, r3
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004588:	f043 0201 	orr.w	r2, r3, #1
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004594:	2201      	movs	r2, #1
 8004596:	409a      	lsls	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	4013      	ands	r3, r2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d012      	beq.n	80045c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00b      	beq.n	80045c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b2:	2201      	movs	r2, #1
 80045b4:	409a      	lsls	r2, r3
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045be:	f043 0202 	orr.w	r2, r3, #2
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ca:	2204      	movs	r2, #4
 80045cc:	409a      	lsls	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	4013      	ands	r3, r2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d012      	beq.n	80045fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00b      	beq.n	80045fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e8:	2204      	movs	r2, #4
 80045ea:	409a      	lsls	r2, r3
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f4:	f043 0204 	orr.w	r2, r3, #4
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004600:	2210      	movs	r2, #16
 8004602:	409a      	lsls	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4013      	ands	r3, r2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d043      	beq.n	8004694 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0308 	and.w	r3, r3, #8
 8004616:	2b00      	cmp	r3, #0
 8004618:	d03c      	beq.n	8004694 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800461e:	2210      	movs	r2, #16
 8004620:	409a      	lsls	r2, r3
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d018      	beq.n	8004666 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d108      	bne.n	8004654 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	2b00      	cmp	r3, #0
 8004648:	d024      	beq.n	8004694 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	4798      	blx	r3
 8004652:	e01f      	b.n	8004694 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004658:	2b00      	cmp	r3, #0
 800465a:	d01b      	beq.n	8004694 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	4798      	blx	r3
 8004664:	e016      	b.n	8004694 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004670:	2b00      	cmp	r3, #0
 8004672:	d107      	bne.n	8004684 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 0208 	bic.w	r2, r2, #8
 8004682:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004688:	2b00      	cmp	r3, #0
 800468a:	d003      	beq.n	8004694 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004698:	2220      	movs	r2, #32
 800469a:	409a      	lsls	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4013      	ands	r3, r2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 808e 	beq.w	80047c2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0310 	and.w	r3, r3, #16
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 8086 	beq.w	80047c2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ba:	2220      	movs	r2, #32
 80046bc:	409a      	lsls	r2, r3
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b05      	cmp	r3, #5
 80046cc:	d136      	bne.n	800473c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 0216 	bic.w	r2, r2, #22
 80046dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	695a      	ldr	r2, [r3, #20]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d103      	bne.n	80046fe <HAL_DMA_IRQHandler+0x1da>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d007      	beq.n	800470e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f022 0208 	bic.w	r2, r2, #8
 800470c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004712:	223f      	movs	r2, #63	; 0x3f
 8004714:	409a      	lsls	r2, r3
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800472e:	2b00      	cmp	r3, #0
 8004730:	d07d      	beq.n	800482e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	4798      	blx	r3
        }
        return;
 800473a:	e078      	b.n	800482e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d01c      	beq.n	8004784 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d108      	bne.n	800476a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475c:	2b00      	cmp	r3, #0
 800475e:	d030      	beq.n	80047c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	4798      	blx	r3
 8004768:	e02b      	b.n	80047c2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476e:	2b00      	cmp	r3, #0
 8004770:	d027      	beq.n	80047c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	4798      	blx	r3
 800477a:	e022      	b.n	80047c2 <HAL_DMA_IRQHandler+0x29e>
 800477c:	2000001c 	.word	0x2000001c
 8004780:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10f      	bne.n	80047b2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 0210 	bic.w	r2, r2, #16
 80047a0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d032      	beq.n	8004830 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d022      	beq.n	800481c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2205      	movs	r2, #5
 80047da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f022 0201 	bic.w	r2, r2, #1
 80047ec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	3301      	adds	r3, #1
 80047f2:	60bb      	str	r3, [r7, #8]
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d307      	bcc.n	800480a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1f2      	bne.n	80047ee <HAL_DMA_IRQHandler+0x2ca>
 8004808:	e000      	b.n	800480c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800480a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004820:	2b00      	cmp	r3, #0
 8004822:	d005      	beq.n	8004830 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	4798      	blx	r3
 800482c:	e000      	b.n	8004830 <HAL_DMA_IRQHandler+0x30c>
        return;
 800482e:	bf00      	nop
    }
  }
}
 8004830:	3718      	adds	r7, #24
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop

08004838 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
 8004844:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004854:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	2b40      	cmp	r3, #64	; 0x40
 8004864:	d108      	bne.n	8004878 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004876:	e007      	b.n	8004888 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	60da      	str	r2, [r3, #12]
}
 8004888:	bf00      	nop
 800488a:	3714      	adds	r7, #20
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	3b10      	subs	r3, #16
 80048a4:	4a14      	ldr	r2, [pc, #80]	; (80048f8 <DMA_CalcBaseAndBitshift+0x64>)
 80048a6:	fba2 2303 	umull	r2, r3, r2, r3
 80048aa:	091b      	lsrs	r3, r3, #4
 80048ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80048ae:	4a13      	ldr	r2, [pc, #76]	; (80048fc <DMA_CalcBaseAndBitshift+0x68>)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4413      	add	r3, r2
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	461a      	mov	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2b03      	cmp	r3, #3
 80048c0:	d909      	bls.n	80048d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80048ca:	f023 0303 	bic.w	r3, r3, #3
 80048ce:	1d1a      	adds	r2, r3, #4
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	659a      	str	r2, [r3, #88]	; 0x58
 80048d4:	e007      	b.n	80048e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80048de:	f023 0303 	bic.w	r3, r3, #3
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	aaaaaaab 	.word	0xaaaaaaab
 80048fc:	0800c580 	.word	0x0800c580

08004900 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004908:	2300      	movs	r3, #0
 800490a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004910:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d11f      	bne.n	800495a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	2b03      	cmp	r3, #3
 800491e:	d855      	bhi.n	80049cc <DMA_CheckFifoParam+0xcc>
 8004920:	a201      	add	r2, pc, #4	; (adr r2, 8004928 <DMA_CheckFifoParam+0x28>)
 8004922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004926:	bf00      	nop
 8004928:	08004939 	.word	0x08004939
 800492c:	0800494b 	.word	0x0800494b
 8004930:	08004939 	.word	0x08004939
 8004934:	080049cd 	.word	0x080049cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d045      	beq.n	80049d0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004948:	e042      	b.n	80049d0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004952:	d13f      	bne.n	80049d4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004958:	e03c      	b.n	80049d4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004962:	d121      	bne.n	80049a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	2b03      	cmp	r3, #3
 8004968:	d836      	bhi.n	80049d8 <DMA_CheckFifoParam+0xd8>
 800496a:	a201      	add	r2, pc, #4	; (adr r2, 8004970 <DMA_CheckFifoParam+0x70>)
 800496c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004970:	08004981 	.word	0x08004981
 8004974:	08004987 	.word	0x08004987
 8004978:	08004981 	.word	0x08004981
 800497c:	08004999 	.word	0x08004999
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	73fb      	strb	r3, [r7, #15]
      break;
 8004984:	e02f      	b.n	80049e6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d024      	beq.n	80049dc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004996:	e021      	b.n	80049dc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80049a0:	d11e      	bne.n	80049e0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80049a6:	e01b      	b.n	80049e0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d902      	bls.n	80049b4 <DMA_CheckFifoParam+0xb4>
 80049ae:	2b03      	cmp	r3, #3
 80049b0:	d003      	beq.n	80049ba <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80049b2:	e018      	b.n	80049e6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	73fb      	strb	r3, [r7, #15]
      break;
 80049b8:	e015      	b.n	80049e6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00e      	beq.n	80049e4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	73fb      	strb	r3, [r7, #15]
      break;
 80049ca:	e00b      	b.n	80049e4 <DMA_CheckFifoParam+0xe4>
      break;
 80049cc:	bf00      	nop
 80049ce:	e00a      	b.n	80049e6 <DMA_CheckFifoParam+0xe6>
      break;
 80049d0:	bf00      	nop
 80049d2:	e008      	b.n	80049e6 <DMA_CheckFifoParam+0xe6>
      break;
 80049d4:	bf00      	nop
 80049d6:	e006      	b.n	80049e6 <DMA_CheckFifoParam+0xe6>
      break;
 80049d8:	bf00      	nop
 80049da:	e004      	b.n	80049e6 <DMA_CheckFifoParam+0xe6>
      break;
 80049dc:	bf00      	nop
 80049de:	e002      	b.n	80049e6 <DMA_CheckFifoParam+0xe6>
      break;   
 80049e0:	bf00      	nop
 80049e2:	e000      	b.n	80049e6 <DMA_CheckFifoParam+0xe6>
      break;
 80049e4:	bf00      	nop
    }
  } 
  
  return status; 
 80049e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3714      	adds	r7, #20
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b089      	sub	sp, #36	; 0x24
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a02:	2300      	movs	r3, #0
 8004a04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a06:	2300      	movs	r3, #0
 8004a08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	61fb      	str	r3, [r7, #28]
 8004a0e:	e16b      	b.n	8004ce8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a10:	2201      	movs	r2, #1
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	fa02 f303 	lsl.w	r3, r2, r3
 8004a18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	4013      	ands	r3, r2
 8004a22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	f040 815a 	bne.w	8004ce2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d00b      	beq.n	8004a4e <HAL_GPIO_Init+0x5a>
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d007      	beq.n	8004a4e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004a42:	2b11      	cmp	r3, #17
 8004a44:	d003      	beq.n	8004a4e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	2b12      	cmp	r3, #18
 8004a4c:	d130      	bne.n	8004ab0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	005b      	lsls	r3, r3, #1
 8004a58:	2203      	movs	r2, #3
 8004a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5e:	43db      	mvns	r3, r3
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	4013      	ands	r3, r2
 8004a64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	68da      	ldr	r2, [r3, #12]
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	005b      	lsls	r3, r3, #1
 8004a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a72:	69ba      	ldr	r2, [r7, #24]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a84:	2201      	movs	r2, #1
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8c:	43db      	mvns	r3, r3
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	4013      	ands	r3, r2
 8004a92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	091b      	lsrs	r3, r3, #4
 8004a9a:	f003 0201 	and.w	r2, r3, #1
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	69ba      	ldr	r2, [r7, #24]
 8004aae:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	005b      	lsls	r3, r3, #1
 8004aba:	2203      	movs	r2, #3
 8004abc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac0:	43db      	mvns	r3, r3
 8004ac2:	69ba      	ldr	r2, [r7, #24]
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	689a      	ldr	r2, [r3, #8]
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	005b      	lsls	r3, r3, #1
 8004ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d003      	beq.n	8004af0 <HAL_GPIO_Init+0xfc>
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	2b12      	cmp	r3, #18
 8004aee:	d123      	bne.n	8004b38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	08da      	lsrs	r2, r3, #3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3208      	adds	r2, #8
 8004af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004afc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	f003 0307 	and.w	r3, r3, #7
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	220f      	movs	r2, #15
 8004b08:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0c:	43db      	mvns	r3, r3
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	4013      	ands	r3, r2
 8004b12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	691a      	ldr	r2, [r3, #16]
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	f003 0307 	and.w	r3, r3, #7
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	fa02 f303 	lsl.w	r3, r2, r3
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	08da      	lsrs	r2, r3, #3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	3208      	adds	r2, #8
 8004b32:	69b9      	ldr	r1, [r7, #24]
 8004b34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	005b      	lsls	r3, r3, #1
 8004b42:	2203      	movs	r2, #3
 8004b44:	fa02 f303 	lsl.w	r3, r2, r3
 8004b48:	43db      	mvns	r3, r3
 8004b4a:	69ba      	ldr	r2, [r7, #24]
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f003 0203 	and.w	r2, r3, #3
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	69ba      	ldr	r2, [r7, #24]
 8004b6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f000 80b4 	beq.w	8004ce2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	60fb      	str	r3, [r7, #12]
 8004b7e:	4b5f      	ldr	r3, [pc, #380]	; (8004cfc <HAL_GPIO_Init+0x308>)
 8004b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b82:	4a5e      	ldr	r2, [pc, #376]	; (8004cfc <HAL_GPIO_Init+0x308>)
 8004b84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b88:	6453      	str	r3, [r2, #68]	; 0x44
 8004b8a:	4b5c      	ldr	r3, [pc, #368]	; (8004cfc <HAL_GPIO_Init+0x308>)
 8004b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b92:	60fb      	str	r3, [r7, #12]
 8004b94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b96:	4a5a      	ldr	r2, [pc, #360]	; (8004d00 <HAL_GPIO_Init+0x30c>)
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	089b      	lsrs	r3, r3, #2
 8004b9c:	3302      	adds	r3, #2
 8004b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	220f      	movs	r2, #15
 8004bae:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb2:	43db      	mvns	r3, r3
 8004bb4:	69ba      	ldr	r2, [r7, #24]
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a51      	ldr	r2, [pc, #324]	; (8004d04 <HAL_GPIO_Init+0x310>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d02b      	beq.n	8004c1a <HAL_GPIO_Init+0x226>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a50      	ldr	r2, [pc, #320]	; (8004d08 <HAL_GPIO_Init+0x314>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d025      	beq.n	8004c16 <HAL_GPIO_Init+0x222>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a4f      	ldr	r2, [pc, #316]	; (8004d0c <HAL_GPIO_Init+0x318>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d01f      	beq.n	8004c12 <HAL_GPIO_Init+0x21e>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a4e      	ldr	r2, [pc, #312]	; (8004d10 <HAL_GPIO_Init+0x31c>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d019      	beq.n	8004c0e <HAL_GPIO_Init+0x21a>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a4d      	ldr	r2, [pc, #308]	; (8004d14 <HAL_GPIO_Init+0x320>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d013      	beq.n	8004c0a <HAL_GPIO_Init+0x216>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a4c      	ldr	r2, [pc, #304]	; (8004d18 <HAL_GPIO_Init+0x324>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d00d      	beq.n	8004c06 <HAL_GPIO_Init+0x212>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a4b      	ldr	r2, [pc, #300]	; (8004d1c <HAL_GPIO_Init+0x328>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d007      	beq.n	8004c02 <HAL_GPIO_Init+0x20e>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a4a      	ldr	r2, [pc, #296]	; (8004d20 <HAL_GPIO_Init+0x32c>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d101      	bne.n	8004bfe <HAL_GPIO_Init+0x20a>
 8004bfa:	2307      	movs	r3, #7
 8004bfc:	e00e      	b.n	8004c1c <HAL_GPIO_Init+0x228>
 8004bfe:	2308      	movs	r3, #8
 8004c00:	e00c      	b.n	8004c1c <HAL_GPIO_Init+0x228>
 8004c02:	2306      	movs	r3, #6
 8004c04:	e00a      	b.n	8004c1c <HAL_GPIO_Init+0x228>
 8004c06:	2305      	movs	r3, #5
 8004c08:	e008      	b.n	8004c1c <HAL_GPIO_Init+0x228>
 8004c0a:	2304      	movs	r3, #4
 8004c0c:	e006      	b.n	8004c1c <HAL_GPIO_Init+0x228>
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e004      	b.n	8004c1c <HAL_GPIO_Init+0x228>
 8004c12:	2302      	movs	r3, #2
 8004c14:	e002      	b.n	8004c1c <HAL_GPIO_Init+0x228>
 8004c16:	2301      	movs	r3, #1
 8004c18:	e000      	b.n	8004c1c <HAL_GPIO_Init+0x228>
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	69fa      	ldr	r2, [r7, #28]
 8004c1e:	f002 0203 	and.w	r2, r2, #3
 8004c22:	0092      	lsls	r2, r2, #2
 8004c24:	4093      	lsls	r3, r2
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c2c:	4934      	ldr	r1, [pc, #208]	; (8004d00 <HAL_GPIO_Init+0x30c>)
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	089b      	lsrs	r3, r3, #2
 8004c32:	3302      	adds	r3, #2
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c3a:	4b3a      	ldr	r3, [pc, #232]	; (8004d24 <HAL_GPIO_Init+0x330>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	43db      	mvns	r3, r3
 8004c44:	69ba      	ldr	r2, [r7, #24]
 8004c46:	4013      	ands	r3, r2
 8004c48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d003      	beq.n	8004c5e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004c56:	69ba      	ldr	r2, [r7, #24]
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c5e:	4a31      	ldr	r2, [pc, #196]	; (8004d24 <HAL_GPIO_Init+0x330>)
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004c64:	4b2f      	ldr	r3, [pc, #188]	; (8004d24 <HAL_GPIO_Init+0x330>)
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	43db      	mvns	r3, r3
 8004c6e:	69ba      	ldr	r2, [r7, #24]
 8004c70:	4013      	ands	r3, r2
 8004c72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d003      	beq.n	8004c88 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004c80:	69ba      	ldr	r2, [r7, #24]
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c88:	4a26      	ldr	r2, [pc, #152]	; (8004d24 <HAL_GPIO_Init+0x330>)
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c8e:	4b25      	ldr	r3, [pc, #148]	; (8004d24 <HAL_GPIO_Init+0x330>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	43db      	mvns	r3, r3
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004caa:	69ba      	ldr	r2, [r7, #24]
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004cb2:	4a1c      	ldr	r2, [pc, #112]	; (8004d24 <HAL_GPIO_Init+0x330>)
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004cb8:	4b1a      	ldr	r3, [pc, #104]	; (8004d24 <HAL_GPIO_Init+0x330>)
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	43db      	mvns	r3, r3
 8004cc2:	69ba      	ldr	r2, [r7, #24]
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d003      	beq.n	8004cdc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004cdc:	4a11      	ldr	r2, [pc, #68]	; (8004d24 <HAL_GPIO_Init+0x330>)
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	61fb      	str	r3, [r7, #28]
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	2b0f      	cmp	r3, #15
 8004cec:	f67f ae90 	bls.w	8004a10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004cf0:	bf00      	nop
 8004cf2:	3724      	adds	r7, #36	; 0x24
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr
 8004cfc:	40023800 	.word	0x40023800
 8004d00:	40013800 	.word	0x40013800
 8004d04:	40020000 	.word	0x40020000
 8004d08:	40020400 	.word	0x40020400
 8004d0c:	40020800 	.word	0x40020800
 8004d10:	40020c00 	.word	0x40020c00
 8004d14:	40021000 	.word	0x40021000
 8004d18:	40021400 	.word	0x40021400
 8004d1c:	40021800 	.word	0x40021800
 8004d20:	40021c00 	.word	0x40021c00
 8004d24:	40013c00 	.word	0x40013c00

08004d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	460b      	mov	r3, r1
 8004d32:	807b      	strh	r3, [r7, #2]
 8004d34:	4613      	mov	r3, r2
 8004d36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d38:	787b      	ldrb	r3, [r7, #1]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d003      	beq.n	8004d46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d3e:	887a      	ldrh	r2, [r7, #2]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004d44:	e003      	b.n	8004d4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004d46:	887b      	ldrh	r3, [r7, #2]
 8004d48:	041a      	lsls	r2, r3, #16
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	619a      	str	r2, [r3, #24]
}
 8004d4e:	bf00      	nop
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
	...

08004d5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e11f      	b.n	8004fae <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d106      	bne.n	8004d88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7fe f860 	bl	8002e48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2224      	movs	r2, #36	; 0x24
 8004d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f022 0201 	bic.w	r2, r2, #1
 8004d9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004dbe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004dc0:	f001 fd1a 	bl	80067f8 <HAL_RCC_GetPCLK1Freq>
 8004dc4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	4a7b      	ldr	r2, [pc, #492]	; (8004fb8 <HAL_I2C_Init+0x25c>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d807      	bhi.n	8004de0 <HAL_I2C_Init+0x84>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	4a7a      	ldr	r2, [pc, #488]	; (8004fbc <HAL_I2C_Init+0x260>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	bf94      	ite	ls
 8004dd8:	2301      	movls	r3, #1
 8004dda:	2300      	movhi	r3, #0
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	e006      	b.n	8004dee <HAL_I2C_Init+0x92>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	4a77      	ldr	r2, [pc, #476]	; (8004fc0 <HAL_I2C_Init+0x264>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	bf94      	ite	ls
 8004de8:	2301      	movls	r3, #1
 8004dea:	2300      	movhi	r3, #0
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d001      	beq.n	8004df6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e0db      	b.n	8004fae <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	4a72      	ldr	r2, [pc, #456]	; (8004fc4 <HAL_I2C_Init+0x268>)
 8004dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfe:	0c9b      	lsrs	r3, r3, #18
 8004e00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68ba      	ldr	r2, [r7, #8]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	6a1b      	ldr	r3, [r3, #32]
 8004e1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	4a64      	ldr	r2, [pc, #400]	; (8004fb8 <HAL_I2C_Init+0x25c>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d802      	bhi.n	8004e30 <HAL_I2C_Init+0xd4>
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	e009      	b.n	8004e44 <HAL_I2C_Init+0xe8>
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004e36:	fb02 f303 	mul.w	r3, r2, r3
 8004e3a:	4a63      	ldr	r2, [pc, #396]	; (8004fc8 <HAL_I2C_Init+0x26c>)
 8004e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e40:	099b      	lsrs	r3, r3, #6
 8004e42:	3301      	adds	r3, #1
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	6812      	ldr	r2, [r2, #0]
 8004e48:	430b      	orrs	r3, r1
 8004e4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	69db      	ldr	r3, [r3, #28]
 8004e52:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004e56:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	4956      	ldr	r1, [pc, #344]	; (8004fb8 <HAL_I2C_Init+0x25c>)
 8004e60:	428b      	cmp	r3, r1
 8004e62:	d80d      	bhi.n	8004e80 <HAL_I2C_Init+0x124>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	1e59      	subs	r1, r3, #1
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	005b      	lsls	r3, r3, #1
 8004e6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e72:	3301      	adds	r3, #1
 8004e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	bf38      	it	cc
 8004e7c:	2304      	movcc	r3, #4
 8004e7e:	e04f      	b.n	8004f20 <HAL_I2C_Init+0x1c4>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d111      	bne.n	8004eac <HAL_I2C_Init+0x150>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	1e58      	subs	r0, r3, #1
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6859      	ldr	r1, [r3, #4]
 8004e90:	460b      	mov	r3, r1
 8004e92:	005b      	lsls	r3, r3, #1
 8004e94:	440b      	add	r3, r1
 8004e96:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	bf0c      	ite	eq
 8004ea4:	2301      	moveq	r3, #1
 8004ea6:	2300      	movne	r3, #0
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	e012      	b.n	8004ed2 <HAL_I2C_Init+0x176>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	1e58      	subs	r0, r3, #1
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6859      	ldr	r1, [r3, #4]
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	440b      	add	r3, r1
 8004eba:	0099      	lsls	r1, r3, #2
 8004ebc:	440b      	add	r3, r1
 8004ebe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	bf0c      	ite	eq
 8004ecc:	2301      	moveq	r3, #1
 8004ece:	2300      	movne	r3, #0
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d001      	beq.n	8004eda <HAL_I2C_Init+0x17e>
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e022      	b.n	8004f20 <HAL_I2C_Init+0x1c4>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10e      	bne.n	8004f00 <HAL_I2C_Init+0x1a4>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	1e58      	subs	r0, r3, #1
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6859      	ldr	r1, [r3, #4]
 8004eea:	460b      	mov	r3, r1
 8004eec:	005b      	lsls	r3, r3, #1
 8004eee:	440b      	add	r3, r1
 8004ef0:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004efe:	e00f      	b.n	8004f20 <HAL_I2C_Init+0x1c4>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	1e58      	subs	r0, r3, #1
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6859      	ldr	r1, [r3, #4]
 8004f08:	460b      	mov	r3, r1
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	440b      	add	r3, r1
 8004f0e:	0099      	lsls	r1, r3, #2
 8004f10:	440b      	add	r3, r1
 8004f12:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f16:	3301      	adds	r3, #1
 8004f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f20:	6879      	ldr	r1, [r7, #4]
 8004f22:	6809      	ldr	r1, [r1, #0]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	69da      	ldr	r2, [r3, #28]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	431a      	orrs	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004f4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	6911      	ldr	r1, [r2, #16]
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	68d2      	ldr	r2, [r2, #12]
 8004f5a:	4311      	orrs	r1, r2
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	6812      	ldr	r2, [r2, #0]
 8004f60:	430b      	orrs	r3, r1
 8004f62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	695a      	ldr	r2, [r3, #20]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	431a      	orrs	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f042 0201 	orr.w	r2, r2, #1
 8004f8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2220      	movs	r2, #32
 8004f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	000186a0 	.word	0x000186a0
 8004fbc:	001e847f 	.word	0x001e847f
 8004fc0:	003d08ff 	.word	0x003d08ff
 8004fc4:	431bde83 	.word	0x431bde83
 8004fc8:	10624dd3 	.word	0x10624dd3

08004fcc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b088      	sub	sp, #32
 8004fd0:	af02      	add	r7, sp, #8
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	607a      	str	r2, [r7, #4]
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	460b      	mov	r3, r1
 8004fda:	817b      	strh	r3, [r7, #10]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004fe0:	f7fe fb66 	bl	80036b0 <HAL_GetTick>
 8004fe4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b20      	cmp	r3, #32
 8004ff0:	f040 80e0 	bne.w	80051b4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	9300      	str	r3, [sp, #0]
 8004ff8:	2319      	movs	r3, #25
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	4970      	ldr	r1, [pc, #448]	; (80051c0 <HAL_I2C_Master_Transmit+0x1f4>)
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f000 fde4 	bl	8005bcc <I2C_WaitOnFlagUntilTimeout>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d001      	beq.n	800500e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800500a:	2302      	movs	r3, #2
 800500c:	e0d3      	b.n	80051b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005014:	2b01      	cmp	r3, #1
 8005016:	d101      	bne.n	800501c <HAL_I2C_Master_Transmit+0x50>
 8005018:	2302      	movs	r3, #2
 800501a:	e0cc      	b.n	80051b6 <HAL_I2C_Master_Transmit+0x1ea>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b01      	cmp	r3, #1
 8005030:	d007      	beq.n	8005042 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f042 0201 	orr.w	r2, r2, #1
 8005040:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005050:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2221      	movs	r2, #33	; 0x21
 8005056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2210      	movs	r2, #16
 800505e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	893a      	ldrh	r2, [r7, #8]
 8005072:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005078:	b29a      	uxth	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	4a50      	ldr	r2, [pc, #320]	; (80051c4 <HAL_I2C_Master_Transmit+0x1f8>)
 8005082:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005084:	8979      	ldrh	r1, [r7, #10]
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	6a3a      	ldr	r2, [r7, #32]
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f000 fbbc 	bl	8005808 <I2C_MasterRequestWrite>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d001      	beq.n	800509a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e08d      	b.n	80051b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800509a:	2300      	movs	r3, #0
 800509c:	613b      	str	r3, [r7, #16]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	695b      	ldr	r3, [r3, #20]
 80050a4:	613b      	str	r3, [r7, #16]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	613b      	str	r3, [r7, #16]
 80050ae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80050b0:	e066      	b.n	8005180 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	6a39      	ldr	r1, [r7, #32]
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	f000 fe5e 	bl	8005d78 <I2C_WaitOnTXEFlagUntilTimeout>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00d      	beq.n	80050de <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c6:	2b04      	cmp	r3, #4
 80050c8:	d107      	bne.n	80050da <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e06b      	b.n	80051b6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e2:	781a      	ldrb	r2, [r3, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ee:	1c5a      	adds	r2, r3, #1
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	3b01      	subs	r3, #1
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005106:	3b01      	subs	r3, #1
 8005108:	b29a      	uxth	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	695b      	ldr	r3, [r3, #20]
 8005114:	f003 0304 	and.w	r3, r3, #4
 8005118:	2b04      	cmp	r3, #4
 800511a:	d11b      	bne.n	8005154 <HAL_I2C_Master_Transmit+0x188>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005120:	2b00      	cmp	r3, #0
 8005122:	d017      	beq.n	8005154 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005128:	781a      	ldrb	r2, [r3, #0]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005134:	1c5a      	adds	r2, r3, #1
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800513e:	b29b      	uxth	r3, r3
 8005140:	3b01      	subs	r3, #1
 8005142:	b29a      	uxth	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800514c:	3b01      	subs	r3, #1
 800514e:	b29a      	uxth	r2, r3
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	6a39      	ldr	r1, [r7, #32]
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f000 fe4e 	bl	8005dfa <I2C_WaitOnBTFFlagUntilTimeout>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00d      	beq.n	8005180 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005168:	2b04      	cmp	r3, #4
 800516a:	d107      	bne.n	800517c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800517a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e01a      	b.n	80051b6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005184:	2b00      	cmp	r3, #0
 8005186:	d194      	bne.n	80050b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005196:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2220      	movs	r2, #32
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80051b0:	2300      	movs	r3, #0
 80051b2:	e000      	b.n	80051b6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80051b4:	2302      	movs	r3, #2
  }
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3718      	adds	r7, #24
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	00100002 	.word	0x00100002
 80051c4:	ffff0000 	.word	0xffff0000

080051c8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b08c      	sub	sp, #48	; 0x30
 80051cc:	af02      	add	r7, sp, #8
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	607a      	str	r2, [r7, #4]
 80051d2:	461a      	mov	r2, r3
 80051d4:	460b      	mov	r3, r1
 80051d6:	817b      	strh	r3, [r7, #10]
 80051d8:	4613      	mov	r3, r2
 80051da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80051dc:	f7fe fa68 	bl	80036b0 <HAL_GetTick>
 80051e0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b20      	cmp	r3, #32
 80051ec:	f040 820b 	bne.w	8005606 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80051f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	2319      	movs	r3, #25
 80051f6:	2201      	movs	r2, #1
 80051f8:	497c      	ldr	r1, [pc, #496]	; (80053ec <HAL_I2C_Master_Receive+0x224>)
 80051fa:	68f8      	ldr	r0, [r7, #12]
 80051fc:	f000 fce6 	bl	8005bcc <I2C_WaitOnFlagUntilTimeout>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d001      	beq.n	800520a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005206:	2302      	movs	r3, #2
 8005208:	e1fe      	b.n	8005608 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005210:	2b01      	cmp	r3, #1
 8005212:	d101      	bne.n	8005218 <HAL_I2C_Master_Receive+0x50>
 8005214:	2302      	movs	r3, #2
 8005216:	e1f7      	b.n	8005608 <HAL_I2C_Master_Receive+0x440>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	2b01      	cmp	r3, #1
 800522c:	d007      	beq.n	800523e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f042 0201 	orr.w	r2, r2, #1
 800523c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800524c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2222      	movs	r2, #34	; 0x22
 8005252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2210      	movs	r2, #16
 800525a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2200      	movs	r2, #0
 8005262:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	893a      	ldrh	r2, [r7, #8]
 800526e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005274:	b29a      	uxth	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	4a5c      	ldr	r2, [pc, #368]	; (80053f0 <HAL_I2C_Master_Receive+0x228>)
 800527e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005280:	8979      	ldrh	r1, [r7, #10]
 8005282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f000 fb40 	bl	800590c <I2C_MasterRequestRead>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d001      	beq.n	8005296 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e1b8      	b.n	8005608 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800529a:	2b00      	cmp	r3, #0
 800529c:	d113      	bne.n	80052c6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800529e:	2300      	movs	r3, #0
 80052a0:	623b      	str	r3, [r7, #32]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	695b      	ldr	r3, [r3, #20]
 80052a8:	623b      	str	r3, [r7, #32]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	623b      	str	r3, [r7, #32]
 80052b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052c2:	601a      	str	r2, [r3, #0]
 80052c4:	e18c      	b.n	80055e0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d11b      	bne.n	8005306 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052de:	2300      	movs	r3, #0
 80052e0:	61fb      	str	r3, [r7, #28]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	695b      	ldr	r3, [r3, #20]
 80052e8:	61fb      	str	r3, [r7, #28]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	61fb      	str	r3, [r7, #28]
 80052f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005302:	601a      	str	r2, [r3, #0]
 8005304:	e16c      	b.n	80055e0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800530a:	2b02      	cmp	r3, #2
 800530c:	d11b      	bne.n	8005346 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800531c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800532c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800532e:	2300      	movs	r3, #0
 8005330:	61bb      	str	r3, [r7, #24]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	61bb      	str	r3, [r7, #24]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	61bb      	str	r3, [r7, #24]
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	e14c      	b.n	80055e0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005354:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005356:	2300      	movs	r3, #0
 8005358:	617b      	str	r3, [r7, #20]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	617b      	str	r3, [r7, #20]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	617b      	str	r3, [r7, #20]
 800536a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800536c:	e138      	b.n	80055e0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005372:	2b03      	cmp	r3, #3
 8005374:	f200 80f1 	bhi.w	800555a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800537c:	2b01      	cmp	r3, #1
 800537e:	d123      	bne.n	80053c8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005382:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	f000 fd79 	bl	8005e7c <I2C_WaitOnRXNEFlagUntilTimeout>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d001      	beq.n	8005394 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e139      	b.n	8005608 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	691a      	ldr	r2, [r3, #16]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	b2d2      	uxtb	r2, r2
 80053a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a6:	1c5a      	adds	r2, r3, #1
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053b0:	3b01      	subs	r3, #1
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053bc:	b29b      	uxth	r3, r3
 80053be:	3b01      	subs	r3, #1
 80053c0:	b29a      	uxth	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80053c6:	e10b      	b.n	80055e0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d14e      	bne.n	800546e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	9300      	str	r3, [sp, #0]
 80053d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d6:	2200      	movs	r2, #0
 80053d8:	4906      	ldr	r1, [pc, #24]	; (80053f4 <HAL_I2C_Master_Receive+0x22c>)
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f000 fbf6 	bl	8005bcc <I2C_WaitOnFlagUntilTimeout>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d008      	beq.n	80053f8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e10e      	b.n	8005608 <HAL_I2C_Master_Receive+0x440>
 80053ea:	bf00      	nop
 80053ec:	00100002 	.word	0x00100002
 80053f0:	ffff0000 	.word	0xffff0000
 80053f4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005406:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	691a      	ldr	r2, [r3, #16]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005412:	b2d2      	uxtb	r2, r2
 8005414:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541a:	1c5a      	adds	r2, r3, #1
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005424:	3b01      	subs	r3, #1
 8005426:	b29a      	uxth	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005430:	b29b      	uxth	r3, r3
 8005432:	3b01      	subs	r3, #1
 8005434:	b29a      	uxth	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	691a      	ldr	r2, [r3, #16]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005444:	b2d2      	uxtb	r2, r2
 8005446:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544c:	1c5a      	adds	r2, r3, #1
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005456:	3b01      	subs	r3, #1
 8005458:	b29a      	uxth	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005462:	b29b      	uxth	r3, r3
 8005464:	3b01      	subs	r3, #1
 8005466:	b29a      	uxth	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800546c:	e0b8      	b.n	80055e0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	9300      	str	r3, [sp, #0]
 8005472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005474:	2200      	movs	r2, #0
 8005476:	4966      	ldr	r1, [pc, #408]	; (8005610 <HAL_I2C_Master_Receive+0x448>)
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	f000 fba7 	bl	8005bcc <I2C_WaitOnFlagUntilTimeout>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d001      	beq.n	8005488 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e0bf      	b.n	8005608 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005496:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	691a      	ldr	r2, [r3, #16]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a2:	b2d2      	uxtb	r2, r2
 80054a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054aa:	1c5a      	adds	r2, r3, #1
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054b4:	3b01      	subs	r3, #1
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	3b01      	subs	r3, #1
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d0:	2200      	movs	r2, #0
 80054d2:	494f      	ldr	r1, [pc, #316]	; (8005610 <HAL_I2C_Master_Receive+0x448>)
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f000 fb79 	bl	8005bcc <I2C_WaitOnFlagUntilTimeout>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d001      	beq.n	80054e4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e091      	b.n	8005608 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	691a      	ldr	r2, [r3, #16]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fe:	b2d2      	uxtb	r2, r2
 8005500:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005506:	1c5a      	adds	r2, r3, #1
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005510:	3b01      	subs	r3, #1
 8005512:	b29a      	uxth	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800551c:	b29b      	uxth	r3, r3
 800551e:	3b01      	subs	r3, #1
 8005520:	b29a      	uxth	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	691a      	ldr	r2, [r3, #16]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005530:	b2d2      	uxtb	r2, r2
 8005532:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005538:	1c5a      	adds	r2, r3, #1
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005542:	3b01      	subs	r3, #1
 8005544:	b29a      	uxth	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800554e:	b29b      	uxth	r3, r3
 8005550:	3b01      	subs	r3, #1
 8005552:	b29a      	uxth	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005558:	e042      	b.n	80055e0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800555a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800555c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	f000 fc8c 	bl	8005e7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d001      	beq.n	800556e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e04c      	b.n	8005608 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	691a      	ldr	r2, [r3, #16]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005578:	b2d2      	uxtb	r2, r2
 800557a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005580:	1c5a      	adds	r2, r3, #1
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800558a:	3b01      	subs	r3, #1
 800558c:	b29a      	uxth	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005596:	b29b      	uxth	r3, r3
 8005598:	3b01      	subs	r3, #1
 800559a:	b29a      	uxth	r2, r3
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	f003 0304 	and.w	r3, r3, #4
 80055aa:	2b04      	cmp	r3, #4
 80055ac:	d118      	bne.n	80055e0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	691a      	ldr	r2, [r3, #16]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b8:	b2d2      	uxtb	r2, r2
 80055ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c0:	1c5a      	adds	r2, r3, #1
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ca:	3b01      	subs	r3, #1
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	3b01      	subs	r3, #1
 80055da:	b29a      	uxth	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f47f aec2 	bne.w	800536e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2220      	movs	r2, #32
 80055ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005602:	2300      	movs	r3, #0
 8005604:	e000      	b.n	8005608 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005606:	2302      	movs	r3, #2
  }
}
 8005608:	4618      	mov	r0, r3
 800560a:	3728      	adds	r7, #40	; 0x28
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	00010004 	.word	0x00010004

08005614 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b088      	sub	sp, #32
 8005618:	af02      	add	r7, sp, #8
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	4608      	mov	r0, r1
 800561e:	4611      	mov	r1, r2
 8005620:	461a      	mov	r2, r3
 8005622:	4603      	mov	r3, r0
 8005624:	817b      	strh	r3, [r7, #10]
 8005626:	460b      	mov	r3, r1
 8005628:	813b      	strh	r3, [r7, #8]
 800562a:	4613      	mov	r3, r2
 800562c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800562e:	f7fe f83f 	bl	80036b0 <HAL_GetTick>
 8005632:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800563a:	b2db      	uxtb	r3, r3
 800563c:	2b20      	cmp	r3, #32
 800563e:	f040 80d9 	bne.w	80057f4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	9300      	str	r3, [sp, #0]
 8005646:	2319      	movs	r3, #25
 8005648:	2201      	movs	r2, #1
 800564a:	496d      	ldr	r1, [pc, #436]	; (8005800 <HAL_I2C_Mem_Write+0x1ec>)
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f000 fabd 	bl	8005bcc <I2C_WaitOnFlagUntilTimeout>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d001      	beq.n	800565c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005658:	2302      	movs	r3, #2
 800565a:	e0cc      	b.n	80057f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005662:	2b01      	cmp	r3, #1
 8005664:	d101      	bne.n	800566a <HAL_I2C_Mem_Write+0x56>
 8005666:	2302      	movs	r3, #2
 8005668:	e0c5      	b.n	80057f6 <HAL_I2C_Mem_Write+0x1e2>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	2b01      	cmp	r3, #1
 800567e:	d007      	beq.n	8005690 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f042 0201 	orr.w	r2, r2, #1
 800568e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800569e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2221      	movs	r2, #33	; 0x21
 80056a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2240      	movs	r2, #64	; 0x40
 80056ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6a3a      	ldr	r2, [r7, #32]
 80056ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80056c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	4a4d      	ldr	r2, [pc, #308]	; (8005804 <HAL_I2C_Mem_Write+0x1f0>)
 80056d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056d2:	88f8      	ldrh	r0, [r7, #6]
 80056d4:	893a      	ldrh	r2, [r7, #8]
 80056d6:	8979      	ldrh	r1, [r7, #10]
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	9301      	str	r3, [sp, #4]
 80056dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056de:	9300      	str	r3, [sp, #0]
 80056e0:	4603      	mov	r3, r0
 80056e2:	68f8      	ldr	r0, [r7, #12]
 80056e4:	f000 f9de 	bl	8005aa4 <I2C_RequestMemoryWrite>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d052      	beq.n	8005794 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e081      	b.n	80057f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f000 fb3e 	bl	8005d78 <I2C_WaitOnTXEFlagUntilTimeout>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00d      	beq.n	800571e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005706:	2b04      	cmp	r3, #4
 8005708:	d107      	bne.n	800571a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005718:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e06b      	b.n	80057f6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005722:	781a      	ldrb	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572e:	1c5a      	adds	r2, r3, #1
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005738:	3b01      	subs	r3, #1
 800573a:	b29a      	uxth	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005744:	b29b      	uxth	r3, r3
 8005746:	3b01      	subs	r3, #1
 8005748:	b29a      	uxth	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	f003 0304 	and.w	r3, r3, #4
 8005758:	2b04      	cmp	r3, #4
 800575a:	d11b      	bne.n	8005794 <HAL_I2C_Mem_Write+0x180>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005760:	2b00      	cmp	r3, #0
 8005762:	d017      	beq.n	8005794 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005768:	781a      	ldrb	r2, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005774:	1c5a      	adds	r2, r3, #1
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800577e:	3b01      	subs	r3, #1
 8005780:	b29a      	uxth	r2, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800578a:	b29b      	uxth	r3, r3
 800578c:	3b01      	subs	r3, #1
 800578e:	b29a      	uxth	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1aa      	bne.n	80056f2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f000 fb2a 	bl	8005dfa <I2C_WaitOnBTFFlagUntilTimeout>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00d      	beq.n	80057c8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b0:	2b04      	cmp	r3, #4
 80057b2:	d107      	bne.n	80057c4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057c2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e016      	b.n	80057f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2220      	movs	r2, #32
 80057dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80057f0:	2300      	movs	r3, #0
 80057f2:	e000      	b.n	80057f6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80057f4:	2302      	movs	r3, #2
  }
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3718      	adds	r7, #24
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	00100002 	.word	0x00100002
 8005804:	ffff0000 	.word	0xffff0000

08005808 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b088      	sub	sp, #32
 800580c:	af02      	add	r7, sp, #8
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	607a      	str	r2, [r7, #4]
 8005812:	603b      	str	r3, [r7, #0]
 8005814:	460b      	mov	r3, r1
 8005816:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	2b08      	cmp	r3, #8
 8005822:	d006      	beq.n	8005832 <I2C_MasterRequestWrite+0x2a>
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d003      	beq.n	8005832 <I2C_MasterRequestWrite+0x2a>
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005830:	d108      	bne.n	8005844 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005840:	601a      	str	r2, [r3, #0]
 8005842:	e00b      	b.n	800585c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005848:	2b12      	cmp	r3, #18
 800584a:	d107      	bne.n	800585c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800585a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	9300      	str	r3, [sp, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f000 f9af 	bl	8005bcc <I2C_WaitOnFlagUntilTimeout>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00c      	beq.n	800588e <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800587e:	2b00      	cmp	r3, #0
 8005880:	d003      	beq.n	800588a <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005888:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e035      	b.n	80058fa <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005896:	d108      	bne.n	80058aa <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005898:	897b      	ldrh	r3, [r7, #10]
 800589a:	b2db      	uxtb	r3, r3
 800589c:	461a      	mov	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80058a6:	611a      	str	r2, [r3, #16]
 80058a8:	e01b      	b.n	80058e2 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80058aa:	897b      	ldrh	r3, [r7, #10]
 80058ac:	11db      	asrs	r3, r3, #7
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	f003 0306 	and.w	r3, r3, #6
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	f063 030f 	orn	r3, r3, #15
 80058ba:	b2da      	uxtb	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	490f      	ldr	r1, [pc, #60]	; (8005904 <I2C_MasterRequestWrite+0xfc>)
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f000 f9d6 	bl	8005c7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d001      	beq.n	80058d8 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e010      	b.n	80058fa <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80058d8:	897b      	ldrh	r3, [r7, #10]
 80058da:	b2da      	uxtb	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	4908      	ldr	r1, [pc, #32]	; (8005908 <I2C_MasterRequestWrite+0x100>)
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f000 f9c6 	bl	8005c7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d001      	beq.n	80058f8 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e000      	b.n	80058fa <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3718      	adds	r7, #24
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	00010008 	.word	0x00010008
 8005908:	00010002 	.word	0x00010002

0800590c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b088      	sub	sp, #32
 8005910:	af02      	add	r7, sp, #8
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	607a      	str	r2, [r7, #4]
 8005916:	603b      	str	r3, [r7, #0]
 8005918:	460b      	mov	r3, r1
 800591a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005920:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005930:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	2b08      	cmp	r3, #8
 8005936:	d006      	beq.n	8005946 <I2C_MasterRequestRead+0x3a>
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d003      	beq.n	8005946 <I2C_MasterRequestRead+0x3a>
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005944:	d108      	bne.n	8005958 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005954:	601a      	str	r2, [r3, #0]
 8005956:	e00b      	b.n	8005970 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595c:	2b11      	cmp	r3, #17
 800595e:	d107      	bne.n	8005970 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800596e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	9300      	str	r3, [sp, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f000 f925 	bl	8005bcc <I2C_WaitOnFlagUntilTimeout>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00c      	beq.n	80059a2 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005992:	2b00      	cmp	r3, #0
 8005994:	d003      	beq.n	800599e <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f44f 7200 	mov.w	r2, #512	; 0x200
 800599c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e078      	b.n	8005a94 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059aa:	d108      	bne.n	80059be <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80059ac:	897b      	ldrh	r3, [r7, #10]
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	f043 0301 	orr.w	r3, r3, #1
 80059b4:	b2da      	uxtb	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	611a      	str	r2, [r3, #16]
 80059bc:	e05e      	b.n	8005a7c <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80059be:	897b      	ldrh	r3, [r7, #10]
 80059c0:	11db      	asrs	r3, r3, #7
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	f003 0306 	and.w	r3, r3, #6
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	f063 030f 	orn	r3, r3, #15
 80059ce:	b2da      	uxtb	r2, r3
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	4930      	ldr	r1, [pc, #192]	; (8005a9c <I2C_MasterRequestRead+0x190>)
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	f000 f94c 	bl	8005c7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d001      	beq.n	80059ec <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e053      	b.n	8005a94 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80059ec:	897b      	ldrh	r3, [r7, #10]
 80059ee:	b2da      	uxtb	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	4929      	ldr	r1, [pc, #164]	; (8005aa0 <I2C_MasterRequestRead+0x194>)
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f000 f93c 	bl	8005c7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d001      	beq.n	8005a0c <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e043      	b.n	8005a94 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	613b      	str	r3, [r7, #16]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	613b      	str	r3, [r7, #16]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	613b      	str	r3, [r7, #16]
 8005a20:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a30:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	9300      	str	r3, [sp, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a3e:	68f8      	ldr	r0, [r7, #12]
 8005a40:	f000 f8c4 	bl	8005bcc <I2C_WaitOnFlagUntilTimeout>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00c      	beq.n	8005a64 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d003      	beq.n	8005a60 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a5e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	e017      	b.n	8005a94 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005a64:	897b      	ldrh	r3, [r7, #10]
 8005a66:	11db      	asrs	r3, r3, #7
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	f003 0306 	and.w	r3, r3, #6
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	f063 030e 	orn	r3, r3, #14
 8005a74:	b2da      	uxtb	r2, r3
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	4907      	ldr	r1, [pc, #28]	; (8005aa0 <I2C_MasterRequestRead+0x194>)
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f000 f8f9 	bl	8005c7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e000      	b.n	8005a94 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3718      	adds	r7, #24
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	00010008 	.word	0x00010008
 8005aa0:	00010002 	.word	0x00010002

08005aa4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b088      	sub	sp, #32
 8005aa8:	af02      	add	r7, sp, #8
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	4608      	mov	r0, r1
 8005aae:	4611      	mov	r1, r2
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	817b      	strh	r3, [r7, #10]
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	813b      	strh	r3, [r7, #8]
 8005aba:	4613      	mov	r3, r2
 8005abc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005acc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad0:	9300      	str	r3, [sp, #0]
 8005ad2:	6a3b      	ldr	r3, [r7, #32]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f000 f876 	bl	8005bcc <I2C_WaitOnFlagUntilTimeout>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00c      	beq.n	8005b00 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d003      	beq.n	8005afc <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005afa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e05f      	b.n	8005bc0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b00:	897b      	ldrh	r3, [r7, #10]
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	461a      	mov	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b0e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b12:	6a3a      	ldr	r2, [r7, #32]
 8005b14:	492c      	ldr	r1, [pc, #176]	; (8005bc8 <I2C_RequestMemoryWrite+0x124>)
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f000 f8af 	bl	8005c7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d001      	beq.n	8005b26 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e04c      	b.n	8005bc0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b26:	2300      	movs	r3, #0
 8005b28:	617b      	str	r3, [r7, #20]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	695b      	ldr	r3, [r3, #20]
 8005b30:	617b      	str	r3, [r7, #20]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	617b      	str	r3, [r7, #20]
 8005b3a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b3e:	6a39      	ldr	r1, [r7, #32]
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f000 f919 	bl	8005d78 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00d      	beq.n	8005b68 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b50:	2b04      	cmp	r3, #4
 8005b52:	d107      	bne.n	8005b64 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b62:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e02b      	b.n	8005bc0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b68:	88fb      	ldrh	r3, [r7, #6]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d105      	bne.n	8005b7a <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b6e:	893b      	ldrh	r3, [r7, #8]
 8005b70:	b2da      	uxtb	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	611a      	str	r2, [r3, #16]
 8005b78:	e021      	b.n	8005bbe <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b7a:	893b      	ldrh	r3, [r7, #8]
 8005b7c:	0a1b      	lsrs	r3, r3, #8
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	b2da      	uxtb	r2, r3
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b8a:	6a39      	ldr	r1, [r7, #32]
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f000 f8f3 	bl	8005d78 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00d      	beq.n	8005bb4 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9c:	2b04      	cmp	r3, #4
 8005b9e:	d107      	bne.n	8005bb0 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e005      	b.n	8005bc0 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005bb4:	893b      	ldrh	r3, [r7, #8]
 8005bb6:	b2da      	uxtb	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3718      	adds	r7, #24
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	00010002 	.word	0x00010002

08005bcc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	603b      	str	r3, [r7, #0]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bdc:	e025      	b.n	8005c2a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be4:	d021      	beq.n	8005c2a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005be6:	f7fd fd63 	bl	80036b0 <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	683a      	ldr	r2, [r7, #0]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d302      	bcc.n	8005bfc <I2C_WaitOnFlagUntilTimeout+0x30>
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d116      	bne.n	8005c2a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2220      	movs	r2, #32
 8005c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c16:	f043 0220 	orr.w	r2, r3, #32
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e023      	b.n	8005c72 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	0c1b      	lsrs	r3, r3, #16
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d10d      	bne.n	8005c50 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	43da      	mvns	r2, r3
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	4013      	ands	r3, r2
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	bf0c      	ite	eq
 8005c46:	2301      	moveq	r3, #1
 8005c48:	2300      	movne	r3, #0
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	e00c      	b.n	8005c6a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	699b      	ldr	r3, [r3, #24]
 8005c56:	43da      	mvns	r2, r3
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	bf0c      	ite	eq
 8005c62:	2301      	moveq	r3, #1
 8005c64:	2300      	movne	r3, #0
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	461a      	mov	r2, r3
 8005c6a:	79fb      	ldrb	r3, [r7, #7]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d0b6      	beq.n	8005bde <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b084      	sub	sp, #16
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	60f8      	str	r0, [r7, #12]
 8005c82:	60b9      	str	r1, [r7, #8]
 8005c84:	607a      	str	r2, [r7, #4]
 8005c86:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c88:	e051      	b.n	8005d2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	695b      	ldr	r3, [r3, #20]
 8005c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c98:	d123      	bne.n	8005ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ca8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005cb2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2220      	movs	r2, #32
 8005cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cce:	f043 0204 	orr.w	r2, r3, #4
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e046      	b.n	8005d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce8:	d021      	beq.n	8005d2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cea:	f7fd fce1 	bl	80036b0 <HAL_GetTick>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d302      	bcc.n	8005d00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d116      	bne.n	8005d2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2220      	movs	r2, #32
 8005d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1a:	f043 0220 	orr.w	r2, r3, #32
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e020      	b.n	8005d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	0c1b      	lsrs	r3, r3, #16
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d10c      	bne.n	8005d52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	43da      	mvns	r2, r3
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	4013      	ands	r3, r2
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	bf14      	ite	ne
 8005d4a:	2301      	movne	r3, #1
 8005d4c:	2300      	moveq	r3, #0
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	e00b      	b.n	8005d6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	699b      	ldr	r3, [r3, #24]
 8005d58:	43da      	mvns	r2, r3
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	bf14      	ite	ne
 8005d64:	2301      	movne	r3, #1
 8005d66:	2300      	moveq	r3, #0
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d18d      	bne.n	8005c8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3710      	adds	r7, #16
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d84:	e02d      	b.n	8005de2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f000 f8ce 	bl	8005f28 <I2C_IsAcknowledgeFailed>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d001      	beq.n	8005d96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e02d      	b.n	8005df2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d9c:	d021      	beq.n	8005de2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d9e:	f7fd fc87 	bl	80036b0 <HAL_GetTick>
 8005da2:	4602      	mov	r2, r0
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	68ba      	ldr	r2, [r7, #8]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d302      	bcc.n	8005db4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d116      	bne.n	8005de2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2220      	movs	r2, #32
 8005dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dce:	f043 0220 	orr.w	r2, r3, #32
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e007      	b.n	8005df2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dec:	2b80      	cmp	r3, #128	; 0x80
 8005dee:	d1ca      	bne.n	8005d86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3710      	adds	r7, #16
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}

08005dfa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b084      	sub	sp, #16
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	60f8      	str	r0, [r7, #12]
 8005e02:	60b9      	str	r1, [r7, #8]
 8005e04:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e06:	e02d      	b.n	8005e64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f000 f88d 	bl	8005f28 <I2C_IsAcknowledgeFailed>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d001      	beq.n	8005e18 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e02d      	b.n	8005e74 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e1e:	d021      	beq.n	8005e64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e20:	f7fd fc46 	bl	80036b0 <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d302      	bcc.n	8005e36 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d116      	bne.n	8005e64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2220      	movs	r2, #32
 8005e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e50:	f043 0220 	orr.w	r2, r3, #32
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e007      	b.n	8005e74 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	f003 0304 	and.w	r3, r3, #4
 8005e6e:	2b04      	cmp	r3, #4
 8005e70:	d1ca      	bne.n	8005e08 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3710      	adds	r7, #16
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e88:	e042      	b.n	8005f10 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	695b      	ldr	r3, [r3, #20]
 8005e90:	f003 0310 	and.w	r3, r3, #16
 8005e94:	2b10      	cmp	r3, #16
 8005e96:	d119      	bne.n	8005ecc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f06f 0210 	mvn.w	r2, #16
 8005ea0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2220      	movs	r2, #32
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e029      	b.n	8005f20 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ecc:	f7fd fbf0 	bl	80036b0 <HAL_GetTick>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	68ba      	ldr	r2, [r7, #8]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d302      	bcc.n	8005ee2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d116      	bne.n	8005f10 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2220      	movs	r2, #32
 8005eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efc:	f043 0220 	orr.w	r2, r3, #32
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e007      	b.n	8005f20 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f1a:	2b40      	cmp	r3, #64	; 0x40
 8005f1c:	d1b5      	bne.n	8005e8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f3e:	d11b      	bne.n	8005f78 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f48:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2220      	movs	r2, #32
 8005f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f64:	f043 0204 	orr.w	r2, r3, #4
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e000      	b.n	8005f7a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	370c      	adds	r7, #12
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
	...

08005f88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b086      	sub	sp, #24
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d101      	bne.n	8005f9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e25b      	b.n	8006452 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0301 	and.w	r3, r3, #1
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d075      	beq.n	8006092 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005fa6:	4ba3      	ldr	r3, [pc, #652]	; (8006234 <HAL_RCC_OscConfig+0x2ac>)
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	f003 030c 	and.w	r3, r3, #12
 8005fae:	2b04      	cmp	r3, #4
 8005fb0:	d00c      	beq.n	8005fcc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fb2:	4ba0      	ldr	r3, [pc, #640]	; (8006234 <HAL_RCC_OscConfig+0x2ac>)
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005fba:	2b08      	cmp	r3, #8
 8005fbc:	d112      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fbe:	4b9d      	ldr	r3, [pc, #628]	; (8006234 <HAL_RCC_OscConfig+0x2ac>)
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fca:	d10b      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fcc:	4b99      	ldr	r3, [pc, #612]	; (8006234 <HAL_RCC_OscConfig+0x2ac>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d05b      	beq.n	8006090 <HAL_RCC_OscConfig+0x108>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d157      	bne.n	8006090 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e236      	b.n	8006452 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fec:	d106      	bne.n	8005ffc <HAL_RCC_OscConfig+0x74>
 8005fee:	4b91      	ldr	r3, [pc, #580]	; (8006234 <HAL_RCC_OscConfig+0x2ac>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a90      	ldr	r2, [pc, #576]	; (8006234 <HAL_RCC_OscConfig+0x2ac>)
 8005ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ff8:	6013      	str	r3, [r2, #0]
 8005ffa:	e01d      	b.n	8006038 <HAL_RCC_OscConfig+0xb0>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006004:	d10c      	bne.n	8006020 <HAL_RCC_OscConfig+0x98>
 8006006:	4b8b      	ldr	r3, [pc, #556]	; (8006234 <HAL_RCC_OscConfig+0x2ac>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a8a      	ldr	r2, [pc, #552]	; (8006234 <HAL_RCC_OscConfig+0x2ac>)
 800600c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006010:	6013      	str	r3, [r2, #0]
 8006012:	4b88      	ldr	r3, [pc, #544]	; (8006234 <HAL_RCC_OscConfig+0x2ac>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a87      	ldr	r2, [pc, #540]	; (8006234 <HAL_RCC_OscConfig+0x2ac>)
 8006018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800601c:	6013      	str	r3, [r2, #0]
 800601e:	e00b      	b.n	8006038 <HAL_RCC_OscConfig+0xb0>
 8006020:	4b84      	ldr	r3, [pc, #528]	; (8006234 <HAL_RCC_OscConfig+0x2ac>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a83      	ldr	r2, [pc, #524]	; (8006234 <HAL_RCC_OscConfig+0x2ac>)
 8006026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800602a:	6013      	str	r3, [r2, #0]
 800602c:	4b81      	ldr	r3, [pc, #516]	; (8006234 <HAL_RCC_OscConfig+0x2ac>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a80      	ldr	r2, [pc, #512]	; (8006234 <HAL_RCC_OscConfig+0x2ac>)
 8006032:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006036:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d013      	beq.n	8006068 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006040:	f7fd fb36 	bl	80036b0 <HAL_GetTick>
 8006044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006046:	e008      	b.n	800605a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006048:	f7fd fb32 	bl	80036b0 <HAL_GetTick>
 800604c:	4602      	mov	r2, r0
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	2b64      	cmp	r3, #100	; 0x64
 8006054:	d901      	bls.n	800605a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e1fb      	b.n	8006452 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800605a:	4b76      	ldr	r3, [pc, #472]	; (8006234 <HAL_RCC_OscConfig+0x2ac>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d0f0      	beq.n	8006048 <HAL_RCC_OscConfig+0xc0>
 8006066:	e014      	b.n	8006092 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006068:	f7fd fb22 	bl	80036b0 <HAL_GetTick>
 800606c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800606e:	e008      	b.n	8006082 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006070:	f7fd fb1e 	bl	80036b0 <HAL_GetTick>
 8006074:	4602      	mov	r2, r0
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	2b64      	cmp	r3, #100	; 0x64
 800607c:	d901      	bls.n	8006082 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	e1e7      	b.n	8006452 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006082:	4b6c      	ldr	r3, [pc, #432]	; (8006234 <HAL_RCC_OscConfig+0x2ac>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1f0      	bne.n	8006070 <HAL_RCC_OscConfig+0xe8>
 800608e:	e000      	b.n	8006092 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0302 	and.w	r3, r3, #2
 800609a:	2b00      	cmp	r3, #0
 800609c:	d063      	beq.n	8006166 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800609e:	4b65      	ldr	r3, [pc, #404]	; (8006234 <HAL_RCC_OscConfig+0x2ac>)
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f003 030c 	and.w	r3, r3, #12
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00b      	beq.n	80060c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060aa:	4b62      	ldr	r3, [pc, #392]	; (8006234 <HAL_RCC_OscConfig+0x2ac>)
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80060b2:	2b08      	cmp	r3, #8
 80060b4:	d11c      	bne.n	80060f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060b6:	4b5f      	ldr	r3, [pc, #380]	; (8006234 <HAL_RCC_OscConfig+0x2ac>)
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d116      	bne.n	80060f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060c2:	4b5c      	ldr	r3, [pc, #368]	; (8006234 <HAL_RCC_OscConfig+0x2ac>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 0302 	and.w	r3, r3, #2
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d005      	beq.n	80060da <HAL_RCC_OscConfig+0x152>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d001      	beq.n	80060da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e1bb      	b.n	8006452 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060da:	4b56      	ldr	r3, [pc, #344]	; (8006234 <HAL_RCC_OscConfig+0x2ac>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	00db      	lsls	r3, r3, #3
 80060e8:	4952      	ldr	r1, [pc, #328]	; (8006234 <HAL_RCC_OscConfig+0x2ac>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060ee:	e03a      	b.n	8006166 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d020      	beq.n	800613a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060f8:	4b4f      	ldr	r3, [pc, #316]	; (8006238 <HAL_RCC_OscConfig+0x2b0>)
 80060fa:	2201      	movs	r2, #1
 80060fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060fe:	f7fd fad7 	bl	80036b0 <HAL_GetTick>
 8006102:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006104:	e008      	b.n	8006118 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006106:	f7fd fad3 	bl	80036b0 <HAL_GetTick>
 800610a:	4602      	mov	r2, r0
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	2b02      	cmp	r3, #2
 8006112:	d901      	bls.n	8006118 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006114:	2303      	movs	r3, #3
 8006116:	e19c      	b.n	8006452 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006118:	4b46      	ldr	r3, [pc, #280]	; (8006234 <HAL_RCC_OscConfig+0x2ac>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0302 	and.w	r3, r3, #2
 8006120:	2b00      	cmp	r3, #0
 8006122:	d0f0      	beq.n	8006106 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006124:	4b43      	ldr	r3, [pc, #268]	; (8006234 <HAL_RCC_OscConfig+0x2ac>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	00db      	lsls	r3, r3, #3
 8006132:	4940      	ldr	r1, [pc, #256]	; (8006234 <HAL_RCC_OscConfig+0x2ac>)
 8006134:	4313      	orrs	r3, r2
 8006136:	600b      	str	r3, [r1, #0]
 8006138:	e015      	b.n	8006166 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800613a:	4b3f      	ldr	r3, [pc, #252]	; (8006238 <HAL_RCC_OscConfig+0x2b0>)
 800613c:	2200      	movs	r2, #0
 800613e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006140:	f7fd fab6 	bl	80036b0 <HAL_GetTick>
 8006144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006146:	e008      	b.n	800615a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006148:	f7fd fab2 	bl	80036b0 <HAL_GetTick>
 800614c:	4602      	mov	r2, r0
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	2b02      	cmp	r3, #2
 8006154:	d901      	bls.n	800615a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e17b      	b.n	8006452 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800615a:	4b36      	ldr	r3, [pc, #216]	; (8006234 <HAL_RCC_OscConfig+0x2ac>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 0302 	and.w	r3, r3, #2
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1f0      	bne.n	8006148 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 0308 	and.w	r3, r3, #8
 800616e:	2b00      	cmp	r3, #0
 8006170:	d030      	beq.n	80061d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d016      	beq.n	80061a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800617a:	4b30      	ldr	r3, [pc, #192]	; (800623c <HAL_RCC_OscConfig+0x2b4>)
 800617c:	2201      	movs	r2, #1
 800617e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006180:	f7fd fa96 	bl	80036b0 <HAL_GetTick>
 8006184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006186:	e008      	b.n	800619a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006188:	f7fd fa92 	bl	80036b0 <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	2b02      	cmp	r3, #2
 8006194:	d901      	bls.n	800619a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e15b      	b.n	8006452 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800619a:	4b26      	ldr	r3, [pc, #152]	; (8006234 <HAL_RCC_OscConfig+0x2ac>)
 800619c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800619e:	f003 0302 	and.w	r3, r3, #2
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d0f0      	beq.n	8006188 <HAL_RCC_OscConfig+0x200>
 80061a6:	e015      	b.n	80061d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061a8:	4b24      	ldr	r3, [pc, #144]	; (800623c <HAL_RCC_OscConfig+0x2b4>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061ae:	f7fd fa7f 	bl	80036b0 <HAL_GetTick>
 80061b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061b4:	e008      	b.n	80061c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061b6:	f7fd fa7b 	bl	80036b0 <HAL_GetTick>
 80061ba:	4602      	mov	r2, r0
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d901      	bls.n	80061c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e144      	b.n	8006452 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061c8:	4b1a      	ldr	r3, [pc, #104]	; (8006234 <HAL_RCC_OscConfig+0x2ac>)
 80061ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061cc:	f003 0302 	and.w	r3, r3, #2
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1f0      	bne.n	80061b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0304 	and.w	r3, r3, #4
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f000 80a0 	beq.w	8006322 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061e2:	2300      	movs	r3, #0
 80061e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061e6:	4b13      	ldr	r3, [pc, #76]	; (8006234 <HAL_RCC_OscConfig+0x2ac>)
 80061e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d10f      	bne.n	8006212 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061f2:	2300      	movs	r3, #0
 80061f4:	60bb      	str	r3, [r7, #8]
 80061f6:	4b0f      	ldr	r3, [pc, #60]	; (8006234 <HAL_RCC_OscConfig+0x2ac>)
 80061f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fa:	4a0e      	ldr	r2, [pc, #56]	; (8006234 <HAL_RCC_OscConfig+0x2ac>)
 80061fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006200:	6413      	str	r3, [r2, #64]	; 0x40
 8006202:	4b0c      	ldr	r3, [pc, #48]	; (8006234 <HAL_RCC_OscConfig+0x2ac>)
 8006204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800620a:	60bb      	str	r3, [r7, #8]
 800620c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800620e:	2301      	movs	r3, #1
 8006210:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006212:	4b0b      	ldr	r3, [pc, #44]	; (8006240 <HAL_RCC_OscConfig+0x2b8>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800621a:	2b00      	cmp	r3, #0
 800621c:	d121      	bne.n	8006262 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800621e:	4b08      	ldr	r3, [pc, #32]	; (8006240 <HAL_RCC_OscConfig+0x2b8>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a07      	ldr	r2, [pc, #28]	; (8006240 <HAL_RCC_OscConfig+0x2b8>)
 8006224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006228:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800622a:	f7fd fa41 	bl	80036b0 <HAL_GetTick>
 800622e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006230:	e011      	b.n	8006256 <HAL_RCC_OscConfig+0x2ce>
 8006232:	bf00      	nop
 8006234:	40023800 	.word	0x40023800
 8006238:	42470000 	.word	0x42470000
 800623c:	42470e80 	.word	0x42470e80
 8006240:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006244:	f7fd fa34 	bl	80036b0 <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	2b02      	cmp	r3, #2
 8006250:	d901      	bls.n	8006256 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	e0fd      	b.n	8006452 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006256:	4b81      	ldr	r3, [pc, #516]	; (800645c <HAL_RCC_OscConfig+0x4d4>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800625e:	2b00      	cmp	r3, #0
 8006260:	d0f0      	beq.n	8006244 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	2b01      	cmp	r3, #1
 8006268:	d106      	bne.n	8006278 <HAL_RCC_OscConfig+0x2f0>
 800626a:	4b7d      	ldr	r3, [pc, #500]	; (8006460 <HAL_RCC_OscConfig+0x4d8>)
 800626c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800626e:	4a7c      	ldr	r2, [pc, #496]	; (8006460 <HAL_RCC_OscConfig+0x4d8>)
 8006270:	f043 0301 	orr.w	r3, r3, #1
 8006274:	6713      	str	r3, [r2, #112]	; 0x70
 8006276:	e01c      	b.n	80062b2 <HAL_RCC_OscConfig+0x32a>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	2b05      	cmp	r3, #5
 800627e:	d10c      	bne.n	800629a <HAL_RCC_OscConfig+0x312>
 8006280:	4b77      	ldr	r3, [pc, #476]	; (8006460 <HAL_RCC_OscConfig+0x4d8>)
 8006282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006284:	4a76      	ldr	r2, [pc, #472]	; (8006460 <HAL_RCC_OscConfig+0x4d8>)
 8006286:	f043 0304 	orr.w	r3, r3, #4
 800628a:	6713      	str	r3, [r2, #112]	; 0x70
 800628c:	4b74      	ldr	r3, [pc, #464]	; (8006460 <HAL_RCC_OscConfig+0x4d8>)
 800628e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006290:	4a73      	ldr	r2, [pc, #460]	; (8006460 <HAL_RCC_OscConfig+0x4d8>)
 8006292:	f043 0301 	orr.w	r3, r3, #1
 8006296:	6713      	str	r3, [r2, #112]	; 0x70
 8006298:	e00b      	b.n	80062b2 <HAL_RCC_OscConfig+0x32a>
 800629a:	4b71      	ldr	r3, [pc, #452]	; (8006460 <HAL_RCC_OscConfig+0x4d8>)
 800629c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800629e:	4a70      	ldr	r2, [pc, #448]	; (8006460 <HAL_RCC_OscConfig+0x4d8>)
 80062a0:	f023 0301 	bic.w	r3, r3, #1
 80062a4:	6713      	str	r3, [r2, #112]	; 0x70
 80062a6:	4b6e      	ldr	r3, [pc, #440]	; (8006460 <HAL_RCC_OscConfig+0x4d8>)
 80062a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062aa:	4a6d      	ldr	r2, [pc, #436]	; (8006460 <HAL_RCC_OscConfig+0x4d8>)
 80062ac:	f023 0304 	bic.w	r3, r3, #4
 80062b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d015      	beq.n	80062e6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062ba:	f7fd f9f9 	bl	80036b0 <HAL_GetTick>
 80062be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062c0:	e00a      	b.n	80062d8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062c2:	f7fd f9f5 	bl	80036b0 <HAL_GetTick>
 80062c6:	4602      	mov	r2, r0
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d901      	bls.n	80062d8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e0bc      	b.n	8006452 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062d8:	4b61      	ldr	r3, [pc, #388]	; (8006460 <HAL_RCC_OscConfig+0x4d8>)
 80062da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062dc:	f003 0302 	and.w	r3, r3, #2
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d0ee      	beq.n	80062c2 <HAL_RCC_OscConfig+0x33a>
 80062e4:	e014      	b.n	8006310 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062e6:	f7fd f9e3 	bl	80036b0 <HAL_GetTick>
 80062ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062ec:	e00a      	b.n	8006304 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062ee:	f7fd f9df 	bl	80036b0 <HAL_GetTick>
 80062f2:	4602      	mov	r2, r0
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	1ad3      	subs	r3, r2, r3
 80062f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d901      	bls.n	8006304 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e0a6      	b.n	8006452 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006304:	4b56      	ldr	r3, [pc, #344]	; (8006460 <HAL_RCC_OscConfig+0x4d8>)
 8006306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006308:	f003 0302 	and.w	r3, r3, #2
 800630c:	2b00      	cmp	r3, #0
 800630e:	d1ee      	bne.n	80062ee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006310:	7dfb      	ldrb	r3, [r7, #23]
 8006312:	2b01      	cmp	r3, #1
 8006314:	d105      	bne.n	8006322 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006316:	4b52      	ldr	r3, [pc, #328]	; (8006460 <HAL_RCC_OscConfig+0x4d8>)
 8006318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631a:	4a51      	ldr	r2, [pc, #324]	; (8006460 <HAL_RCC_OscConfig+0x4d8>)
 800631c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006320:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	2b00      	cmp	r3, #0
 8006328:	f000 8092 	beq.w	8006450 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800632c:	4b4c      	ldr	r3, [pc, #304]	; (8006460 <HAL_RCC_OscConfig+0x4d8>)
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	f003 030c 	and.w	r3, r3, #12
 8006334:	2b08      	cmp	r3, #8
 8006336:	d05c      	beq.n	80063f2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	699b      	ldr	r3, [r3, #24]
 800633c:	2b02      	cmp	r3, #2
 800633e:	d141      	bne.n	80063c4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006340:	4b48      	ldr	r3, [pc, #288]	; (8006464 <HAL_RCC_OscConfig+0x4dc>)
 8006342:	2200      	movs	r2, #0
 8006344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006346:	f7fd f9b3 	bl	80036b0 <HAL_GetTick>
 800634a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800634c:	e008      	b.n	8006360 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800634e:	f7fd f9af 	bl	80036b0 <HAL_GetTick>
 8006352:	4602      	mov	r2, r0
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	2b02      	cmp	r3, #2
 800635a:	d901      	bls.n	8006360 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e078      	b.n	8006452 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006360:	4b3f      	ldr	r3, [pc, #252]	; (8006460 <HAL_RCC_OscConfig+0x4d8>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1f0      	bne.n	800634e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	69da      	ldr	r2, [r3, #28]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a1b      	ldr	r3, [r3, #32]
 8006374:	431a      	orrs	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637a:	019b      	lsls	r3, r3, #6
 800637c:	431a      	orrs	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006382:	085b      	lsrs	r3, r3, #1
 8006384:	3b01      	subs	r3, #1
 8006386:	041b      	lsls	r3, r3, #16
 8006388:	431a      	orrs	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638e:	061b      	lsls	r3, r3, #24
 8006390:	4933      	ldr	r1, [pc, #204]	; (8006460 <HAL_RCC_OscConfig+0x4d8>)
 8006392:	4313      	orrs	r3, r2
 8006394:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006396:	4b33      	ldr	r3, [pc, #204]	; (8006464 <HAL_RCC_OscConfig+0x4dc>)
 8006398:	2201      	movs	r2, #1
 800639a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800639c:	f7fd f988 	bl	80036b0 <HAL_GetTick>
 80063a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063a2:	e008      	b.n	80063b6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063a4:	f7fd f984 	bl	80036b0 <HAL_GetTick>
 80063a8:	4602      	mov	r2, r0
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d901      	bls.n	80063b6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e04d      	b.n	8006452 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063b6:	4b2a      	ldr	r3, [pc, #168]	; (8006460 <HAL_RCC_OscConfig+0x4d8>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d0f0      	beq.n	80063a4 <HAL_RCC_OscConfig+0x41c>
 80063c2:	e045      	b.n	8006450 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063c4:	4b27      	ldr	r3, [pc, #156]	; (8006464 <HAL_RCC_OscConfig+0x4dc>)
 80063c6:	2200      	movs	r2, #0
 80063c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063ca:	f7fd f971 	bl	80036b0 <HAL_GetTick>
 80063ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063d0:	e008      	b.n	80063e4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063d2:	f7fd f96d 	bl	80036b0 <HAL_GetTick>
 80063d6:	4602      	mov	r2, r0
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d901      	bls.n	80063e4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e036      	b.n	8006452 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063e4:	4b1e      	ldr	r3, [pc, #120]	; (8006460 <HAL_RCC_OscConfig+0x4d8>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1f0      	bne.n	80063d2 <HAL_RCC_OscConfig+0x44a>
 80063f0:	e02e      	b.n	8006450 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d101      	bne.n	80063fe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e029      	b.n	8006452 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80063fe:	4b18      	ldr	r3, [pc, #96]	; (8006460 <HAL_RCC_OscConfig+0x4d8>)
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	69db      	ldr	r3, [r3, #28]
 800640e:	429a      	cmp	r2, r3
 8006410:	d11c      	bne.n	800644c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800641c:	429a      	cmp	r2, r3
 800641e:	d115      	bne.n	800644c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006426:	4013      	ands	r3, r2
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800642c:	4293      	cmp	r3, r2
 800642e:	d10d      	bne.n	800644c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800643a:	429a      	cmp	r2, r3
 800643c:	d106      	bne.n	800644c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006448:	429a      	cmp	r2, r3
 800644a:	d001      	beq.n	8006450 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e000      	b.n	8006452 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3718      	adds	r7, #24
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	40007000 	.word	0x40007000
 8006460:	40023800 	.word	0x40023800
 8006464:	42470060 	.word	0x42470060

08006468 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d101      	bne.n	800647c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e0cc      	b.n	8006616 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800647c:	4b68      	ldr	r3, [pc, #416]	; (8006620 <HAL_RCC_ClockConfig+0x1b8>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 030f 	and.w	r3, r3, #15
 8006484:	683a      	ldr	r2, [r7, #0]
 8006486:	429a      	cmp	r2, r3
 8006488:	d90c      	bls.n	80064a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800648a:	4b65      	ldr	r3, [pc, #404]	; (8006620 <HAL_RCC_ClockConfig+0x1b8>)
 800648c:	683a      	ldr	r2, [r7, #0]
 800648e:	b2d2      	uxtb	r2, r2
 8006490:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006492:	4b63      	ldr	r3, [pc, #396]	; (8006620 <HAL_RCC_ClockConfig+0x1b8>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 030f 	and.w	r3, r3, #15
 800649a:	683a      	ldr	r2, [r7, #0]
 800649c:	429a      	cmp	r2, r3
 800649e:	d001      	beq.n	80064a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e0b8      	b.n	8006616 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 0302 	and.w	r3, r3, #2
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d020      	beq.n	80064f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0304 	and.w	r3, r3, #4
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d005      	beq.n	80064c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064bc:	4b59      	ldr	r3, [pc, #356]	; (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	4a58      	ldr	r2, [pc, #352]	; (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 80064c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80064c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 0308 	and.w	r3, r3, #8
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d005      	beq.n	80064e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064d4:	4b53      	ldr	r3, [pc, #332]	; (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	4a52      	ldr	r2, [pc, #328]	; (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 80064da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80064de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064e0:	4b50      	ldr	r3, [pc, #320]	; (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	494d      	ldr	r1, [pc, #308]	; (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 80064ee:	4313      	orrs	r3, r2
 80064f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d044      	beq.n	8006588 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	2b01      	cmp	r3, #1
 8006504:	d107      	bne.n	8006516 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006506:	4b47      	ldr	r3, [pc, #284]	; (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d119      	bne.n	8006546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e07f      	b.n	8006616 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	2b02      	cmp	r3, #2
 800651c:	d003      	beq.n	8006526 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006522:	2b03      	cmp	r3, #3
 8006524:	d107      	bne.n	8006536 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006526:	4b3f      	ldr	r3, [pc, #252]	; (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800652e:	2b00      	cmp	r3, #0
 8006530:	d109      	bne.n	8006546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e06f      	b.n	8006616 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006536:	4b3b      	ldr	r3, [pc, #236]	; (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 0302 	and.w	r3, r3, #2
 800653e:	2b00      	cmp	r3, #0
 8006540:	d101      	bne.n	8006546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e067      	b.n	8006616 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006546:	4b37      	ldr	r3, [pc, #220]	; (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f023 0203 	bic.w	r2, r3, #3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	4934      	ldr	r1, [pc, #208]	; (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 8006554:	4313      	orrs	r3, r2
 8006556:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006558:	f7fd f8aa 	bl	80036b0 <HAL_GetTick>
 800655c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800655e:	e00a      	b.n	8006576 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006560:	f7fd f8a6 	bl	80036b0 <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	f241 3288 	movw	r2, #5000	; 0x1388
 800656e:	4293      	cmp	r3, r2
 8006570:	d901      	bls.n	8006576 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	e04f      	b.n	8006616 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006576:	4b2b      	ldr	r3, [pc, #172]	; (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f003 020c 	and.w	r2, r3, #12
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	429a      	cmp	r2, r3
 8006586:	d1eb      	bne.n	8006560 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006588:	4b25      	ldr	r3, [pc, #148]	; (8006620 <HAL_RCC_ClockConfig+0x1b8>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 030f 	and.w	r3, r3, #15
 8006590:	683a      	ldr	r2, [r7, #0]
 8006592:	429a      	cmp	r2, r3
 8006594:	d20c      	bcs.n	80065b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006596:	4b22      	ldr	r3, [pc, #136]	; (8006620 <HAL_RCC_ClockConfig+0x1b8>)
 8006598:	683a      	ldr	r2, [r7, #0]
 800659a:	b2d2      	uxtb	r2, r2
 800659c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800659e:	4b20      	ldr	r3, [pc, #128]	; (8006620 <HAL_RCC_ClockConfig+0x1b8>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 030f 	and.w	r3, r3, #15
 80065a6:	683a      	ldr	r2, [r7, #0]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d001      	beq.n	80065b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e032      	b.n	8006616 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0304 	and.w	r3, r3, #4
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d008      	beq.n	80065ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065bc:	4b19      	ldr	r3, [pc, #100]	; (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	4916      	ldr	r1, [pc, #88]	; (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 80065ca:	4313      	orrs	r3, r2
 80065cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0308 	and.w	r3, r3, #8
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d009      	beq.n	80065ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065da:	4b12      	ldr	r3, [pc, #72]	; (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	00db      	lsls	r3, r3, #3
 80065e8:	490e      	ldr	r1, [pc, #56]	; (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80065ee:	f000 f821 	bl	8006634 <HAL_RCC_GetSysClockFreq>
 80065f2:	4601      	mov	r1, r0
 80065f4:	4b0b      	ldr	r3, [pc, #44]	; (8006624 <HAL_RCC_ClockConfig+0x1bc>)
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	091b      	lsrs	r3, r3, #4
 80065fa:	f003 030f 	and.w	r3, r3, #15
 80065fe:	4a0a      	ldr	r2, [pc, #40]	; (8006628 <HAL_RCC_ClockConfig+0x1c0>)
 8006600:	5cd3      	ldrb	r3, [r2, r3]
 8006602:	fa21 f303 	lsr.w	r3, r1, r3
 8006606:	4a09      	ldr	r2, [pc, #36]	; (800662c <HAL_RCC_ClockConfig+0x1c4>)
 8006608:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800660a:	4b09      	ldr	r3, [pc, #36]	; (8006630 <HAL_RCC_ClockConfig+0x1c8>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4618      	mov	r0, r3
 8006610:	f7fd f80a 	bl	8003628 <HAL_InitTick>

  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	40023c00 	.word	0x40023c00
 8006624:	40023800 	.word	0x40023800
 8006628:	0800c568 	.word	0x0800c568
 800662c:	2000001c 	.word	0x2000001c
 8006630:	20000020 	.word	0x20000020

08006634 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800663a:	2300      	movs	r3, #0
 800663c:	607b      	str	r3, [r7, #4]
 800663e:	2300      	movs	r3, #0
 8006640:	60fb      	str	r3, [r7, #12]
 8006642:	2300      	movs	r3, #0
 8006644:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006646:	2300      	movs	r3, #0
 8006648:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800664a:	4b63      	ldr	r3, [pc, #396]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f003 030c 	and.w	r3, r3, #12
 8006652:	2b04      	cmp	r3, #4
 8006654:	d007      	beq.n	8006666 <HAL_RCC_GetSysClockFreq+0x32>
 8006656:	2b08      	cmp	r3, #8
 8006658:	d008      	beq.n	800666c <HAL_RCC_GetSysClockFreq+0x38>
 800665a:	2b00      	cmp	r3, #0
 800665c:	f040 80b4 	bne.w	80067c8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006660:	4b5e      	ldr	r3, [pc, #376]	; (80067dc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006662:	60bb      	str	r3, [r7, #8]
       break;
 8006664:	e0b3      	b.n	80067ce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006666:	4b5d      	ldr	r3, [pc, #372]	; (80067dc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006668:	60bb      	str	r3, [r7, #8]
      break;
 800666a:	e0b0      	b.n	80067ce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800666c:	4b5a      	ldr	r3, [pc, #360]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006674:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006676:	4b58      	ldr	r3, [pc, #352]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d04a      	beq.n	8006718 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006682:	4b55      	ldr	r3, [pc, #340]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	099b      	lsrs	r3, r3, #6
 8006688:	f04f 0400 	mov.w	r4, #0
 800668c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006690:	f04f 0200 	mov.w	r2, #0
 8006694:	ea03 0501 	and.w	r5, r3, r1
 8006698:	ea04 0602 	and.w	r6, r4, r2
 800669c:	4629      	mov	r1, r5
 800669e:	4632      	mov	r2, r6
 80066a0:	f04f 0300 	mov.w	r3, #0
 80066a4:	f04f 0400 	mov.w	r4, #0
 80066a8:	0154      	lsls	r4, r2, #5
 80066aa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80066ae:	014b      	lsls	r3, r1, #5
 80066b0:	4619      	mov	r1, r3
 80066b2:	4622      	mov	r2, r4
 80066b4:	1b49      	subs	r1, r1, r5
 80066b6:	eb62 0206 	sbc.w	r2, r2, r6
 80066ba:	f04f 0300 	mov.w	r3, #0
 80066be:	f04f 0400 	mov.w	r4, #0
 80066c2:	0194      	lsls	r4, r2, #6
 80066c4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80066c8:	018b      	lsls	r3, r1, #6
 80066ca:	1a5b      	subs	r3, r3, r1
 80066cc:	eb64 0402 	sbc.w	r4, r4, r2
 80066d0:	f04f 0100 	mov.w	r1, #0
 80066d4:	f04f 0200 	mov.w	r2, #0
 80066d8:	00e2      	lsls	r2, r4, #3
 80066da:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80066de:	00d9      	lsls	r1, r3, #3
 80066e0:	460b      	mov	r3, r1
 80066e2:	4614      	mov	r4, r2
 80066e4:	195b      	adds	r3, r3, r5
 80066e6:	eb44 0406 	adc.w	r4, r4, r6
 80066ea:	f04f 0100 	mov.w	r1, #0
 80066ee:	f04f 0200 	mov.w	r2, #0
 80066f2:	02a2      	lsls	r2, r4, #10
 80066f4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80066f8:	0299      	lsls	r1, r3, #10
 80066fa:	460b      	mov	r3, r1
 80066fc:	4614      	mov	r4, r2
 80066fe:	4618      	mov	r0, r3
 8006700:	4621      	mov	r1, r4
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f04f 0400 	mov.w	r4, #0
 8006708:	461a      	mov	r2, r3
 800670a:	4623      	mov	r3, r4
 800670c:	f7fa fabc 	bl	8000c88 <__aeabi_uldivmod>
 8006710:	4603      	mov	r3, r0
 8006712:	460c      	mov	r4, r1
 8006714:	60fb      	str	r3, [r7, #12]
 8006716:	e049      	b.n	80067ac <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006718:	4b2f      	ldr	r3, [pc, #188]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	099b      	lsrs	r3, r3, #6
 800671e:	f04f 0400 	mov.w	r4, #0
 8006722:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006726:	f04f 0200 	mov.w	r2, #0
 800672a:	ea03 0501 	and.w	r5, r3, r1
 800672e:	ea04 0602 	and.w	r6, r4, r2
 8006732:	4629      	mov	r1, r5
 8006734:	4632      	mov	r2, r6
 8006736:	f04f 0300 	mov.w	r3, #0
 800673a:	f04f 0400 	mov.w	r4, #0
 800673e:	0154      	lsls	r4, r2, #5
 8006740:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006744:	014b      	lsls	r3, r1, #5
 8006746:	4619      	mov	r1, r3
 8006748:	4622      	mov	r2, r4
 800674a:	1b49      	subs	r1, r1, r5
 800674c:	eb62 0206 	sbc.w	r2, r2, r6
 8006750:	f04f 0300 	mov.w	r3, #0
 8006754:	f04f 0400 	mov.w	r4, #0
 8006758:	0194      	lsls	r4, r2, #6
 800675a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800675e:	018b      	lsls	r3, r1, #6
 8006760:	1a5b      	subs	r3, r3, r1
 8006762:	eb64 0402 	sbc.w	r4, r4, r2
 8006766:	f04f 0100 	mov.w	r1, #0
 800676a:	f04f 0200 	mov.w	r2, #0
 800676e:	00e2      	lsls	r2, r4, #3
 8006770:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006774:	00d9      	lsls	r1, r3, #3
 8006776:	460b      	mov	r3, r1
 8006778:	4614      	mov	r4, r2
 800677a:	195b      	adds	r3, r3, r5
 800677c:	eb44 0406 	adc.w	r4, r4, r6
 8006780:	f04f 0100 	mov.w	r1, #0
 8006784:	f04f 0200 	mov.w	r2, #0
 8006788:	02a2      	lsls	r2, r4, #10
 800678a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800678e:	0299      	lsls	r1, r3, #10
 8006790:	460b      	mov	r3, r1
 8006792:	4614      	mov	r4, r2
 8006794:	4618      	mov	r0, r3
 8006796:	4621      	mov	r1, r4
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f04f 0400 	mov.w	r4, #0
 800679e:	461a      	mov	r2, r3
 80067a0:	4623      	mov	r3, r4
 80067a2:	f7fa fa71 	bl	8000c88 <__aeabi_uldivmod>
 80067a6:	4603      	mov	r3, r0
 80067a8:	460c      	mov	r4, r1
 80067aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80067ac:	4b0a      	ldr	r3, [pc, #40]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	0c1b      	lsrs	r3, r3, #16
 80067b2:	f003 0303 	and.w	r3, r3, #3
 80067b6:	3301      	adds	r3, #1
 80067b8:	005b      	lsls	r3, r3, #1
 80067ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80067c4:	60bb      	str	r3, [r7, #8]
      break;
 80067c6:	e002      	b.n	80067ce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80067c8:	4b04      	ldr	r3, [pc, #16]	; (80067dc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80067ca:	60bb      	str	r3, [r7, #8]
      break;
 80067cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80067ce:	68bb      	ldr	r3, [r7, #8]
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3714      	adds	r7, #20
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067d8:	40023800 	.word	0x40023800
 80067dc:	00f42400 	.word	0x00f42400

080067e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067e0:	b480      	push	{r7}
 80067e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067e4:	4b03      	ldr	r3, [pc, #12]	; (80067f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80067e6:	681b      	ldr	r3, [r3, #0]
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop
 80067f4:	2000001c 	.word	0x2000001c

080067f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80067fc:	f7ff fff0 	bl	80067e0 <HAL_RCC_GetHCLKFreq>
 8006800:	4601      	mov	r1, r0
 8006802:	4b05      	ldr	r3, [pc, #20]	; (8006818 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	0a9b      	lsrs	r3, r3, #10
 8006808:	f003 0307 	and.w	r3, r3, #7
 800680c:	4a03      	ldr	r2, [pc, #12]	; (800681c <HAL_RCC_GetPCLK1Freq+0x24>)
 800680e:	5cd3      	ldrb	r3, [r2, r3]
 8006810:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006814:	4618      	mov	r0, r3
 8006816:	bd80      	pop	{r7, pc}
 8006818:	40023800 	.word	0x40023800
 800681c:	0800c578 	.word	0x0800c578

08006820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006824:	f7ff ffdc 	bl	80067e0 <HAL_RCC_GetHCLKFreq>
 8006828:	4601      	mov	r1, r0
 800682a:	4b05      	ldr	r3, [pc, #20]	; (8006840 <HAL_RCC_GetPCLK2Freq+0x20>)
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	0b5b      	lsrs	r3, r3, #13
 8006830:	f003 0307 	and.w	r3, r3, #7
 8006834:	4a03      	ldr	r2, [pc, #12]	; (8006844 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006836:	5cd3      	ldrb	r3, [r2, r3]
 8006838:	fa21 f303 	lsr.w	r3, r1, r3
}
 800683c:	4618      	mov	r0, r3
 800683e:	bd80      	pop	{r7, pc}
 8006840:	40023800 	.word	0x40023800
 8006844:	0800c578 	.word	0x0800c578

08006848 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d101      	bne.n	800685a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e01d      	b.n	8006896 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006860:	b2db      	uxtb	r3, r3
 8006862:	2b00      	cmp	r3, #0
 8006864:	d106      	bne.n	8006874 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f7fc fb54 	bl	8002f1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2202      	movs	r2, #2
 8006878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	3304      	adds	r3, #4
 8006884:	4619      	mov	r1, r3
 8006886:	4610      	mov	r0, r2
 8006888:	f000 f9fa 	bl	8006c80 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3708      	adds	r7, #8
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}

0800689e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b082      	sub	sp, #8
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d101      	bne.n	80068b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e01d      	b.n	80068ec <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d106      	bne.n	80068ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 f815 	bl	80068f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2202      	movs	r2, #2
 80068ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	3304      	adds	r3, #4
 80068da:	4619      	mov	r1, r3
 80068dc:	4610      	mov	r0, r2
 80068de:	f000 f9cf 	bl	8006c80 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3708      	adds	r7, #8
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80068fc:	bf00      	nop
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2201      	movs	r2, #1
 8006918:	6839      	ldr	r1, [r7, #0]
 800691a:	4618      	mov	r0, r3
 800691c:	f000 fc9a 	bl	8007254 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a15      	ldr	r2, [pc, #84]	; (800697c <HAL_TIM_PWM_Start+0x74>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d004      	beq.n	8006934 <HAL_TIM_PWM_Start+0x2c>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a14      	ldr	r2, [pc, #80]	; (8006980 <HAL_TIM_PWM_Start+0x78>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d101      	bne.n	8006938 <HAL_TIM_PWM_Start+0x30>
 8006934:	2301      	movs	r3, #1
 8006936:	e000      	b.n	800693a <HAL_TIM_PWM_Start+0x32>
 8006938:	2300      	movs	r3, #0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d007      	beq.n	800694e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800694c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	f003 0307 	and.w	r3, r3, #7
 8006958:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2b06      	cmp	r3, #6
 800695e:	d007      	beq.n	8006970 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f042 0201 	orr.w	r2, r2, #1
 800696e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	40010000 	.word	0x40010000
 8006980:	40010400 	.word	0x40010400

08006984 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006996:	2b01      	cmp	r3, #1
 8006998:	d101      	bne.n	800699e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800699a:	2302      	movs	r3, #2
 800699c:	e0b4      	b.n	8006b08 <HAL_TIM_PWM_ConfigChannel+0x184>
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2201      	movs	r2, #1
 80069a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2202      	movs	r2, #2
 80069aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2b0c      	cmp	r3, #12
 80069b2:	f200 809f 	bhi.w	8006af4 <HAL_TIM_PWM_ConfigChannel+0x170>
 80069b6:	a201      	add	r2, pc, #4	; (adr r2, 80069bc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80069b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069bc:	080069f1 	.word	0x080069f1
 80069c0:	08006af5 	.word	0x08006af5
 80069c4:	08006af5 	.word	0x08006af5
 80069c8:	08006af5 	.word	0x08006af5
 80069cc:	08006a31 	.word	0x08006a31
 80069d0:	08006af5 	.word	0x08006af5
 80069d4:	08006af5 	.word	0x08006af5
 80069d8:	08006af5 	.word	0x08006af5
 80069dc:	08006a73 	.word	0x08006a73
 80069e0:	08006af5 	.word	0x08006af5
 80069e4:	08006af5 	.word	0x08006af5
 80069e8:	08006af5 	.word	0x08006af5
 80069ec:	08006ab3 	.word	0x08006ab3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68b9      	ldr	r1, [r7, #8]
 80069f6:	4618      	mov	r0, r3
 80069f8:	f000 f9e2 	bl	8006dc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	699a      	ldr	r2, [r3, #24]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f042 0208 	orr.w	r2, r2, #8
 8006a0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	699a      	ldr	r2, [r3, #24]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f022 0204 	bic.w	r2, r2, #4
 8006a1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	6999      	ldr	r1, [r3, #24]
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	691a      	ldr	r2, [r3, #16]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	430a      	orrs	r2, r1
 8006a2c:	619a      	str	r2, [r3, #24]
      break;
 8006a2e:	e062      	b.n	8006af6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68b9      	ldr	r1, [r7, #8]
 8006a36:	4618      	mov	r0, r3
 8006a38:	f000 fa32 	bl	8006ea0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	699a      	ldr	r2, [r3, #24]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	699a      	ldr	r2, [r3, #24]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6999      	ldr	r1, [r3, #24]
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	021a      	lsls	r2, r3, #8
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	430a      	orrs	r2, r1
 8006a6e:	619a      	str	r2, [r3, #24]
      break;
 8006a70:	e041      	b.n	8006af6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68b9      	ldr	r1, [r7, #8]
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f000 fa87 	bl	8006f8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	69da      	ldr	r2, [r3, #28]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f042 0208 	orr.w	r2, r2, #8
 8006a8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	69da      	ldr	r2, [r3, #28]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f022 0204 	bic.w	r2, r2, #4
 8006a9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	69d9      	ldr	r1, [r3, #28]
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	691a      	ldr	r2, [r3, #16]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	430a      	orrs	r2, r1
 8006aae:	61da      	str	r2, [r3, #28]
      break;
 8006ab0:	e021      	b.n	8006af6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68b9      	ldr	r1, [r7, #8]
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f000 fadb 	bl	8007074 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	69da      	ldr	r2, [r3, #28]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006acc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	69da      	ldr	r2, [r3, #28]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006adc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	69d9      	ldr	r1, [r3, #28]
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	021a      	lsls	r2, r3, #8
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	430a      	orrs	r2, r1
 8006af0:	61da      	str	r2, [r3, #28]
      break;
 8006af2:	e000      	b.n	8006af6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006af4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2201      	movs	r2, #1
 8006afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3710      	adds	r7, #16
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d101      	bne.n	8006b28 <HAL_TIM_ConfigClockSource+0x18>
 8006b24:	2302      	movs	r3, #2
 8006b26:	e0a6      	b.n	8006c76 <HAL_TIM_ConfigClockSource+0x166>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2202      	movs	r2, #2
 8006b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2b40      	cmp	r3, #64	; 0x40
 8006b5e:	d067      	beq.n	8006c30 <HAL_TIM_ConfigClockSource+0x120>
 8006b60:	2b40      	cmp	r3, #64	; 0x40
 8006b62:	d80b      	bhi.n	8006b7c <HAL_TIM_ConfigClockSource+0x6c>
 8006b64:	2b10      	cmp	r3, #16
 8006b66:	d073      	beq.n	8006c50 <HAL_TIM_ConfigClockSource+0x140>
 8006b68:	2b10      	cmp	r3, #16
 8006b6a:	d802      	bhi.n	8006b72 <HAL_TIM_ConfigClockSource+0x62>
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d06f      	beq.n	8006c50 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006b70:	e078      	b.n	8006c64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006b72:	2b20      	cmp	r3, #32
 8006b74:	d06c      	beq.n	8006c50 <HAL_TIM_ConfigClockSource+0x140>
 8006b76:	2b30      	cmp	r3, #48	; 0x30
 8006b78:	d06a      	beq.n	8006c50 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006b7a:	e073      	b.n	8006c64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006b7c:	2b70      	cmp	r3, #112	; 0x70
 8006b7e:	d00d      	beq.n	8006b9c <HAL_TIM_ConfigClockSource+0x8c>
 8006b80:	2b70      	cmp	r3, #112	; 0x70
 8006b82:	d804      	bhi.n	8006b8e <HAL_TIM_ConfigClockSource+0x7e>
 8006b84:	2b50      	cmp	r3, #80	; 0x50
 8006b86:	d033      	beq.n	8006bf0 <HAL_TIM_ConfigClockSource+0xe0>
 8006b88:	2b60      	cmp	r3, #96	; 0x60
 8006b8a:	d041      	beq.n	8006c10 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006b8c:	e06a      	b.n	8006c64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b92:	d066      	beq.n	8006c62 <HAL_TIM_ConfigClockSource+0x152>
 8006b94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b98:	d017      	beq.n	8006bca <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006b9a:	e063      	b.n	8006c64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6818      	ldr	r0, [r3, #0]
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	6899      	ldr	r1, [r3, #8]
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	685a      	ldr	r2, [r3, #4]
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	f000 fb32 	bl	8007214 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006bbe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	609a      	str	r2, [r3, #8]
      break;
 8006bc8:	e04c      	b.n	8006c64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6818      	ldr	r0, [r3, #0]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	6899      	ldr	r1, [r3, #8]
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	685a      	ldr	r2, [r3, #4]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	f000 fb1b 	bl	8007214 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	689a      	ldr	r2, [r3, #8]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006bec:	609a      	str	r2, [r3, #8]
      break;
 8006bee:	e039      	b.n	8006c64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6818      	ldr	r0, [r3, #0]
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	6859      	ldr	r1, [r3, #4]
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	f000 fa8f 	bl	8007120 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2150      	movs	r1, #80	; 0x50
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f000 fae8 	bl	80071de <TIM_ITRx_SetConfig>
      break;
 8006c0e:	e029      	b.n	8006c64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6818      	ldr	r0, [r3, #0]
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	6859      	ldr	r1, [r3, #4]
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	f000 faae 	bl	800717e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2160      	movs	r1, #96	; 0x60
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f000 fad8 	bl	80071de <TIM_ITRx_SetConfig>
      break;
 8006c2e:	e019      	b.n	8006c64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6818      	ldr	r0, [r3, #0]
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	6859      	ldr	r1, [r3, #4]
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	f000 fa6f 	bl	8007120 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2140      	movs	r1, #64	; 0x40
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f000 fac8 	bl	80071de <TIM_ITRx_SetConfig>
      break;
 8006c4e:	e009      	b.n	8006c64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4619      	mov	r1, r3
 8006c5a:	4610      	mov	r0, r2
 8006c5c:	f000 fabf 	bl	80071de <TIM_ITRx_SetConfig>
      break;
 8006c60:	e000      	b.n	8006c64 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006c62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
	...

08006c80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a40      	ldr	r2, [pc, #256]	; (8006d94 <TIM_Base_SetConfig+0x114>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d013      	beq.n	8006cc0 <TIM_Base_SetConfig+0x40>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c9e:	d00f      	beq.n	8006cc0 <TIM_Base_SetConfig+0x40>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a3d      	ldr	r2, [pc, #244]	; (8006d98 <TIM_Base_SetConfig+0x118>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d00b      	beq.n	8006cc0 <TIM_Base_SetConfig+0x40>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a3c      	ldr	r2, [pc, #240]	; (8006d9c <TIM_Base_SetConfig+0x11c>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d007      	beq.n	8006cc0 <TIM_Base_SetConfig+0x40>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a3b      	ldr	r2, [pc, #236]	; (8006da0 <TIM_Base_SetConfig+0x120>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d003      	beq.n	8006cc0 <TIM_Base_SetConfig+0x40>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a3a      	ldr	r2, [pc, #232]	; (8006da4 <TIM_Base_SetConfig+0x124>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d108      	bne.n	8006cd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a2f      	ldr	r2, [pc, #188]	; (8006d94 <TIM_Base_SetConfig+0x114>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d02b      	beq.n	8006d32 <TIM_Base_SetConfig+0xb2>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ce0:	d027      	beq.n	8006d32 <TIM_Base_SetConfig+0xb2>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a2c      	ldr	r2, [pc, #176]	; (8006d98 <TIM_Base_SetConfig+0x118>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d023      	beq.n	8006d32 <TIM_Base_SetConfig+0xb2>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a2b      	ldr	r2, [pc, #172]	; (8006d9c <TIM_Base_SetConfig+0x11c>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d01f      	beq.n	8006d32 <TIM_Base_SetConfig+0xb2>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a2a      	ldr	r2, [pc, #168]	; (8006da0 <TIM_Base_SetConfig+0x120>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d01b      	beq.n	8006d32 <TIM_Base_SetConfig+0xb2>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a29      	ldr	r2, [pc, #164]	; (8006da4 <TIM_Base_SetConfig+0x124>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d017      	beq.n	8006d32 <TIM_Base_SetConfig+0xb2>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a28      	ldr	r2, [pc, #160]	; (8006da8 <TIM_Base_SetConfig+0x128>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d013      	beq.n	8006d32 <TIM_Base_SetConfig+0xb2>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a27      	ldr	r2, [pc, #156]	; (8006dac <TIM_Base_SetConfig+0x12c>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d00f      	beq.n	8006d32 <TIM_Base_SetConfig+0xb2>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a26      	ldr	r2, [pc, #152]	; (8006db0 <TIM_Base_SetConfig+0x130>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d00b      	beq.n	8006d32 <TIM_Base_SetConfig+0xb2>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a25      	ldr	r2, [pc, #148]	; (8006db4 <TIM_Base_SetConfig+0x134>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d007      	beq.n	8006d32 <TIM_Base_SetConfig+0xb2>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a24      	ldr	r2, [pc, #144]	; (8006db8 <TIM_Base_SetConfig+0x138>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d003      	beq.n	8006d32 <TIM_Base_SetConfig+0xb2>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a23      	ldr	r2, [pc, #140]	; (8006dbc <TIM_Base_SetConfig+0x13c>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d108      	bne.n	8006d44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	695b      	ldr	r3, [r3, #20]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	68fa      	ldr	r2, [r7, #12]
 8006d56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	689a      	ldr	r2, [r3, #8]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a0a      	ldr	r2, [pc, #40]	; (8006d94 <TIM_Base_SetConfig+0x114>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d003      	beq.n	8006d78 <TIM_Base_SetConfig+0xf8>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a0c      	ldr	r2, [pc, #48]	; (8006da4 <TIM_Base_SetConfig+0x124>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d103      	bne.n	8006d80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	691a      	ldr	r2, [r3, #16]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	615a      	str	r2, [r3, #20]
}
 8006d86:	bf00      	nop
 8006d88:	3714      	adds	r7, #20
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	40010000 	.word	0x40010000
 8006d98:	40000400 	.word	0x40000400
 8006d9c:	40000800 	.word	0x40000800
 8006da0:	40000c00 	.word	0x40000c00
 8006da4:	40010400 	.word	0x40010400
 8006da8:	40014000 	.word	0x40014000
 8006dac:	40014400 	.word	0x40014400
 8006db0:	40014800 	.word	0x40014800
 8006db4:	40001800 	.word	0x40001800
 8006db8:	40001c00 	.word	0x40001c00
 8006dbc:	40002000 	.word	0x40002000

08006dc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b087      	sub	sp, #28
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a1b      	ldr	r3, [r3, #32]
 8006dce:	f023 0201 	bic.w	r2, r3, #1
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a1b      	ldr	r3, [r3, #32]
 8006dda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f023 0303 	bic.w	r3, r3, #3
 8006df6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	f023 0302 	bic.w	r3, r3, #2
 8006e08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	697a      	ldr	r2, [r7, #20]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a20      	ldr	r2, [pc, #128]	; (8006e98 <TIM_OC1_SetConfig+0xd8>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d003      	beq.n	8006e24 <TIM_OC1_SetConfig+0x64>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4a1f      	ldr	r2, [pc, #124]	; (8006e9c <TIM_OC1_SetConfig+0xdc>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d10c      	bne.n	8006e3e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	f023 0308 	bic.w	r3, r3, #8
 8006e2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	697a      	ldr	r2, [r7, #20]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	f023 0304 	bic.w	r3, r3, #4
 8006e3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4a15      	ldr	r2, [pc, #84]	; (8006e98 <TIM_OC1_SetConfig+0xd8>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d003      	beq.n	8006e4e <TIM_OC1_SetConfig+0x8e>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a14      	ldr	r2, [pc, #80]	; (8006e9c <TIM_OC1_SetConfig+0xdc>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d111      	bne.n	8006e72 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	695b      	ldr	r3, [r3, #20]
 8006e62:	693a      	ldr	r2, [r7, #16]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	699b      	ldr	r3, [r3, #24]
 8006e6c:	693a      	ldr	r2, [r7, #16]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	693a      	ldr	r2, [r7, #16]
 8006e76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	685a      	ldr	r2, [r3, #4]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	697a      	ldr	r2, [r7, #20]
 8006e8a:	621a      	str	r2, [r3, #32]
}
 8006e8c:	bf00      	nop
 8006e8e:	371c      	adds	r7, #28
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr
 8006e98:	40010000 	.word	0x40010000
 8006e9c:	40010400 	.word	0x40010400

08006ea0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b087      	sub	sp, #28
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	f023 0210 	bic.w	r2, r3, #16
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ed6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	021b      	lsls	r3, r3, #8
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	f023 0320 	bic.w	r3, r3, #32
 8006eea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	011b      	lsls	r3, r3, #4
 8006ef2:	697a      	ldr	r2, [r7, #20]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4a22      	ldr	r2, [pc, #136]	; (8006f84 <TIM_OC2_SetConfig+0xe4>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d003      	beq.n	8006f08 <TIM_OC2_SetConfig+0x68>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4a21      	ldr	r2, [pc, #132]	; (8006f88 <TIM_OC2_SetConfig+0xe8>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d10d      	bne.n	8006f24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	011b      	lsls	r3, r3, #4
 8006f16:	697a      	ldr	r2, [r7, #20]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a17      	ldr	r2, [pc, #92]	; (8006f84 <TIM_OC2_SetConfig+0xe4>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d003      	beq.n	8006f34 <TIM_OC2_SetConfig+0x94>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a16      	ldr	r2, [pc, #88]	; (8006f88 <TIM_OC2_SetConfig+0xe8>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d113      	bne.n	8006f5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	695b      	ldr	r3, [r3, #20]
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	693a      	ldr	r2, [r7, #16]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	699b      	ldr	r3, [r3, #24]
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	693a      	ldr	r2, [r7, #16]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	693a      	ldr	r2, [r7, #16]
 8006f60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	68fa      	ldr	r2, [r7, #12]
 8006f66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	685a      	ldr	r2, [r3, #4]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	697a      	ldr	r2, [r7, #20]
 8006f74:	621a      	str	r2, [r3, #32]
}
 8006f76:	bf00      	nop
 8006f78:	371c      	adds	r7, #28
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	40010000 	.word	0x40010000
 8006f88:	40010400 	.word	0x40010400

08006f8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b087      	sub	sp, #28
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a1b      	ldr	r3, [r3, #32]
 8006f9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6a1b      	ldr	r3, [r3, #32]
 8006fa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	69db      	ldr	r3, [r3, #28]
 8006fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f023 0303 	bic.w	r3, r3, #3
 8006fc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006fd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	021b      	lsls	r3, r3, #8
 8006fdc:	697a      	ldr	r2, [r7, #20]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a21      	ldr	r2, [pc, #132]	; (800706c <TIM_OC3_SetConfig+0xe0>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d003      	beq.n	8006ff2 <TIM_OC3_SetConfig+0x66>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a20      	ldr	r2, [pc, #128]	; (8007070 <TIM_OC3_SetConfig+0xe4>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d10d      	bne.n	800700e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ff8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	021b      	lsls	r3, r3, #8
 8007000:	697a      	ldr	r2, [r7, #20]
 8007002:	4313      	orrs	r3, r2
 8007004:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800700c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4a16      	ldr	r2, [pc, #88]	; (800706c <TIM_OC3_SetConfig+0xe0>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d003      	beq.n	800701e <TIM_OC3_SetConfig+0x92>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4a15      	ldr	r2, [pc, #84]	; (8007070 <TIM_OC3_SetConfig+0xe4>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d113      	bne.n	8007046 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007024:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800702c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	695b      	ldr	r3, [r3, #20]
 8007032:	011b      	lsls	r3, r3, #4
 8007034:	693a      	ldr	r2, [r7, #16]
 8007036:	4313      	orrs	r3, r2
 8007038:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	699b      	ldr	r3, [r3, #24]
 800703e:	011b      	lsls	r3, r3, #4
 8007040:	693a      	ldr	r2, [r7, #16]
 8007042:	4313      	orrs	r3, r2
 8007044:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	693a      	ldr	r2, [r7, #16]
 800704a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	685a      	ldr	r2, [r3, #4]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	697a      	ldr	r2, [r7, #20]
 800705e:	621a      	str	r2, [r3, #32]
}
 8007060:	bf00      	nop
 8007062:	371c      	adds	r7, #28
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr
 800706c:	40010000 	.word	0x40010000
 8007070:	40010400 	.word	0x40010400

08007074 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007074:	b480      	push	{r7}
 8007076:	b087      	sub	sp, #28
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a1b      	ldr	r3, [r3, #32]
 8007082:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a1b      	ldr	r3, [r3, #32]
 800708e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	69db      	ldr	r3, [r3, #28]
 800709a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	021b      	lsls	r3, r3, #8
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	031b      	lsls	r3, r3, #12
 80070c6:	693a      	ldr	r2, [r7, #16]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4a12      	ldr	r2, [pc, #72]	; (8007118 <TIM_OC4_SetConfig+0xa4>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d003      	beq.n	80070dc <TIM_OC4_SetConfig+0x68>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a11      	ldr	r2, [pc, #68]	; (800711c <TIM_OC4_SetConfig+0xa8>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d109      	bne.n	80070f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	695b      	ldr	r3, [r3, #20]
 80070e8:	019b      	lsls	r3, r3, #6
 80070ea:	697a      	ldr	r2, [r7, #20]
 80070ec:	4313      	orrs	r3, r2
 80070ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	68fa      	ldr	r2, [r7, #12]
 80070fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	685a      	ldr	r2, [r3, #4]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	693a      	ldr	r2, [r7, #16]
 8007108:	621a      	str	r2, [r3, #32]
}
 800710a:	bf00      	nop
 800710c:	371c      	adds	r7, #28
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	40010000 	.word	0x40010000
 800711c:	40010400 	.word	0x40010400

08007120 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007120:	b480      	push	{r7}
 8007122:	b087      	sub	sp, #28
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6a1b      	ldr	r3, [r3, #32]
 8007130:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6a1b      	ldr	r3, [r3, #32]
 8007136:	f023 0201 	bic.w	r2, r3, #1
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	699b      	ldr	r3, [r3, #24]
 8007142:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800714a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	011b      	lsls	r3, r3, #4
 8007150:	693a      	ldr	r2, [r7, #16]
 8007152:	4313      	orrs	r3, r2
 8007154:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	f023 030a 	bic.w	r3, r3, #10
 800715c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800715e:	697a      	ldr	r2, [r7, #20]
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	4313      	orrs	r3, r2
 8007164:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	693a      	ldr	r2, [r7, #16]
 800716a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	697a      	ldr	r2, [r7, #20]
 8007170:	621a      	str	r2, [r3, #32]
}
 8007172:	bf00      	nop
 8007174:	371c      	adds	r7, #28
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr

0800717e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800717e:	b480      	push	{r7}
 8007180:	b087      	sub	sp, #28
 8007182:	af00      	add	r7, sp, #0
 8007184:	60f8      	str	r0, [r7, #12]
 8007186:	60b9      	str	r1, [r7, #8]
 8007188:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6a1b      	ldr	r3, [r3, #32]
 800718e:	f023 0210 	bic.w	r2, r3, #16
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6a1b      	ldr	r3, [r3, #32]
 80071a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80071a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	031b      	lsls	r3, r3, #12
 80071ae:	697a      	ldr	r2, [r7, #20]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80071ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	011b      	lsls	r3, r3, #4
 80071c0:	693a      	ldr	r2, [r7, #16]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	697a      	ldr	r2, [r7, #20]
 80071ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	621a      	str	r2, [r3, #32]
}
 80071d2:	bf00      	nop
 80071d4:	371c      	adds	r7, #28
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr

080071de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80071de:	b480      	push	{r7}
 80071e0:	b085      	sub	sp, #20
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
 80071e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071f6:	683a      	ldr	r2, [r7, #0]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	f043 0307 	orr.w	r3, r3, #7
 8007200:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	609a      	str	r2, [r3, #8]
}
 8007208:	bf00      	nop
 800720a:	3714      	adds	r7, #20
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007214:	b480      	push	{r7}
 8007216:	b087      	sub	sp, #28
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	607a      	str	r2, [r7, #4]
 8007220:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800722e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	021a      	lsls	r2, r3, #8
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	431a      	orrs	r2, r3
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	4313      	orrs	r3, r2
 800723c:	697a      	ldr	r2, [r7, #20]
 800723e:	4313      	orrs	r3, r2
 8007240:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	697a      	ldr	r2, [r7, #20]
 8007246:	609a      	str	r2, [r3, #8]
}
 8007248:	bf00      	nop
 800724a:	371c      	adds	r7, #28
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007254:	b480      	push	{r7}
 8007256:	b087      	sub	sp, #28
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	f003 031f 	and.w	r3, r3, #31
 8007266:	2201      	movs	r2, #1
 8007268:	fa02 f303 	lsl.w	r3, r2, r3
 800726c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6a1a      	ldr	r2, [r3, #32]
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	43db      	mvns	r3, r3
 8007276:	401a      	ands	r2, r3
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6a1a      	ldr	r2, [r3, #32]
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	f003 031f 	and.w	r3, r3, #31
 8007286:	6879      	ldr	r1, [r7, #4]
 8007288:	fa01 f303 	lsl.w	r3, r1, r3
 800728c:	431a      	orrs	r2, r3
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	621a      	str	r2, [r3, #32]
}
 8007292:	bf00      	nop
 8007294:	371c      	adds	r7, #28
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
	...

080072a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d101      	bne.n	80072b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072b4:	2302      	movs	r3, #2
 80072b6:	e05a      	b.n	800736e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2202      	movs	r2, #2
 80072c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a21      	ldr	r2, [pc, #132]	; (800737c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d022      	beq.n	8007342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007304:	d01d      	beq.n	8007342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a1d      	ldr	r2, [pc, #116]	; (8007380 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d018      	beq.n	8007342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a1b      	ldr	r2, [pc, #108]	; (8007384 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d013      	beq.n	8007342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a1a      	ldr	r2, [pc, #104]	; (8007388 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d00e      	beq.n	8007342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a18      	ldr	r2, [pc, #96]	; (800738c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d009      	beq.n	8007342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a17      	ldr	r2, [pc, #92]	; (8007390 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d004      	beq.n	8007342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a15      	ldr	r2, [pc, #84]	; (8007394 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d10c      	bne.n	800735c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007348:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	68ba      	ldr	r2, [r7, #8]
 8007350:	4313      	orrs	r3, r2
 8007352:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68ba      	ldr	r2, [r7, #8]
 800735a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	3714      	adds	r7, #20
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	40010000 	.word	0x40010000
 8007380:	40000400 	.word	0x40000400
 8007384:	40000800 	.word	0x40000800
 8007388:	40000c00 	.word	0x40000c00
 800738c:	40010400 	.word	0x40010400
 8007390:	40014000 	.word	0x40014000
 8007394:	40001800 	.word	0x40001800

08007398 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d101      	bne.n	80073aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	e03f      	b.n	800742a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d106      	bne.n	80073c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f7fb fe24 	bl	800300c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2224      	movs	r2, #36	; 0x24
 80073c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	68da      	ldr	r2, [r3, #12]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 fc6d 	bl	8007cbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	691a      	ldr	r2, [r3, #16]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	695a      	ldr	r2, [r3, #20]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007400:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	68da      	ldr	r2, [r3, #12]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007410:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2220      	movs	r2, #32
 800741c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2220      	movs	r2, #32
 8007424:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3708      	adds	r7, #8
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007432:	b580      	push	{r7, lr}
 8007434:	b088      	sub	sp, #32
 8007436:	af02      	add	r7, sp, #8
 8007438:	60f8      	str	r0, [r7, #12]
 800743a:	60b9      	str	r1, [r7, #8]
 800743c:	603b      	str	r3, [r7, #0]
 800743e:	4613      	mov	r3, r2
 8007440:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007442:	2300      	movs	r3, #0
 8007444:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800744c:	b2db      	uxtb	r3, r3
 800744e:	2b20      	cmp	r3, #32
 8007450:	f040 8083 	bne.w	800755a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d002      	beq.n	8007460 <HAL_UART_Transmit+0x2e>
 800745a:	88fb      	ldrh	r3, [r7, #6]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d101      	bne.n	8007464 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	e07b      	b.n	800755c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800746a:	2b01      	cmp	r3, #1
 800746c:	d101      	bne.n	8007472 <HAL_UART_Transmit+0x40>
 800746e:	2302      	movs	r3, #2
 8007470:	e074      	b.n	800755c <HAL_UART_Transmit+0x12a>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2201      	movs	r2, #1
 8007476:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2200      	movs	r2, #0
 800747e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2221      	movs	r2, #33	; 0x21
 8007484:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007488:	f7fc f912 	bl	80036b0 <HAL_GetTick>
 800748c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	88fa      	ldrh	r2, [r7, #6]
 8007492:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	88fa      	ldrh	r2, [r7, #6]
 8007498:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2200      	movs	r2, #0
 800749e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80074a2:	e042      	b.n	800752a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	3b01      	subs	r3, #1
 80074ac:	b29a      	uxth	r2, r3
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074ba:	d122      	bne.n	8007502 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	9300      	str	r3, [sp, #0]
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	2200      	movs	r2, #0
 80074c4:	2180      	movs	r1, #128	; 0x80
 80074c6:	68f8      	ldr	r0, [r7, #12]
 80074c8:	f000 fa76 	bl	80079b8 <UART_WaitOnFlagUntilTimeout>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d001      	beq.n	80074d6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80074d2:	2303      	movs	r3, #3
 80074d4:	e042      	b.n	800755c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	881b      	ldrh	r3, [r3, #0]
 80074de:	461a      	mov	r2, r3
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074e8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d103      	bne.n	80074fa <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	3302      	adds	r3, #2
 80074f6:	60bb      	str	r3, [r7, #8]
 80074f8:	e017      	b.n	800752a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	3301      	adds	r3, #1
 80074fe:	60bb      	str	r3, [r7, #8]
 8007500:	e013      	b.n	800752a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	9300      	str	r3, [sp, #0]
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	2200      	movs	r2, #0
 800750a:	2180      	movs	r1, #128	; 0x80
 800750c:	68f8      	ldr	r0, [r7, #12]
 800750e:	f000 fa53 	bl	80079b8 <UART_WaitOnFlagUntilTimeout>
 8007512:	4603      	mov	r3, r0
 8007514:	2b00      	cmp	r3, #0
 8007516:	d001      	beq.n	800751c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8007518:	2303      	movs	r3, #3
 800751a:	e01f      	b.n	800755c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	1c5a      	adds	r2, r3, #1
 8007520:	60ba      	str	r2, [r7, #8]
 8007522:	781a      	ldrb	r2, [r3, #0]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800752e:	b29b      	uxth	r3, r3
 8007530:	2b00      	cmp	r3, #0
 8007532:	d1b7      	bne.n	80074a4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	9300      	str	r3, [sp, #0]
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	2200      	movs	r2, #0
 800753c:	2140      	movs	r1, #64	; 0x40
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	f000 fa3a 	bl	80079b8 <UART_WaitOnFlagUntilTimeout>
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d001      	beq.n	800754e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800754a:	2303      	movs	r3, #3
 800754c:	e006      	b.n	800755c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2220      	movs	r2, #32
 8007552:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8007556:	2300      	movs	r3, #0
 8007558:	e000      	b.n	800755c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800755a:	2302      	movs	r3, #2
  }
}
 800755c:	4618      	mov	r0, r3
 800755e:	3718      	adds	r7, #24
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b086      	sub	sp, #24
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	4613      	mov	r3, r2
 8007570:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007578:	b2db      	uxtb	r3, r3
 800757a:	2b20      	cmp	r3, #32
 800757c:	d166      	bne.n	800764c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d002      	beq.n	800758a <HAL_UART_Receive_DMA+0x26>
 8007584:	88fb      	ldrh	r3, [r7, #6]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d101      	bne.n	800758e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	e05f      	b.n	800764e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007594:	2b01      	cmp	r3, #1
 8007596:	d101      	bne.n	800759c <HAL_UART_Receive_DMA+0x38>
 8007598:	2302      	movs	r3, #2
 800759a:	e058      	b.n	800764e <HAL_UART_Receive_DMA+0xea>
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80075a4:	68ba      	ldr	r2, [r7, #8]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	88fa      	ldrh	r2, [r7, #6]
 80075ae:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2200      	movs	r2, #0
 80075b4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2222      	movs	r2, #34	; 0x22
 80075ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075c2:	4a25      	ldr	r2, [pc, #148]	; (8007658 <HAL_UART_Receive_DMA+0xf4>)
 80075c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ca:	4a24      	ldr	r2, [pc, #144]	; (800765c <HAL_UART_Receive_DMA+0xf8>)
 80075cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075d2:	4a23      	ldr	r2, [pc, #140]	; (8007660 <HAL_UART_Receive_DMA+0xfc>)
 80075d4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075da:	2200      	movs	r2, #0
 80075dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80075de:	f107 0308 	add.w	r3, r7, #8
 80075e2:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	3304      	adds	r3, #4
 80075ee:	4619      	mov	r1, r3
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	88fb      	ldrh	r3, [r7, #6]
 80075f6:	f7fc ff1b 	bl	8004430 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80075fa:	2300      	movs	r3, #0
 80075fc:	613b      	str	r3, [r7, #16]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	613b      	str	r3, [r7, #16]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	613b      	str	r3, [r7, #16]
 800760e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	68da      	ldr	r2, [r3, #12]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007626:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	695a      	ldr	r2, [r3, #20]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f042 0201 	orr.w	r2, r2, #1
 8007636:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	695a      	ldr	r2, [r3, #20]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007646:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8007648:	2300      	movs	r3, #0
 800764a:	e000      	b.n	800764e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800764c:	2302      	movs	r3, #2
  }
}
 800764e:	4618      	mov	r0, r3
 8007650:	3718      	adds	r7, #24
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	080078a1 	.word	0x080078a1
 800765c:	08007909 	.word	0x08007909
 8007660:	08007925 	.word	0x08007925

08007664 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b088      	sub	sp, #32
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	695b      	ldr	r3, [r3, #20]
 8007682:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007684:	2300      	movs	r3, #0
 8007686:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007688:	2300      	movs	r3, #0
 800768a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800768c:	69fb      	ldr	r3, [r7, #28]
 800768e:	f003 030f 	and.w	r3, r3, #15
 8007692:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d10d      	bne.n	80076b6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800769a:	69fb      	ldr	r3, [r7, #28]
 800769c:	f003 0320 	and.w	r3, r3, #32
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d008      	beq.n	80076b6 <HAL_UART_IRQHandler+0x52>
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	f003 0320 	and.w	r3, r3, #32
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d003      	beq.n	80076b6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 fa82 	bl	8007bb8 <UART_Receive_IT>
      return;
 80076b4:	e0d1      	b.n	800785a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f000 80b0 	beq.w	800781e <HAL_UART_IRQHandler+0x1ba>
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	f003 0301 	and.w	r3, r3, #1
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d105      	bne.n	80076d4 <HAL_UART_IRQHandler+0x70>
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f000 80a5 	beq.w	800781e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	f003 0301 	and.w	r3, r3, #1
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00a      	beq.n	80076f4 <HAL_UART_IRQHandler+0x90>
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d005      	beq.n	80076f4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ec:	f043 0201 	orr.w	r2, r3, #1
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	f003 0304 	and.w	r3, r3, #4
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00a      	beq.n	8007714 <HAL_UART_IRQHandler+0xb0>
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	f003 0301 	and.w	r3, r3, #1
 8007704:	2b00      	cmp	r3, #0
 8007706:	d005      	beq.n	8007714 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800770c:	f043 0202 	orr.w	r2, r3, #2
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	f003 0302 	and.w	r3, r3, #2
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00a      	beq.n	8007734 <HAL_UART_IRQHandler+0xd0>
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	f003 0301 	and.w	r3, r3, #1
 8007724:	2b00      	cmp	r3, #0
 8007726:	d005      	beq.n	8007734 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800772c:	f043 0204 	orr.w	r2, r3, #4
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	f003 0308 	and.w	r3, r3, #8
 800773a:	2b00      	cmp	r3, #0
 800773c:	d00f      	beq.n	800775e <HAL_UART_IRQHandler+0xfa>
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	f003 0320 	and.w	r3, r3, #32
 8007744:	2b00      	cmp	r3, #0
 8007746:	d104      	bne.n	8007752 <HAL_UART_IRQHandler+0xee>
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	f003 0301 	and.w	r3, r3, #1
 800774e:	2b00      	cmp	r3, #0
 8007750:	d005      	beq.n	800775e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007756:	f043 0208 	orr.w	r2, r3, #8
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007762:	2b00      	cmp	r3, #0
 8007764:	d078      	beq.n	8007858 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	f003 0320 	and.w	r3, r3, #32
 800776c:	2b00      	cmp	r3, #0
 800776e:	d007      	beq.n	8007780 <HAL_UART_IRQHandler+0x11c>
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	f003 0320 	and.w	r3, r3, #32
 8007776:	2b00      	cmp	r3, #0
 8007778:	d002      	beq.n	8007780 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 fa1c 	bl	8007bb8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	695b      	ldr	r3, [r3, #20]
 8007786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800778a:	2b40      	cmp	r3, #64	; 0x40
 800778c:	bf0c      	ite	eq
 800778e:	2301      	moveq	r3, #1
 8007790:	2300      	movne	r3, #0
 8007792:	b2db      	uxtb	r3, r3
 8007794:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800779a:	f003 0308 	and.w	r3, r3, #8
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d102      	bne.n	80077a8 <HAL_UART_IRQHandler+0x144>
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d031      	beq.n	800780c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 f965 	bl	8007a78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	695b      	ldr	r3, [r3, #20]
 80077b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077b8:	2b40      	cmp	r3, #64	; 0x40
 80077ba:	d123      	bne.n	8007804 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	695a      	ldr	r2, [r3, #20]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077ca:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d013      	beq.n	80077fc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077d8:	4a21      	ldr	r2, [pc, #132]	; (8007860 <HAL_UART_IRQHandler+0x1fc>)
 80077da:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077e0:	4618      	mov	r0, r3
 80077e2:	f7fc fe7d 	bl	80044e0 <HAL_DMA_Abort_IT>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d016      	beq.n	800781a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80077f6:	4610      	mov	r0, r2
 80077f8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077fa:	e00e      	b.n	800781a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 f845 	bl	800788c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007802:	e00a      	b.n	800781a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 f841 	bl	800788c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800780a:	e006      	b.n	800781a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 f83d 	bl	800788c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007818:	e01e      	b.n	8007858 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800781a:	bf00      	nop
    return;
 800781c:	e01c      	b.n	8007858 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800781e:	69fb      	ldr	r3, [r7, #28]
 8007820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007824:	2b00      	cmp	r3, #0
 8007826:	d008      	beq.n	800783a <HAL_UART_IRQHandler+0x1d6>
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800782e:	2b00      	cmp	r3, #0
 8007830:	d003      	beq.n	800783a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 f952 	bl	8007adc <UART_Transmit_IT>
    return;
 8007838:	e00f      	b.n	800785a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00a      	beq.n	800785a <HAL_UART_IRQHandler+0x1f6>
 8007844:	69bb      	ldr	r3, [r7, #24]
 8007846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800784a:	2b00      	cmp	r3, #0
 800784c:	d005      	beq.n	800785a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 f99a 	bl	8007b88 <UART_EndTransmit_IT>
    return;
 8007854:	bf00      	nop
 8007856:	e000      	b.n	800785a <HAL_UART_IRQHandler+0x1f6>
    return;
 8007858:	bf00      	nop
  }
}
 800785a:	3720      	adds	r7, #32
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	08007ab5 	.word	0x08007ab5

08007864 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800786c:	bf00      	nop
 800786e:	370c      	adds	r7, #12
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007880:	bf00      	nop
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007894:	bf00      	nop
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ac:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d11e      	bne.n	80078fa <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2200      	movs	r2, #0
 80078c0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	68da      	ldr	r2, [r3, #12]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80078d0:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	695a      	ldr	r2, [r3, #20]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f022 0201 	bic.w	r2, r2, #1
 80078e0:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	695a      	ldr	r2, [r3, #20]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078f0:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2220      	movs	r2, #32
 80078f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80078fa:	68f8      	ldr	r0, [r7, #12]
 80078fc:	f7fb f8de 	bl	8002abc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007900:	bf00      	nop
 8007902:	3710      	adds	r7, #16
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007914:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8007916:	68f8      	ldr	r0, [r7, #12]
 8007918:	f7ff ffae 	bl	8007878 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800791c:	bf00      	nop
 800791e:	3710      	adds	r7, #16
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800792c:	2300      	movs	r3, #0
 800792e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007934:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	695b      	ldr	r3, [r3, #20]
 800793c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007940:	2b80      	cmp	r3, #128	; 0x80
 8007942:	bf0c      	ite	eq
 8007944:	2301      	moveq	r3, #1
 8007946:	2300      	movne	r3, #0
 8007948:	b2db      	uxtb	r3, r3
 800794a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007952:	b2db      	uxtb	r3, r3
 8007954:	2b21      	cmp	r3, #33	; 0x21
 8007956:	d108      	bne.n	800796a <UART_DMAError+0x46>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d005      	beq.n	800796a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	2200      	movs	r2, #0
 8007962:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007964:	68b8      	ldr	r0, [r7, #8]
 8007966:	f000 f871 	bl	8007a4c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	695b      	ldr	r3, [r3, #20]
 8007970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007974:	2b40      	cmp	r3, #64	; 0x40
 8007976:	bf0c      	ite	eq
 8007978:	2301      	moveq	r3, #1
 800797a:	2300      	movne	r3, #0
 800797c:	b2db      	uxtb	r3, r3
 800797e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007986:	b2db      	uxtb	r3, r3
 8007988:	2b22      	cmp	r3, #34	; 0x22
 800798a:	d108      	bne.n	800799e <UART_DMAError+0x7a>
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d005      	beq.n	800799e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	2200      	movs	r2, #0
 8007996:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007998:	68b8      	ldr	r0, [r7, #8]
 800799a:	f000 f86d 	bl	8007a78 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079a2:	f043 0210 	orr.w	r2, r3, #16
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079aa:	68b8      	ldr	r0, [r7, #8]
 80079ac:	f7ff ff6e 	bl	800788c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079b0:	bf00      	nop
 80079b2:	3710      	adds	r7, #16
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	603b      	str	r3, [r7, #0]
 80079c4:	4613      	mov	r3, r2
 80079c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079c8:	e02c      	b.n	8007a24 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d0:	d028      	beq.n	8007a24 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d007      	beq.n	80079e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80079d8:	f7fb fe6a 	bl	80036b0 <HAL_GetTick>
 80079dc:	4602      	mov	r2, r0
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	69ba      	ldr	r2, [r7, #24]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d21d      	bcs.n	8007a24 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	68da      	ldr	r2, [r3, #12]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80079f6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	695a      	ldr	r2, [r3, #20]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f022 0201 	bic.w	r2, r2, #1
 8007a06:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2220      	movs	r2, #32
 8007a0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2220      	movs	r2, #32
 8007a14:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007a20:	2303      	movs	r3, #3
 8007a22:	e00f      	b.n	8007a44 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	68ba      	ldr	r2, [r7, #8]
 8007a30:	429a      	cmp	r2, r3
 8007a32:	bf0c      	ite	eq
 8007a34:	2301      	moveq	r3, #1
 8007a36:	2300      	movne	r3, #0
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	79fb      	ldrb	r3, [r7, #7]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d0c3      	beq.n	80079ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007a42:	2300      	movs	r3, #0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3710      	adds	r7, #16
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68da      	ldr	r2, [r3, #12]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007a62:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2220      	movs	r2, #32
 8007a68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8007a6c:	bf00      	nop
 8007a6e:	370c      	adds	r7, #12
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	68da      	ldr	r2, [r3, #12]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007a8e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	695a      	ldr	r2, [r3, #20]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f022 0201 	bic.w	r2, r2, #1
 8007a9e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2220      	movs	r2, #32
 8007aa4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007aa8:	bf00      	nop
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2200      	movs	r2, #0
 8007acc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ace:	68f8      	ldr	r0, [r7, #12]
 8007ad0:	f7ff fedc 	bl	800788c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ad4:	bf00      	nop
 8007ad6:	3710      	adds	r7, #16
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b085      	sub	sp, #20
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	2b21      	cmp	r3, #33	; 0x21
 8007aee:	d144      	bne.n	8007b7a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007af8:	d11a      	bne.n	8007b30 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a1b      	ldr	r3, [r3, #32]
 8007afe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	881b      	ldrh	r3, [r3, #0]
 8007b04:	461a      	mov	r2, r3
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b0e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	691b      	ldr	r3, [r3, #16]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d105      	bne.n	8007b24 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6a1b      	ldr	r3, [r3, #32]
 8007b1c:	1c9a      	adds	r2, r3, #2
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	621a      	str	r2, [r3, #32]
 8007b22:	e00e      	b.n	8007b42 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6a1b      	ldr	r3, [r3, #32]
 8007b28:	1c5a      	adds	r2, r3, #1
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	621a      	str	r2, [r3, #32]
 8007b2e:	e008      	b.n	8007b42 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6a1b      	ldr	r3, [r3, #32]
 8007b34:	1c59      	adds	r1, r3, #1
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	6211      	str	r1, [r2, #32]
 8007b3a:	781a      	ldrb	r2, [r3, #0]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	4619      	mov	r1, r3
 8007b50:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d10f      	bne.n	8007b76 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68da      	ldr	r2, [r3, #12]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b64:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	68da      	ldr	r2, [r3, #12]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b74:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007b76:	2300      	movs	r3, #0
 8007b78:	e000      	b.n	8007b7c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007b7a:	2302      	movs	r3, #2
  }
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3714      	adds	r7, #20
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	68da      	ldr	r2, [r3, #12]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b9e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2220      	movs	r2, #32
 8007ba4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f7ff fe5b 	bl	8007864 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007bae:	2300      	movs	r3, #0
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3708      	adds	r7, #8
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	2b22      	cmp	r3, #34	; 0x22
 8007bca:	d171      	bne.n	8007cb0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bd4:	d123      	bne.n	8007c1e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bda:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d10e      	bne.n	8007c02 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bf0:	b29a      	uxth	r2, r3
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bfa:	1c9a      	adds	r2, r3, #2
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	629a      	str	r2, [r3, #40]	; 0x28
 8007c00:	e029      	b.n	8007c56 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	b29a      	uxth	r2, r3
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c16:	1c5a      	adds	r2, r3, #1
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	629a      	str	r2, [r3, #40]	; 0x28
 8007c1c:	e01b      	b.n	8007c56 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d10a      	bne.n	8007c3c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	6858      	ldr	r0, [r3, #4]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c30:	1c59      	adds	r1, r3, #1
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	6291      	str	r1, [r2, #40]	; 0x28
 8007c36:	b2c2      	uxtb	r2, r0
 8007c38:	701a      	strb	r2, [r3, #0]
 8007c3a:	e00c      	b.n	8007c56 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	b2da      	uxtb	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c48:	1c58      	adds	r0, r3, #1
 8007c4a:	6879      	ldr	r1, [r7, #4]
 8007c4c:	6288      	str	r0, [r1, #40]	; 0x28
 8007c4e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007c52:	b2d2      	uxtb	r2, r2
 8007c54:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	4619      	mov	r1, r3
 8007c64:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d120      	bne.n	8007cac <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	68da      	ldr	r2, [r3, #12]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f022 0220 	bic.w	r2, r2, #32
 8007c78:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	68da      	ldr	r2, [r3, #12]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	695a      	ldr	r2, [r3, #20]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f022 0201 	bic.w	r2, r2, #1
 8007c98:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2220      	movs	r2, #32
 8007c9e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f7fa ff0a 	bl	8002abc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	e002      	b.n	8007cb2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007cac:	2300      	movs	r3, #0
 8007cae:	e000      	b.n	8007cb2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007cb0:	2302      	movs	r3, #2
  }
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3710      	adds	r7, #16
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
	...

08007cbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc0:	b085      	sub	sp, #20
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	691b      	ldr	r3, [r3, #16]
 8007ccc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	68da      	ldr	r2, [r3, #12]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	430a      	orrs	r2, r1
 8007cda:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	689a      	ldr	r2, [r3, #8]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	431a      	orrs	r2, r3
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	695b      	ldr	r3, [r3, #20]
 8007cea:	431a      	orrs	r2, r3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	69db      	ldr	r3, [r3, #28]
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	68db      	ldr	r3, [r3, #12]
 8007cfa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007cfe:	f023 030c 	bic.w	r3, r3, #12
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	6812      	ldr	r2, [r2, #0]
 8007d06:	68f9      	ldr	r1, [r7, #12]
 8007d08:	430b      	orrs	r3, r1
 8007d0a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	695b      	ldr	r3, [r3, #20]
 8007d12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	699a      	ldr	r2, [r3, #24]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	430a      	orrs	r2, r1
 8007d20:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	69db      	ldr	r3, [r3, #28]
 8007d26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d2a:	f040 818b 	bne.w	8008044 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4ac1      	ldr	r2, [pc, #772]	; (8008038 <UART_SetConfig+0x37c>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d005      	beq.n	8007d44 <UART_SetConfig+0x88>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4abf      	ldr	r2, [pc, #764]	; (800803c <UART_SetConfig+0x380>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	f040 80bd 	bne.w	8007ebe <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007d44:	f7fe fd6c 	bl	8006820 <HAL_RCC_GetPCLK2Freq>
 8007d48:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	461d      	mov	r5, r3
 8007d4e:	f04f 0600 	mov.w	r6, #0
 8007d52:	46a8      	mov	r8, r5
 8007d54:	46b1      	mov	r9, r6
 8007d56:	eb18 0308 	adds.w	r3, r8, r8
 8007d5a:	eb49 0409 	adc.w	r4, r9, r9
 8007d5e:	4698      	mov	r8, r3
 8007d60:	46a1      	mov	r9, r4
 8007d62:	eb18 0805 	adds.w	r8, r8, r5
 8007d66:	eb49 0906 	adc.w	r9, r9, r6
 8007d6a:	f04f 0100 	mov.w	r1, #0
 8007d6e:	f04f 0200 	mov.w	r2, #0
 8007d72:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007d76:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007d7a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007d7e:	4688      	mov	r8, r1
 8007d80:	4691      	mov	r9, r2
 8007d82:	eb18 0005 	adds.w	r0, r8, r5
 8007d86:	eb49 0106 	adc.w	r1, r9, r6
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	461d      	mov	r5, r3
 8007d90:	f04f 0600 	mov.w	r6, #0
 8007d94:	196b      	adds	r3, r5, r5
 8007d96:	eb46 0406 	adc.w	r4, r6, r6
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	4623      	mov	r3, r4
 8007d9e:	f7f8 ff73 	bl	8000c88 <__aeabi_uldivmod>
 8007da2:	4603      	mov	r3, r0
 8007da4:	460c      	mov	r4, r1
 8007da6:	461a      	mov	r2, r3
 8007da8:	4ba5      	ldr	r3, [pc, #660]	; (8008040 <UART_SetConfig+0x384>)
 8007daa:	fba3 2302 	umull	r2, r3, r3, r2
 8007dae:	095b      	lsrs	r3, r3, #5
 8007db0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	461d      	mov	r5, r3
 8007db8:	f04f 0600 	mov.w	r6, #0
 8007dbc:	46a9      	mov	r9, r5
 8007dbe:	46b2      	mov	sl, r6
 8007dc0:	eb19 0309 	adds.w	r3, r9, r9
 8007dc4:	eb4a 040a 	adc.w	r4, sl, sl
 8007dc8:	4699      	mov	r9, r3
 8007dca:	46a2      	mov	sl, r4
 8007dcc:	eb19 0905 	adds.w	r9, r9, r5
 8007dd0:	eb4a 0a06 	adc.w	sl, sl, r6
 8007dd4:	f04f 0100 	mov.w	r1, #0
 8007dd8:	f04f 0200 	mov.w	r2, #0
 8007ddc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007de0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007de4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007de8:	4689      	mov	r9, r1
 8007dea:	4692      	mov	sl, r2
 8007dec:	eb19 0005 	adds.w	r0, r9, r5
 8007df0:	eb4a 0106 	adc.w	r1, sl, r6
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	461d      	mov	r5, r3
 8007dfa:	f04f 0600 	mov.w	r6, #0
 8007dfe:	196b      	adds	r3, r5, r5
 8007e00:	eb46 0406 	adc.w	r4, r6, r6
 8007e04:	461a      	mov	r2, r3
 8007e06:	4623      	mov	r3, r4
 8007e08:	f7f8 ff3e 	bl	8000c88 <__aeabi_uldivmod>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	460c      	mov	r4, r1
 8007e10:	461a      	mov	r2, r3
 8007e12:	4b8b      	ldr	r3, [pc, #556]	; (8008040 <UART_SetConfig+0x384>)
 8007e14:	fba3 1302 	umull	r1, r3, r3, r2
 8007e18:	095b      	lsrs	r3, r3, #5
 8007e1a:	2164      	movs	r1, #100	; 0x64
 8007e1c:	fb01 f303 	mul.w	r3, r1, r3
 8007e20:	1ad3      	subs	r3, r2, r3
 8007e22:	00db      	lsls	r3, r3, #3
 8007e24:	3332      	adds	r3, #50	; 0x32
 8007e26:	4a86      	ldr	r2, [pc, #536]	; (8008040 <UART_SetConfig+0x384>)
 8007e28:	fba2 2303 	umull	r2, r3, r2, r3
 8007e2c:	095b      	lsrs	r3, r3, #5
 8007e2e:	005b      	lsls	r3, r3, #1
 8007e30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007e34:	4498      	add	r8, r3
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	461d      	mov	r5, r3
 8007e3a:	f04f 0600 	mov.w	r6, #0
 8007e3e:	46a9      	mov	r9, r5
 8007e40:	46b2      	mov	sl, r6
 8007e42:	eb19 0309 	adds.w	r3, r9, r9
 8007e46:	eb4a 040a 	adc.w	r4, sl, sl
 8007e4a:	4699      	mov	r9, r3
 8007e4c:	46a2      	mov	sl, r4
 8007e4e:	eb19 0905 	adds.w	r9, r9, r5
 8007e52:	eb4a 0a06 	adc.w	sl, sl, r6
 8007e56:	f04f 0100 	mov.w	r1, #0
 8007e5a:	f04f 0200 	mov.w	r2, #0
 8007e5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e62:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007e66:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007e6a:	4689      	mov	r9, r1
 8007e6c:	4692      	mov	sl, r2
 8007e6e:	eb19 0005 	adds.w	r0, r9, r5
 8007e72:	eb4a 0106 	adc.w	r1, sl, r6
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	461d      	mov	r5, r3
 8007e7c:	f04f 0600 	mov.w	r6, #0
 8007e80:	196b      	adds	r3, r5, r5
 8007e82:	eb46 0406 	adc.w	r4, r6, r6
 8007e86:	461a      	mov	r2, r3
 8007e88:	4623      	mov	r3, r4
 8007e8a:	f7f8 fefd 	bl	8000c88 <__aeabi_uldivmod>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	460c      	mov	r4, r1
 8007e92:	461a      	mov	r2, r3
 8007e94:	4b6a      	ldr	r3, [pc, #424]	; (8008040 <UART_SetConfig+0x384>)
 8007e96:	fba3 1302 	umull	r1, r3, r3, r2
 8007e9a:	095b      	lsrs	r3, r3, #5
 8007e9c:	2164      	movs	r1, #100	; 0x64
 8007e9e:	fb01 f303 	mul.w	r3, r1, r3
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	00db      	lsls	r3, r3, #3
 8007ea6:	3332      	adds	r3, #50	; 0x32
 8007ea8:	4a65      	ldr	r2, [pc, #404]	; (8008040 <UART_SetConfig+0x384>)
 8007eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8007eae:	095b      	lsrs	r3, r3, #5
 8007eb0:	f003 0207 	and.w	r2, r3, #7
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4442      	add	r2, r8
 8007eba:	609a      	str	r2, [r3, #8]
 8007ebc:	e26f      	b.n	800839e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007ebe:	f7fe fc9b 	bl	80067f8 <HAL_RCC_GetPCLK1Freq>
 8007ec2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	461d      	mov	r5, r3
 8007ec8:	f04f 0600 	mov.w	r6, #0
 8007ecc:	46a8      	mov	r8, r5
 8007ece:	46b1      	mov	r9, r6
 8007ed0:	eb18 0308 	adds.w	r3, r8, r8
 8007ed4:	eb49 0409 	adc.w	r4, r9, r9
 8007ed8:	4698      	mov	r8, r3
 8007eda:	46a1      	mov	r9, r4
 8007edc:	eb18 0805 	adds.w	r8, r8, r5
 8007ee0:	eb49 0906 	adc.w	r9, r9, r6
 8007ee4:	f04f 0100 	mov.w	r1, #0
 8007ee8:	f04f 0200 	mov.w	r2, #0
 8007eec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007ef0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007ef4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007ef8:	4688      	mov	r8, r1
 8007efa:	4691      	mov	r9, r2
 8007efc:	eb18 0005 	adds.w	r0, r8, r5
 8007f00:	eb49 0106 	adc.w	r1, r9, r6
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	461d      	mov	r5, r3
 8007f0a:	f04f 0600 	mov.w	r6, #0
 8007f0e:	196b      	adds	r3, r5, r5
 8007f10:	eb46 0406 	adc.w	r4, r6, r6
 8007f14:	461a      	mov	r2, r3
 8007f16:	4623      	mov	r3, r4
 8007f18:	f7f8 feb6 	bl	8000c88 <__aeabi_uldivmod>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	460c      	mov	r4, r1
 8007f20:	461a      	mov	r2, r3
 8007f22:	4b47      	ldr	r3, [pc, #284]	; (8008040 <UART_SetConfig+0x384>)
 8007f24:	fba3 2302 	umull	r2, r3, r3, r2
 8007f28:	095b      	lsrs	r3, r3, #5
 8007f2a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	461d      	mov	r5, r3
 8007f32:	f04f 0600 	mov.w	r6, #0
 8007f36:	46a9      	mov	r9, r5
 8007f38:	46b2      	mov	sl, r6
 8007f3a:	eb19 0309 	adds.w	r3, r9, r9
 8007f3e:	eb4a 040a 	adc.w	r4, sl, sl
 8007f42:	4699      	mov	r9, r3
 8007f44:	46a2      	mov	sl, r4
 8007f46:	eb19 0905 	adds.w	r9, r9, r5
 8007f4a:	eb4a 0a06 	adc.w	sl, sl, r6
 8007f4e:	f04f 0100 	mov.w	r1, #0
 8007f52:	f04f 0200 	mov.w	r2, #0
 8007f56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f5a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007f5e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007f62:	4689      	mov	r9, r1
 8007f64:	4692      	mov	sl, r2
 8007f66:	eb19 0005 	adds.w	r0, r9, r5
 8007f6a:	eb4a 0106 	adc.w	r1, sl, r6
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	461d      	mov	r5, r3
 8007f74:	f04f 0600 	mov.w	r6, #0
 8007f78:	196b      	adds	r3, r5, r5
 8007f7a:	eb46 0406 	adc.w	r4, r6, r6
 8007f7e:	461a      	mov	r2, r3
 8007f80:	4623      	mov	r3, r4
 8007f82:	f7f8 fe81 	bl	8000c88 <__aeabi_uldivmod>
 8007f86:	4603      	mov	r3, r0
 8007f88:	460c      	mov	r4, r1
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	4b2c      	ldr	r3, [pc, #176]	; (8008040 <UART_SetConfig+0x384>)
 8007f8e:	fba3 1302 	umull	r1, r3, r3, r2
 8007f92:	095b      	lsrs	r3, r3, #5
 8007f94:	2164      	movs	r1, #100	; 0x64
 8007f96:	fb01 f303 	mul.w	r3, r1, r3
 8007f9a:	1ad3      	subs	r3, r2, r3
 8007f9c:	00db      	lsls	r3, r3, #3
 8007f9e:	3332      	adds	r3, #50	; 0x32
 8007fa0:	4a27      	ldr	r2, [pc, #156]	; (8008040 <UART_SetConfig+0x384>)
 8007fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8007fa6:	095b      	lsrs	r3, r3, #5
 8007fa8:	005b      	lsls	r3, r3, #1
 8007faa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007fae:	4498      	add	r8, r3
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	461d      	mov	r5, r3
 8007fb4:	f04f 0600 	mov.w	r6, #0
 8007fb8:	46a9      	mov	r9, r5
 8007fba:	46b2      	mov	sl, r6
 8007fbc:	eb19 0309 	adds.w	r3, r9, r9
 8007fc0:	eb4a 040a 	adc.w	r4, sl, sl
 8007fc4:	4699      	mov	r9, r3
 8007fc6:	46a2      	mov	sl, r4
 8007fc8:	eb19 0905 	adds.w	r9, r9, r5
 8007fcc:	eb4a 0a06 	adc.w	sl, sl, r6
 8007fd0:	f04f 0100 	mov.w	r1, #0
 8007fd4:	f04f 0200 	mov.w	r2, #0
 8007fd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007fdc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007fe0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007fe4:	4689      	mov	r9, r1
 8007fe6:	4692      	mov	sl, r2
 8007fe8:	eb19 0005 	adds.w	r0, r9, r5
 8007fec:	eb4a 0106 	adc.w	r1, sl, r6
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	461d      	mov	r5, r3
 8007ff6:	f04f 0600 	mov.w	r6, #0
 8007ffa:	196b      	adds	r3, r5, r5
 8007ffc:	eb46 0406 	adc.w	r4, r6, r6
 8008000:	461a      	mov	r2, r3
 8008002:	4623      	mov	r3, r4
 8008004:	f7f8 fe40 	bl	8000c88 <__aeabi_uldivmod>
 8008008:	4603      	mov	r3, r0
 800800a:	460c      	mov	r4, r1
 800800c:	461a      	mov	r2, r3
 800800e:	4b0c      	ldr	r3, [pc, #48]	; (8008040 <UART_SetConfig+0x384>)
 8008010:	fba3 1302 	umull	r1, r3, r3, r2
 8008014:	095b      	lsrs	r3, r3, #5
 8008016:	2164      	movs	r1, #100	; 0x64
 8008018:	fb01 f303 	mul.w	r3, r1, r3
 800801c:	1ad3      	subs	r3, r2, r3
 800801e:	00db      	lsls	r3, r3, #3
 8008020:	3332      	adds	r3, #50	; 0x32
 8008022:	4a07      	ldr	r2, [pc, #28]	; (8008040 <UART_SetConfig+0x384>)
 8008024:	fba2 2303 	umull	r2, r3, r2, r3
 8008028:	095b      	lsrs	r3, r3, #5
 800802a:	f003 0207 	and.w	r2, r3, #7
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4442      	add	r2, r8
 8008034:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008036:	e1b2      	b.n	800839e <UART_SetConfig+0x6e2>
 8008038:	40011000 	.word	0x40011000
 800803c:	40011400 	.word	0x40011400
 8008040:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4ad7      	ldr	r2, [pc, #860]	; (80083a8 <UART_SetConfig+0x6ec>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d005      	beq.n	800805a <UART_SetConfig+0x39e>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4ad6      	ldr	r2, [pc, #856]	; (80083ac <UART_SetConfig+0x6f0>)
 8008054:	4293      	cmp	r3, r2
 8008056:	f040 80d1 	bne.w	80081fc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800805a:	f7fe fbe1 	bl	8006820 <HAL_RCC_GetPCLK2Freq>
 800805e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	469a      	mov	sl, r3
 8008064:	f04f 0b00 	mov.w	fp, #0
 8008068:	46d0      	mov	r8, sl
 800806a:	46d9      	mov	r9, fp
 800806c:	eb18 0308 	adds.w	r3, r8, r8
 8008070:	eb49 0409 	adc.w	r4, r9, r9
 8008074:	4698      	mov	r8, r3
 8008076:	46a1      	mov	r9, r4
 8008078:	eb18 080a 	adds.w	r8, r8, sl
 800807c:	eb49 090b 	adc.w	r9, r9, fp
 8008080:	f04f 0100 	mov.w	r1, #0
 8008084:	f04f 0200 	mov.w	r2, #0
 8008088:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800808c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008090:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008094:	4688      	mov	r8, r1
 8008096:	4691      	mov	r9, r2
 8008098:	eb1a 0508 	adds.w	r5, sl, r8
 800809c:	eb4b 0609 	adc.w	r6, fp, r9
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	4619      	mov	r1, r3
 80080a6:	f04f 0200 	mov.w	r2, #0
 80080aa:	f04f 0300 	mov.w	r3, #0
 80080ae:	f04f 0400 	mov.w	r4, #0
 80080b2:	0094      	lsls	r4, r2, #2
 80080b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80080b8:	008b      	lsls	r3, r1, #2
 80080ba:	461a      	mov	r2, r3
 80080bc:	4623      	mov	r3, r4
 80080be:	4628      	mov	r0, r5
 80080c0:	4631      	mov	r1, r6
 80080c2:	f7f8 fde1 	bl	8000c88 <__aeabi_uldivmod>
 80080c6:	4603      	mov	r3, r0
 80080c8:	460c      	mov	r4, r1
 80080ca:	461a      	mov	r2, r3
 80080cc:	4bb8      	ldr	r3, [pc, #736]	; (80083b0 <UART_SetConfig+0x6f4>)
 80080ce:	fba3 2302 	umull	r2, r3, r3, r2
 80080d2:	095b      	lsrs	r3, r3, #5
 80080d4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	469b      	mov	fp, r3
 80080dc:	f04f 0c00 	mov.w	ip, #0
 80080e0:	46d9      	mov	r9, fp
 80080e2:	46e2      	mov	sl, ip
 80080e4:	eb19 0309 	adds.w	r3, r9, r9
 80080e8:	eb4a 040a 	adc.w	r4, sl, sl
 80080ec:	4699      	mov	r9, r3
 80080ee:	46a2      	mov	sl, r4
 80080f0:	eb19 090b 	adds.w	r9, r9, fp
 80080f4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80080f8:	f04f 0100 	mov.w	r1, #0
 80080fc:	f04f 0200 	mov.w	r2, #0
 8008100:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008104:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008108:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800810c:	4689      	mov	r9, r1
 800810e:	4692      	mov	sl, r2
 8008110:	eb1b 0509 	adds.w	r5, fp, r9
 8008114:	eb4c 060a 	adc.w	r6, ip, sl
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	4619      	mov	r1, r3
 800811e:	f04f 0200 	mov.w	r2, #0
 8008122:	f04f 0300 	mov.w	r3, #0
 8008126:	f04f 0400 	mov.w	r4, #0
 800812a:	0094      	lsls	r4, r2, #2
 800812c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008130:	008b      	lsls	r3, r1, #2
 8008132:	461a      	mov	r2, r3
 8008134:	4623      	mov	r3, r4
 8008136:	4628      	mov	r0, r5
 8008138:	4631      	mov	r1, r6
 800813a:	f7f8 fda5 	bl	8000c88 <__aeabi_uldivmod>
 800813e:	4603      	mov	r3, r0
 8008140:	460c      	mov	r4, r1
 8008142:	461a      	mov	r2, r3
 8008144:	4b9a      	ldr	r3, [pc, #616]	; (80083b0 <UART_SetConfig+0x6f4>)
 8008146:	fba3 1302 	umull	r1, r3, r3, r2
 800814a:	095b      	lsrs	r3, r3, #5
 800814c:	2164      	movs	r1, #100	; 0x64
 800814e:	fb01 f303 	mul.w	r3, r1, r3
 8008152:	1ad3      	subs	r3, r2, r3
 8008154:	011b      	lsls	r3, r3, #4
 8008156:	3332      	adds	r3, #50	; 0x32
 8008158:	4a95      	ldr	r2, [pc, #596]	; (80083b0 <UART_SetConfig+0x6f4>)
 800815a:	fba2 2303 	umull	r2, r3, r2, r3
 800815e:	095b      	lsrs	r3, r3, #5
 8008160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008164:	4498      	add	r8, r3
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	469b      	mov	fp, r3
 800816a:	f04f 0c00 	mov.w	ip, #0
 800816e:	46d9      	mov	r9, fp
 8008170:	46e2      	mov	sl, ip
 8008172:	eb19 0309 	adds.w	r3, r9, r9
 8008176:	eb4a 040a 	adc.w	r4, sl, sl
 800817a:	4699      	mov	r9, r3
 800817c:	46a2      	mov	sl, r4
 800817e:	eb19 090b 	adds.w	r9, r9, fp
 8008182:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008186:	f04f 0100 	mov.w	r1, #0
 800818a:	f04f 0200 	mov.w	r2, #0
 800818e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008192:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008196:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800819a:	4689      	mov	r9, r1
 800819c:	4692      	mov	sl, r2
 800819e:	eb1b 0509 	adds.w	r5, fp, r9
 80081a2:	eb4c 060a 	adc.w	r6, ip, sl
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	4619      	mov	r1, r3
 80081ac:	f04f 0200 	mov.w	r2, #0
 80081b0:	f04f 0300 	mov.w	r3, #0
 80081b4:	f04f 0400 	mov.w	r4, #0
 80081b8:	0094      	lsls	r4, r2, #2
 80081ba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80081be:	008b      	lsls	r3, r1, #2
 80081c0:	461a      	mov	r2, r3
 80081c2:	4623      	mov	r3, r4
 80081c4:	4628      	mov	r0, r5
 80081c6:	4631      	mov	r1, r6
 80081c8:	f7f8 fd5e 	bl	8000c88 <__aeabi_uldivmod>
 80081cc:	4603      	mov	r3, r0
 80081ce:	460c      	mov	r4, r1
 80081d0:	461a      	mov	r2, r3
 80081d2:	4b77      	ldr	r3, [pc, #476]	; (80083b0 <UART_SetConfig+0x6f4>)
 80081d4:	fba3 1302 	umull	r1, r3, r3, r2
 80081d8:	095b      	lsrs	r3, r3, #5
 80081da:	2164      	movs	r1, #100	; 0x64
 80081dc:	fb01 f303 	mul.w	r3, r1, r3
 80081e0:	1ad3      	subs	r3, r2, r3
 80081e2:	011b      	lsls	r3, r3, #4
 80081e4:	3332      	adds	r3, #50	; 0x32
 80081e6:	4a72      	ldr	r2, [pc, #456]	; (80083b0 <UART_SetConfig+0x6f4>)
 80081e8:	fba2 2303 	umull	r2, r3, r2, r3
 80081ec:	095b      	lsrs	r3, r3, #5
 80081ee:	f003 020f 	and.w	r2, r3, #15
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4442      	add	r2, r8
 80081f8:	609a      	str	r2, [r3, #8]
 80081fa:	e0d0      	b.n	800839e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80081fc:	f7fe fafc 	bl	80067f8 <HAL_RCC_GetPCLK1Freq>
 8008200:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	469a      	mov	sl, r3
 8008206:	f04f 0b00 	mov.w	fp, #0
 800820a:	46d0      	mov	r8, sl
 800820c:	46d9      	mov	r9, fp
 800820e:	eb18 0308 	adds.w	r3, r8, r8
 8008212:	eb49 0409 	adc.w	r4, r9, r9
 8008216:	4698      	mov	r8, r3
 8008218:	46a1      	mov	r9, r4
 800821a:	eb18 080a 	adds.w	r8, r8, sl
 800821e:	eb49 090b 	adc.w	r9, r9, fp
 8008222:	f04f 0100 	mov.w	r1, #0
 8008226:	f04f 0200 	mov.w	r2, #0
 800822a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800822e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008232:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008236:	4688      	mov	r8, r1
 8008238:	4691      	mov	r9, r2
 800823a:	eb1a 0508 	adds.w	r5, sl, r8
 800823e:	eb4b 0609 	adc.w	r6, fp, r9
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	4619      	mov	r1, r3
 8008248:	f04f 0200 	mov.w	r2, #0
 800824c:	f04f 0300 	mov.w	r3, #0
 8008250:	f04f 0400 	mov.w	r4, #0
 8008254:	0094      	lsls	r4, r2, #2
 8008256:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800825a:	008b      	lsls	r3, r1, #2
 800825c:	461a      	mov	r2, r3
 800825e:	4623      	mov	r3, r4
 8008260:	4628      	mov	r0, r5
 8008262:	4631      	mov	r1, r6
 8008264:	f7f8 fd10 	bl	8000c88 <__aeabi_uldivmod>
 8008268:	4603      	mov	r3, r0
 800826a:	460c      	mov	r4, r1
 800826c:	461a      	mov	r2, r3
 800826e:	4b50      	ldr	r3, [pc, #320]	; (80083b0 <UART_SetConfig+0x6f4>)
 8008270:	fba3 2302 	umull	r2, r3, r3, r2
 8008274:	095b      	lsrs	r3, r3, #5
 8008276:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	469b      	mov	fp, r3
 800827e:	f04f 0c00 	mov.w	ip, #0
 8008282:	46d9      	mov	r9, fp
 8008284:	46e2      	mov	sl, ip
 8008286:	eb19 0309 	adds.w	r3, r9, r9
 800828a:	eb4a 040a 	adc.w	r4, sl, sl
 800828e:	4699      	mov	r9, r3
 8008290:	46a2      	mov	sl, r4
 8008292:	eb19 090b 	adds.w	r9, r9, fp
 8008296:	eb4a 0a0c 	adc.w	sl, sl, ip
 800829a:	f04f 0100 	mov.w	r1, #0
 800829e:	f04f 0200 	mov.w	r2, #0
 80082a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80082a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80082aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80082ae:	4689      	mov	r9, r1
 80082b0:	4692      	mov	sl, r2
 80082b2:	eb1b 0509 	adds.w	r5, fp, r9
 80082b6:	eb4c 060a 	adc.w	r6, ip, sl
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	4619      	mov	r1, r3
 80082c0:	f04f 0200 	mov.w	r2, #0
 80082c4:	f04f 0300 	mov.w	r3, #0
 80082c8:	f04f 0400 	mov.w	r4, #0
 80082cc:	0094      	lsls	r4, r2, #2
 80082ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80082d2:	008b      	lsls	r3, r1, #2
 80082d4:	461a      	mov	r2, r3
 80082d6:	4623      	mov	r3, r4
 80082d8:	4628      	mov	r0, r5
 80082da:	4631      	mov	r1, r6
 80082dc:	f7f8 fcd4 	bl	8000c88 <__aeabi_uldivmod>
 80082e0:	4603      	mov	r3, r0
 80082e2:	460c      	mov	r4, r1
 80082e4:	461a      	mov	r2, r3
 80082e6:	4b32      	ldr	r3, [pc, #200]	; (80083b0 <UART_SetConfig+0x6f4>)
 80082e8:	fba3 1302 	umull	r1, r3, r3, r2
 80082ec:	095b      	lsrs	r3, r3, #5
 80082ee:	2164      	movs	r1, #100	; 0x64
 80082f0:	fb01 f303 	mul.w	r3, r1, r3
 80082f4:	1ad3      	subs	r3, r2, r3
 80082f6:	011b      	lsls	r3, r3, #4
 80082f8:	3332      	adds	r3, #50	; 0x32
 80082fa:	4a2d      	ldr	r2, [pc, #180]	; (80083b0 <UART_SetConfig+0x6f4>)
 80082fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008300:	095b      	lsrs	r3, r3, #5
 8008302:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008306:	4498      	add	r8, r3
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	469b      	mov	fp, r3
 800830c:	f04f 0c00 	mov.w	ip, #0
 8008310:	46d9      	mov	r9, fp
 8008312:	46e2      	mov	sl, ip
 8008314:	eb19 0309 	adds.w	r3, r9, r9
 8008318:	eb4a 040a 	adc.w	r4, sl, sl
 800831c:	4699      	mov	r9, r3
 800831e:	46a2      	mov	sl, r4
 8008320:	eb19 090b 	adds.w	r9, r9, fp
 8008324:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008328:	f04f 0100 	mov.w	r1, #0
 800832c:	f04f 0200 	mov.w	r2, #0
 8008330:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008334:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008338:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800833c:	4689      	mov	r9, r1
 800833e:	4692      	mov	sl, r2
 8008340:	eb1b 0509 	adds.w	r5, fp, r9
 8008344:	eb4c 060a 	adc.w	r6, ip, sl
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	4619      	mov	r1, r3
 800834e:	f04f 0200 	mov.w	r2, #0
 8008352:	f04f 0300 	mov.w	r3, #0
 8008356:	f04f 0400 	mov.w	r4, #0
 800835a:	0094      	lsls	r4, r2, #2
 800835c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008360:	008b      	lsls	r3, r1, #2
 8008362:	461a      	mov	r2, r3
 8008364:	4623      	mov	r3, r4
 8008366:	4628      	mov	r0, r5
 8008368:	4631      	mov	r1, r6
 800836a:	f7f8 fc8d 	bl	8000c88 <__aeabi_uldivmod>
 800836e:	4603      	mov	r3, r0
 8008370:	460c      	mov	r4, r1
 8008372:	461a      	mov	r2, r3
 8008374:	4b0e      	ldr	r3, [pc, #56]	; (80083b0 <UART_SetConfig+0x6f4>)
 8008376:	fba3 1302 	umull	r1, r3, r3, r2
 800837a:	095b      	lsrs	r3, r3, #5
 800837c:	2164      	movs	r1, #100	; 0x64
 800837e:	fb01 f303 	mul.w	r3, r1, r3
 8008382:	1ad3      	subs	r3, r2, r3
 8008384:	011b      	lsls	r3, r3, #4
 8008386:	3332      	adds	r3, #50	; 0x32
 8008388:	4a09      	ldr	r2, [pc, #36]	; (80083b0 <UART_SetConfig+0x6f4>)
 800838a:	fba2 2303 	umull	r2, r3, r2, r3
 800838e:	095b      	lsrs	r3, r3, #5
 8008390:	f003 020f 	and.w	r2, r3, #15
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4442      	add	r2, r8
 800839a:	609a      	str	r2, [r3, #8]
}
 800839c:	e7ff      	b.n	800839e <UART_SetConfig+0x6e2>
 800839e:	bf00      	nop
 80083a0:	3714      	adds	r7, #20
 80083a2:	46bd      	mov	sp, r7
 80083a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083a8:	40011000 	.word	0x40011000
 80083ac:	40011400 	.word	0x40011400
 80083b0:	51eb851f 	.word	0x51eb851f

080083b4 <atof>:
 80083b4:	2100      	movs	r1, #0
 80083b6:	f001 bcdb 	b.w	8009d70 <strtod>

080083ba <atoi>:
 80083ba:	220a      	movs	r2, #10
 80083bc:	2100      	movs	r1, #0
 80083be:	f001 bd79 	b.w	8009eb4 <strtol>
	...

080083c4 <__errno>:
 80083c4:	4b01      	ldr	r3, [pc, #4]	; (80083cc <__errno+0x8>)
 80083c6:	6818      	ldr	r0, [r3, #0]
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop
 80083cc:	20000028 	.word	0x20000028

080083d0 <__libc_init_array>:
 80083d0:	b570      	push	{r4, r5, r6, lr}
 80083d2:	4e0d      	ldr	r6, [pc, #52]	; (8008408 <__libc_init_array+0x38>)
 80083d4:	4c0d      	ldr	r4, [pc, #52]	; (800840c <__libc_init_array+0x3c>)
 80083d6:	1ba4      	subs	r4, r4, r6
 80083d8:	10a4      	asrs	r4, r4, #2
 80083da:	2500      	movs	r5, #0
 80083dc:	42a5      	cmp	r5, r4
 80083de:	d109      	bne.n	80083f4 <__libc_init_array+0x24>
 80083e0:	4e0b      	ldr	r6, [pc, #44]	; (8008410 <__libc_init_array+0x40>)
 80083e2:	4c0c      	ldr	r4, [pc, #48]	; (8008414 <__libc_init_array+0x44>)
 80083e4:	f004 f81a 	bl	800c41c <_init>
 80083e8:	1ba4      	subs	r4, r4, r6
 80083ea:	10a4      	asrs	r4, r4, #2
 80083ec:	2500      	movs	r5, #0
 80083ee:	42a5      	cmp	r5, r4
 80083f0:	d105      	bne.n	80083fe <__libc_init_array+0x2e>
 80083f2:	bd70      	pop	{r4, r5, r6, pc}
 80083f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80083f8:	4798      	blx	r3
 80083fa:	3501      	adds	r5, #1
 80083fc:	e7ee      	b.n	80083dc <__libc_init_array+0xc>
 80083fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008402:	4798      	blx	r3
 8008404:	3501      	adds	r5, #1
 8008406:	e7f2      	b.n	80083ee <__libc_init_array+0x1e>
 8008408:	0800c888 	.word	0x0800c888
 800840c:	0800c888 	.word	0x0800c888
 8008410:	0800c888 	.word	0x0800c888
 8008414:	0800c88c 	.word	0x0800c88c

08008418 <memset>:
 8008418:	4402      	add	r2, r0
 800841a:	4603      	mov	r3, r0
 800841c:	4293      	cmp	r3, r2
 800841e:	d100      	bne.n	8008422 <memset+0xa>
 8008420:	4770      	bx	lr
 8008422:	f803 1b01 	strb.w	r1, [r3], #1
 8008426:	e7f9      	b.n	800841c <memset+0x4>

08008428 <__cvt>:
 8008428:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800842c:	ec55 4b10 	vmov	r4, r5, d0
 8008430:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008432:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008436:	2d00      	cmp	r5, #0
 8008438:	460e      	mov	r6, r1
 800843a:	4691      	mov	r9, r2
 800843c:	4619      	mov	r1, r3
 800843e:	bfb8      	it	lt
 8008440:	4622      	movlt	r2, r4
 8008442:	462b      	mov	r3, r5
 8008444:	f027 0720 	bic.w	r7, r7, #32
 8008448:	bfbb      	ittet	lt
 800844a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800844e:	461d      	movlt	r5, r3
 8008450:	2300      	movge	r3, #0
 8008452:	232d      	movlt	r3, #45	; 0x2d
 8008454:	bfb8      	it	lt
 8008456:	4614      	movlt	r4, r2
 8008458:	2f46      	cmp	r7, #70	; 0x46
 800845a:	700b      	strb	r3, [r1, #0]
 800845c:	d004      	beq.n	8008468 <__cvt+0x40>
 800845e:	2f45      	cmp	r7, #69	; 0x45
 8008460:	d100      	bne.n	8008464 <__cvt+0x3c>
 8008462:	3601      	adds	r6, #1
 8008464:	2102      	movs	r1, #2
 8008466:	e000      	b.n	800846a <__cvt+0x42>
 8008468:	2103      	movs	r1, #3
 800846a:	ab03      	add	r3, sp, #12
 800846c:	9301      	str	r3, [sp, #4]
 800846e:	ab02      	add	r3, sp, #8
 8008470:	9300      	str	r3, [sp, #0]
 8008472:	4632      	mov	r2, r6
 8008474:	4653      	mov	r3, sl
 8008476:	ec45 4b10 	vmov	d0, r4, r5
 800847a:	f001 fdbd 	bl	8009ff8 <_dtoa_r>
 800847e:	2f47      	cmp	r7, #71	; 0x47
 8008480:	4680      	mov	r8, r0
 8008482:	d102      	bne.n	800848a <__cvt+0x62>
 8008484:	f019 0f01 	tst.w	r9, #1
 8008488:	d026      	beq.n	80084d8 <__cvt+0xb0>
 800848a:	2f46      	cmp	r7, #70	; 0x46
 800848c:	eb08 0906 	add.w	r9, r8, r6
 8008490:	d111      	bne.n	80084b6 <__cvt+0x8e>
 8008492:	f898 3000 	ldrb.w	r3, [r8]
 8008496:	2b30      	cmp	r3, #48	; 0x30
 8008498:	d10a      	bne.n	80084b0 <__cvt+0x88>
 800849a:	2200      	movs	r2, #0
 800849c:	2300      	movs	r3, #0
 800849e:	4620      	mov	r0, r4
 80084a0:	4629      	mov	r1, r5
 80084a2:	f7f8 fb11 	bl	8000ac8 <__aeabi_dcmpeq>
 80084a6:	b918      	cbnz	r0, 80084b0 <__cvt+0x88>
 80084a8:	f1c6 0601 	rsb	r6, r6, #1
 80084ac:	f8ca 6000 	str.w	r6, [sl]
 80084b0:	f8da 3000 	ldr.w	r3, [sl]
 80084b4:	4499      	add	r9, r3
 80084b6:	2200      	movs	r2, #0
 80084b8:	2300      	movs	r3, #0
 80084ba:	4620      	mov	r0, r4
 80084bc:	4629      	mov	r1, r5
 80084be:	f7f8 fb03 	bl	8000ac8 <__aeabi_dcmpeq>
 80084c2:	b938      	cbnz	r0, 80084d4 <__cvt+0xac>
 80084c4:	2230      	movs	r2, #48	; 0x30
 80084c6:	9b03      	ldr	r3, [sp, #12]
 80084c8:	454b      	cmp	r3, r9
 80084ca:	d205      	bcs.n	80084d8 <__cvt+0xb0>
 80084cc:	1c59      	adds	r1, r3, #1
 80084ce:	9103      	str	r1, [sp, #12]
 80084d0:	701a      	strb	r2, [r3, #0]
 80084d2:	e7f8      	b.n	80084c6 <__cvt+0x9e>
 80084d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80084d8:	9b03      	ldr	r3, [sp, #12]
 80084da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80084dc:	eba3 0308 	sub.w	r3, r3, r8
 80084e0:	4640      	mov	r0, r8
 80084e2:	6013      	str	r3, [r2, #0]
 80084e4:	b004      	add	sp, #16
 80084e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080084ea <__exponent>:
 80084ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084ec:	2900      	cmp	r1, #0
 80084ee:	4604      	mov	r4, r0
 80084f0:	bfba      	itte	lt
 80084f2:	4249      	neglt	r1, r1
 80084f4:	232d      	movlt	r3, #45	; 0x2d
 80084f6:	232b      	movge	r3, #43	; 0x2b
 80084f8:	2909      	cmp	r1, #9
 80084fa:	f804 2b02 	strb.w	r2, [r4], #2
 80084fe:	7043      	strb	r3, [r0, #1]
 8008500:	dd20      	ble.n	8008544 <__exponent+0x5a>
 8008502:	f10d 0307 	add.w	r3, sp, #7
 8008506:	461f      	mov	r7, r3
 8008508:	260a      	movs	r6, #10
 800850a:	fb91 f5f6 	sdiv	r5, r1, r6
 800850e:	fb06 1115 	mls	r1, r6, r5, r1
 8008512:	3130      	adds	r1, #48	; 0x30
 8008514:	2d09      	cmp	r5, #9
 8008516:	f803 1c01 	strb.w	r1, [r3, #-1]
 800851a:	f103 32ff 	add.w	r2, r3, #4294967295
 800851e:	4629      	mov	r1, r5
 8008520:	dc09      	bgt.n	8008536 <__exponent+0x4c>
 8008522:	3130      	adds	r1, #48	; 0x30
 8008524:	3b02      	subs	r3, #2
 8008526:	f802 1c01 	strb.w	r1, [r2, #-1]
 800852a:	42bb      	cmp	r3, r7
 800852c:	4622      	mov	r2, r4
 800852e:	d304      	bcc.n	800853a <__exponent+0x50>
 8008530:	1a10      	subs	r0, r2, r0
 8008532:	b003      	add	sp, #12
 8008534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008536:	4613      	mov	r3, r2
 8008538:	e7e7      	b.n	800850a <__exponent+0x20>
 800853a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800853e:	f804 2b01 	strb.w	r2, [r4], #1
 8008542:	e7f2      	b.n	800852a <__exponent+0x40>
 8008544:	2330      	movs	r3, #48	; 0x30
 8008546:	4419      	add	r1, r3
 8008548:	7083      	strb	r3, [r0, #2]
 800854a:	1d02      	adds	r2, r0, #4
 800854c:	70c1      	strb	r1, [r0, #3]
 800854e:	e7ef      	b.n	8008530 <__exponent+0x46>

08008550 <_printf_float>:
 8008550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008554:	b08d      	sub	sp, #52	; 0x34
 8008556:	460c      	mov	r4, r1
 8008558:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800855c:	4616      	mov	r6, r2
 800855e:	461f      	mov	r7, r3
 8008560:	4605      	mov	r5, r0
 8008562:	f002 fe2d 	bl	800b1c0 <_localeconv_r>
 8008566:	6803      	ldr	r3, [r0, #0]
 8008568:	9304      	str	r3, [sp, #16]
 800856a:	4618      	mov	r0, r3
 800856c:	f7f7 fe80 	bl	8000270 <strlen>
 8008570:	2300      	movs	r3, #0
 8008572:	930a      	str	r3, [sp, #40]	; 0x28
 8008574:	f8d8 3000 	ldr.w	r3, [r8]
 8008578:	9005      	str	r0, [sp, #20]
 800857a:	3307      	adds	r3, #7
 800857c:	f023 0307 	bic.w	r3, r3, #7
 8008580:	f103 0208 	add.w	r2, r3, #8
 8008584:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008588:	f8d4 b000 	ldr.w	fp, [r4]
 800858c:	f8c8 2000 	str.w	r2, [r8]
 8008590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008594:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008598:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800859c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80085a0:	9307      	str	r3, [sp, #28]
 80085a2:	f8cd 8018 	str.w	r8, [sp, #24]
 80085a6:	f04f 32ff 	mov.w	r2, #4294967295
 80085aa:	4ba7      	ldr	r3, [pc, #668]	; (8008848 <_printf_float+0x2f8>)
 80085ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80085b0:	f7f8 fabc 	bl	8000b2c <__aeabi_dcmpun>
 80085b4:	bb70      	cbnz	r0, 8008614 <_printf_float+0xc4>
 80085b6:	f04f 32ff 	mov.w	r2, #4294967295
 80085ba:	4ba3      	ldr	r3, [pc, #652]	; (8008848 <_printf_float+0x2f8>)
 80085bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80085c0:	f7f8 fa96 	bl	8000af0 <__aeabi_dcmple>
 80085c4:	bb30      	cbnz	r0, 8008614 <_printf_float+0xc4>
 80085c6:	2200      	movs	r2, #0
 80085c8:	2300      	movs	r3, #0
 80085ca:	4640      	mov	r0, r8
 80085cc:	4649      	mov	r1, r9
 80085ce:	f7f8 fa85 	bl	8000adc <__aeabi_dcmplt>
 80085d2:	b110      	cbz	r0, 80085da <_printf_float+0x8a>
 80085d4:	232d      	movs	r3, #45	; 0x2d
 80085d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085da:	4a9c      	ldr	r2, [pc, #624]	; (800884c <_printf_float+0x2fc>)
 80085dc:	4b9c      	ldr	r3, [pc, #624]	; (8008850 <_printf_float+0x300>)
 80085de:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80085e2:	bf8c      	ite	hi
 80085e4:	4690      	movhi	r8, r2
 80085e6:	4698      	movls	r8, r3
 80085e8:	2303      	movs	r3, #3
 80085ea:	f02b 0204 	bic.w	r2, fp, #4
 80085ee:	6123      	str	r3, [r4, #16]
 80085f0:	6022      	str	r2, [r4, #0]
 80085f2:	f04f 0900 	mov.w	r9, #0
 80085f6:	9700      	str	r7, [sp, #0]
 80085f8:	4633      	mov	r3, r6
 80085fa:	aa0b      	add	r2, sp, #44	; 0x2c
 80085fc:	4621      	mov	r1, r4
 80085fe:	4628      	mov	r0, r5
 8008600:	f000 f9e6 	bl	80089d0 <_printf_common>
 8008604:	3001      	adds	r0, #1
 8008606:	f040 808d 	bne.w	8008724 <_printf_float+0x1d4>
 800860a:	f04f 30ff 	mov.w	r0, #4294967295
 800860e:	b00d      	add	sp, #52	; 0x34
 8008610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008614:	4642      	mov	r2, r8
 8008616:	464b      	mov	r3, r9
 8008618:	4640      	mov	r0, r8
 800861a:	4649      	mov	r1, r9
 800861c:	f7f8 fa86 	bl	8000b2c <__aeabi_dcmpun>
 8008620:	b110      	cbz	r0, 8008628 <_printf_float+0xd8>
 8008622:	4a8c      	ldr	r2, [pc, #560]	; (8008854 <_printf_float+0x304>)
 8008624:	4b8c      	ldr	r3, [pc, #560]	; (8008858 <_printf_float+0x308>)
 8008626:	e7da      	b.n	80085de <_printf_float+0x8e>
 8008628:	6861      	ldr	r1, [r4, #4]
 800862a:	1c4b      	adds	r3, r1, #1
 800862c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008630:	a80a      	add	r0, sp, #40	; 0x28
 8008632:	d13e      	bne.n	80086b2 <_printf_float+0x162>
 8008634:	2306      	movs	r3, #6
 8008636:	6063      	str	r3, [r4, #4]
 8008638:	2300      	movs	r3, #0
 800863a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800863e:	ab09      	add	r3, sp, #36	; 0x24
 8008640:	9300      	str	r3, [sp, #0]
 8008642:	ec49 8b10 	vmov	d0, r8, r9
 8008646:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800864a:	6022      	str	r2, [r4, #0]
 800864c:	f8cd a004 	str.w	sl, [sp, #4]
 8008650:	6861      	ldr	r1, [r4, #4]
 8008652:	4628      	mov	r0, r5
 8008654:	f7ff fee8 	bl	8008428 <__cvt>
 8008658:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800865c:	2b47      	cmp	r3, #71	; 0x47
 800865e:	4680      	mov	r8, r0
 8008660:	d109      	bne.n	8008676 <_printf_float+0x126>
 8008662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008664:	1cd8      	adds	r0, r3, #3
 8008666:	db02      	blt.n	800866e <_printf_float+0x11e>
 8008668:	6862      	ldr	r2, [r4, #4]
 800866a:	4293      	cmp	r3, r2
 800866c:	dd47      	ble.n	80086fe <_printf_float+0x1ae>
 800866e:	f1aa 0a02 	sub.w	sl, sl, #2
 8008672:	fa5f fa8a 	uxtb.w	sl, sl
 8008676:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800867a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800867c:	d824      	bhi.n	80086c8 <_printf_float+0x178>
 800867e:	3901      	subs	r1, #1
 8008680:	4652      	mov	r2, sl
 8008682:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008686:	9109      	str	r1, [sp, #36]	; 0x24
 8008688:	f7ff ff2f 	bl	80084ea <__exponent>
 800868c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800868e:	1813      	adds	r3, r2, r0
 8008690:	2a01      	cmp	r2, #1
 8008692:	4681      	mov	r9, r0
 8008694:	6123      	str	r3, [r4, #16]
 8008696:	dc02      	bgt.n	800869e <_printf_float+0x14e>
 8008698:	6822      	ldr	r2, [r4, #0]
 800869a:	07d1      	lsls	r1, r2, #31
 800869c:	d501      	bpl.n	80086a2 <_printf_float+0x152>
 800869e:	3301      	adds	r3, #1
 80086a0:	6123      	str	r3, [r4, #16]
 80086a2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d0a5      	beq.n	80085f6 <_printf_float+0xa6>
 80086aa:	232d      	movs	r3, #45	; 0x2d
 80086ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086b0:	e7a1      	b.n	80085f6 <_printf_float+0xa6>
 80086b2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80086b6:	f000 8177 	beq.w	80089a8 <_printf_float+0x458>
 80086ba:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80086be:	d1bb      	bne.n	8008638 <_printf_float+0xe8>
 80086c0:	2900      	cmp	r1, #0
 80086c2:	d1b9      	bne.n	8008638 <_printf_float+0xe8>
 80086c4:	2301      	movs	r3, #1
 80086c6:	e7b6      	b.n	8008636 <_printf_float+0xe6>
 80086c8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80086cc:	d119      	bne.n	8008702 <_printf_float+0x1b2>
 80086ce:	2900      	cmp	r1, #0
 80086d0:	6863      	ldr	r3, [r4, #4]
 80086d2:	dd0c      	ble.n	80086ee <_printf_float+0x19e>
 80086d4:	6121      	str	r1, [r4, #16]
 80086d6:	b913      	cbnz	r3, 80086de <_printf_float+0x18e>
 80086d8:	6822      	ldr	r2, [r4, #0]
 80086da:	07d2      	lsls	r2, r2, #31
 80086dc:	d502      	bpl.n	80086e4 <_printf_float+0x194>
 80086de:	3301      	adds	r3, #1
 80086e0:	440b      	add	r3, r1
 80086e2:	6123      	str	r3, [r4, #16]
 80086e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086e6:	65a3      	str	r3, [r4, #88]	; 0x58
 80086e8:	f04f 0900 	mov.w	r9, #0
 80086ec:	e7d9      	b.n	80086a2 <_printf_float+0x152>
 80086ee:	b913      	cbnz	r3, 80086f6 <_printf_float+0x1a6>
 80086f0:	6822      	ldr	r2, [r4, #0]
 80086f2:	07d0      	lsls	r0, r2, #31
 80086f4:	d501      	bpl.n	80086fa <_printf_float+0x1aa>
 80086f6:	3302      	adds	r3, #2
 80086f8:	e7f3      	b.n	80086e2 <_printf_float+0x192>
 80086fa:	2301      	movs	r3, #1
 80086fc:	e7f1      	b.n	80086e2 <_printf_float+0x192>
 80086fe:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8008702:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008706:	4293      	cmp	r3, r2
 8008708:	db05      	blt.n	8008716 <_printf_float+0x1c6>
 800870a:	6822      	ldr	r2, [r4, #0]
 800870c:	6123      	str	r3, [r4, #16]
 800870e:	07d1      	lsls	r1, r2, #31
 8008710:	d5e8      	bpl.n	80086e4 <_printf_float+0x194>
 8008712:	3301      	adds	r3, #1
 8008714:	e7e5      	b.n	80086e2 <_printf_float+0x192>
 8008716:	2b00      	cmp	r3, #0
 8008718:	bfd4      	ite	le
 800871a:	f1c3 0302 	rsble	r3, r3, #2
 800871e:	2301      	movgt	r3, #1
 8008720:	4413      	add	r3, r2
 8008722:	e7de      	b.n	80086e2 <_printf_float+0x192>
 8008724:	6823      	ldr	r3, [r4, #0]
 8008726:	055a      	lsls	r2, r3, #21
 8008728:	d407      	bmi.n	800873a <_printf_float+0x1ea>
 800872a:	6923      	ldr	r3, [r4, #16]
 800872c:	4642      	mov	r2, r8
 800872e:	4631      	mov	r1, r6
 8008730:	4628      	mov	r0, r5
 8008732:	47b8      	blx	r7
 8008734:	3001      	adds	r0, #1
 8008736:	d12b      	bne.n	8008790 <_printf_float+0x240>
 8008738:	e767      	b.n	800860a <_printf_float+0xba>
 800873a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800873e:	f240 80dc 	bls.w	80088fa <_printf_float+0x3aa>
 8008742:	2200      	movs	r2, #0
 8008744:	2300      	movs	r3, #0
 8008746:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800874a:	f7f8 f9bd 	bl	8000ac8 <__aeabi_dcmpeq>
 800874e:	2800      	cmp	r0, #0
 8008750:	d033      	beq.n	80087ba <_printf_float+0x26a>
 8008752:	2301      	movs	r3, #1
 8008754:	4a41      	ldr	r2, [pc, #260]	; (800885c <_printf_float+0x30c>)
 8008756:	4631      	mov	r1, r6
 8008758:	4628      	mov	r0, r5
 800875a:	47b8      	blx	r7
 800875c:	3001      	adds	r0, #1
 800875e:	f43f af54 	beq.w	800860a <_printf_float+0xba>
 8008762:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008766:	429a      	cmp	r2, r3
 8008768:	db02      	blt.n	8008770 <_printf_float+0x220>
 800876a:	6823      	ldr	r3, [r4, #0]
 800876c:	07d8      	lsls	r0, r3, #31
 800876e:	d50f      	bpl.n	8008790 <_printf_float+0x240>
 8008770:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008774:	4631      	mov	r1, r6
 8008776:	4628      	mov	r0, r5
 8008778:	47b8      	blx	r7
 800877a:	3001      	adds	r0, #1
 800877c:	f43f af45 	beq.w	800860a <_printf_float+0xba>
 8008780:	f04f 0800 	mov.w	r8, #0
 8008784:	f104 091a 	add.w	r9, r4, #26
 8008788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800878a:	3b01      	subs	r3, #1
 800878c:	4543      	cmp	r3, r8
 800878e:	dc09      	bgt.n	80087a4 <_printf_float+0x254>
 8008790:	6823      	ldr	r3, [r4, #0]
 8008792:	079b      	lsls	r3, r3, #30
 8008794:	f100 8103 	bmi.w	800899e <_printf_float+0x44e>
 8008798:	68e0      	ldr	r0, [r4, #12]
 800879a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800879c:	4298      	cmp	r0, r3
 800879e:	bfb8      	it	lt
 80087a0:	4618      	movlt	r0, r3
 80087a2:	e734      	b.n	800860e <_printf_float+0xbe>
 80087a4:	2301      	movs	r3, #1
 80087a6:	464a      	mov	r2, r9
 80087a8:	4631      	mov	r1, r6
 80087aa:	4628      	mov	r0, r5
 80087ac:	47b8      	blx	r7
 80087ae:	3001      	adds	r0, #1
 80087b0:	f43f af2b 	beq.w	800860a <_printf_float+0xba>
 80087b4:	f108 0801 	add.w	r8, r8, #1
 80087b8:	e7e6      	b.n	8008788 <_printf_float+0x238>
 80087ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087bc:	2b00      	cmp	r3, #0
 80087be:	dc2b      	bgt.n	8008818 <_printf_float+0x2c8>
 80087c0:	2301      	movs	r3, #1
 80087c2:	4a26      	ldr	r2, [pc, #152]	; (800885c <_printf_float+0x30c>)
 80087c4:	4631      	mov	r1, r6
 80087c6:	4628      	mov	r0, r5
 80087c8:	47b8      	blx	r7
 80087ca:	3001      	adds	r0, #1
 80087cc:	f43f af1d 	beq.w	800860a <_printf_float+0xba>
 80087d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087d2:	b923      	cbnz	r3, 80087de <_printf_float+0x28e>
 80087d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087d6:	b913      	cbnz	r3, 80087de <_printf_float+0x28e>
 80087d8:	6823      	ldr	r3, [r4, #0]
 80087da:	07d9      	lsls	r1, r3, #31
 80087dc:	d5d8      	bpl.n	8008790 <_printf_float+0x240>
 80087de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087e2:	4631      	mov	r1, r6
 80087e4:	4628      	mov	r0, r5
 80087e6:	47b8      	blx	r7
 80087e8:	3001      	adds	r0, #1
 80087ea:	f43f af0e 	beq.w	800860a <_printf_float+0xba>
 80087ee:	f04f 0900 	mov.w	r9, #0
 80087f2:	f104 0a1a 	add.w	sl, r4, #26
 80087f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087f8:	425b      	negs	r3, r3
 80087fa:	454b      	cmp	r3, r9
 80087fc:	dc01      	bgt.n	8008802 <_printf_float+0x2b2>
 80087fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008800:	e794      	b.n	800872c <_printf_float+0x1dc>
 8008802:	2301      	movs	r3, #1
 8008804:	4652      	mov	r2, sl
 8008806:	4631      	mov	r1, r6
 8008808:	4628      	mov	r0, r5
 800880a:	47b8      	blx	r7
 800880c:	3001      	adds	r0, #1
 800880e:	f43f aefc 	beq.w	800860a <_printf_float+0xba>
 8008812:	f109 0901 	add.w	r9, r9, #1
 8008816:	e7ee      	b.n	80087f6 <_printf_float+0x2a6>
 8008818:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800881a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800881c:	429a      	cmp	r2, r3
 800881e:	bfa8      	it	ge
 8008820:	461a      	movge	r2, r3
 8008822:	2a00      	cmp	r2, #0
 8008824:	4691      	mov	r9, r2
 8008826:	dd07      	ble.n	8008838 <_printf_float+0x2e8>
 8008828:	4613      	mov	r3, r2
 800882a:	4631      	mov	r1, r6
 800882c:	4642      	mov	r2, r8
 800882e:	4628      	mov	r0, r5
 8008830:	47b8      	blx	r7
 8008832:	3001      	adds	r0, #1
 8008834:	f43f aee9 	beq.w	800860a <_printf_float+0xba>
 8008838:	f104 031a 	add.w	r3, r4, #26
 800883c:	f04f 0b00 	mov.w	fp, #0
 8008840:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008844:	9306      	str	r3, [sp, #24]
 8008846:	e015      	b.n	8008874 <_printf_float+0x324>
 8008848:	7fefffff 	.word	0x7fefffff
 800884c:	0800c58c 	.word	0x0800c58c
 8008850:	0800c588 	.word	0x0800c588
 8008854:	0800c594 	.word	0x0800c594
 8008858:	0800c590 	.word	0x0800c590
 800885c:	0800c598 	.word	0x0800c598
 8008860:	2301      	movs	r3, #1
 8008862:	9a06      	ldr	r2, [sp, #24]
 8008864:	4631      	mov	r1, r6
 8008866:	4628      	mov	r0, r5
 8008868:	47b8      	blx	r7
 800886a:	3001      	adds	r0, #1
 800886c:	f43f aecd 	beq.w	800860a <_printf_float+0xba>
 8008870:	f10b 0b01 	add.w	fp, fp, #1
 8008874:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008878:	ebaa 0309 	sub.w	r3, sl, r9
 800887c:	455b      	cmp	r3, fp
 800887e:	dcef      	bgt.n	8008860 <_printf_float+0x310>
 8008880:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008884:	429a      	cmp	r2, r3
 8008886:	44d0      	add	r8, sl
 8008888:	db15      	blt.n	80088b6 <_printf_float+0x366>
 800888a:	6823      	ldr	r3, [r4, #0]
 800888c:	07da      	lsls	r2, r3, #31
 800888e:	d412      	bmi.n	80088b6 <_printf_float+0x366>
 8008890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008892:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008894:	eba3 020a 	sub.w	r2, r3, sl
 8008898:	eba3 0a01 	sub.w	sl, r3, r1
 800889c:	4592      	cmp	sl, r2
 800889e:	bfa8      	it	ge
 80088a0:	4692      	movge	sl, r2
 80088a2:	f1ba 0f00 	cmp.w	sl, #0
 80088a6:	dc0e      	bgt.n	80088c6 <_printf_float+0x376>
 80088a8:	f04f 0800 	mov.w	r8, #0
 80088ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80088b0:	f104 091a 	add.w	r9, r4, #26
 80088b4:	e019      	b.n	80088ea <_printf_float+0x39a>
 80088b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088ba:	4631      	mov	r1, r6
 80088bc:	4628      	mov	r0, r5
 80088be:	47b8      	blx	r7
 80088c0:	3001      	adds	r0, #1
 80088c2:	d1e5      	bne.n	8008890 <_printf_float+0x340>
 80088c4:	e6a1      	b.n	800860a <_printf_float+0xba>
 80088c6:	4653      	mov	r3, sl
 80088c8:	4642      	mov	r2, r8
 80088ca:	4631      	mov	r1, r6
 80088cc:	4628      	mov	r0, r5
 80088ce:	47b8      	blx	r7
 80088d0:	3001      	adds	r0, #1
 80088d2:	d1e9      	bne.n	80088a8 <_printf_float+0x358>
 80088d4:	e699      	b.n	800860a <_printf_float+0xba>
 80088d6:	2301      	movs	r3, #1
 80088d8:	464a      	mov	r2, r9
 80088da:	4631      	mov	r1, r6
 80088dc:	4628      	mov	r0, r5
 80088de:	47b8      	blx	r7
 80088e0:	3001      	adds	r0, #1
 80088e2:	f43f ae92 	beq.w	800860a <_printf_float+0xba>
 80088e6:	f108 0801 	add.w	r8, r8, #1
 80088ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088ee:	1a9b      	subs	r3, r3, r2
 80088f0:	eba3 030a 	sub.w	r3, r3, sl
 80088f4:	4543      	cmp	r3, r8
 80088f6:	dcee      	bgt.n	80088d6 <_printf_float+0x386>
 80088f8:	e74a      	b.n	8008790 <_printf_float+0x240>
 80088fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088fc:	2a01      	cmp	r2, #1
 80088fe:	dc01      	bgt.n	8008904 <_printf_float+0x3b4>
 8008900:	07db      	lsls	r3, r3, #31
 8008902:	d53a      	bpl.n	800897a <_printf_float+0x42a>
 8008904:	2301      	movs	r3, #1
 8008906:	4642      	mov	r2, r8
 8008908:	4631      	mov	r1, r6
 800890a:	4628      	mov	r0, r5
 800890c:	47b8      	blx	r7
 800890e:	3001      	adds	r0, #1
 8008910:	f43f ae7b 	beq.w	800860a <_printf_float+0xba>
 8008914:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008918:	4631      	mov	r1, r6
 800891a:	4628      	mov	r0, r5
 800891c:	47b8      	blx	r7
 800891e:	3001      	adds	r0, #1
 8008920:	f108 0801 	add.w	r8, r8, #1
 8008924:	f43f ae71 	beq.w	800860a <_printf_float+0xba>
 8008928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800892a:	2200      	movs	r2, #0
 800892c:	f103 3aff 	add.w	sl, r3, #4294967295
 8008930:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008934:	2300      	movs	r3, #0
 8008936:	f7f8 f8c7 	bl	8000ac8 <__aeabi_dcmpeq>
 800893a:	b9c8      	cbnz	r0, 8008970 <_printf_float+0x420>
 800893c:	4653      	mov	r3, sl
 800893e:	4642      	mov	r2, r8
 8008940:	4631      	mov	r1, r6
 8008942:	4628      	mov	r0, r5
 8008944:	47b8      	blx	r7
 8008946:	3001      	adds	r0, #1
 8008948:	d10e      	bne.n	8008968 <_printf_float+0x418>
 800894a:	e65e      	b.n	800860a <_printf_float+0xba>
 800894c:	2301      	movs	r3, #1
 800894e:	4652      	mov	r2, sl
 8008950:	4631      	mov	r1, r6
 8008952:	4628      	mov	r0, r5
 8008954:	47b8      	blx	r7
 8008956:	3001      	adds	r0, #1
 8008958:	f43f ae57 	beq.w	800860a <_printf_float+0xba>
 800895c:	f108 0801 	add.w	r8, r8, #1
 8008960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008962:	3b01      	subs	r3, #1
 8008964:	4543      	cmp	r3, r8
 8008966:	dcf1      	bgt.n	800894c <_printf_float+0x3fc>
 8008968:	464b      	mov	r3, r9
 800896a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800896e:	e6de      	b.n	800872e <_printf_float+0x1de>
 8008970:	f04f 0800 	mov.w	r8, #0
 8008974:	f104 0a1a 	add.w	sl, r4, #26
 8008978:	e7f2      	b.n	8008960 <_printf_float+0x410>
 800897a:	2301      	movs	r3, #1
 800897c:	e7df      	b.n	800893e <_printf_float+0x3ee>
 800897e:	2301      	movs	r3, #1
 8008980:	464a      	mov	r2, r9
 8008982:	4631      	mov	r1, r6
 8008984:	4628      	mov	r0, r5
 8008986:	47b8      	blx	r7
 8008988:	3001      	adds	r0, #1
 800898a:	f43f ae3e 	beq.w	800860a <_printf_float+0xba>
 800898e:	f108 0801 	add.w	r8, r8, #1
 8008992:	68e3      	ldr	r3, [r4, #12]
 8008994:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008996:	1a9b      	subs	r3, r3, r2
 8008998:	4543      	cmp	r3, r8
 800899a:	dcf0      	bgt.n	800897e <_printf_float+0x42e>
 800899c:	e6fc      	b.n	8008798 <_printf_float+0x248>
 800899e:	f04f 0800 	mov.w	r8, #0
 80089a2:	f104 0919 	add.w	r9, r4, #25
 80089a6:	e7f4      	b.n	8008992 <_printf_float+0x442>
 80089a8:	2900      	cmp	r1, #0
 80089aa:	f43f ae8b 	beq.w	80086c4 <_printf_float+0x174>
 80089ae:	2300      	movs	r3, #0
 80089b0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80089b4:	ab09      	add	r3, sp, #36	; 0x24
 80089b6:	9300      	str	r3, [sp, #0]
 80089b8:	ec49 8b10 	vmov	d0, r8, r9
 80089bc:	6022      	str	r2, [r4, #0]
 80089be:	f8cd a004 	str.w	sl, [sp, #4]
 80089c2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80089c6:	4628      	mov	r0, r5
 80089c8:	f7ff fd2e 	bl	8008428 <__cvt>
 80089cc:	4680      	mov	r8, r0
 80089ce:	e648      	b.n	8008662 <_printf_float+0x112>

080089d0 <_printf_common>:
 80089d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089d4:	4691      	mov	r9, r2
 80089d6:	461f      	mov	r7, r3
 80089d8:	688a      	ldr	r2, [r1, #8]
 80089da:	690b      	ldr	r3, [r1, #16]
 80089dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80089e0:	4293      	cmp	r3, r2
 80089e2:	bfb8      	it	lt
 80089e4:	4613      	movlt	r3, r2
 80089e6:	f8c9 3000 	str.w	r3, [r9]
 80089ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80089ee:	4606      	mov	r6, r0
 80089f0:	460c      	mov	r4, r1
 80089f2:	b112      	cbz	r2, 80089fa <_printf_common+0x2a>
 80089f4:	3301      	adds	r3, #1
 80089f6:	f8c9 3000 	str.w	r3, [r9]
 80089fa:	6823      	ldr	r3, [r4, #0]
 80089fc:	0699      	lsls	r1, r3, #26
 80089fe:	bf42      	ittt	mi
 8008a00:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008a04:	3302      	addmi	r3, #2
 8008a06:	f8c9 3000 	strmi.w	r3, [r9]
 8008a0a:	6825      	ldr	r5, [r4, #0]
 8008a0c:	f015 0506 	ands.w	r5, r5, #6
 8008a10:	d107      	bne.n	8008a22 <_printf_common+0x52>
 8008a12:	f104 0a19 	add.w	sl, r4, #25
 8008a16:	68e3      	ldr	r3, [r4, #12]
 8008a18:	f8d9 2000 	ldr.w	r2, [r9]
 8008a1c:	1a9b      	subs	r3, r3, r2
 8008a1e:	42ab      	cmp	r3, r5
 8008a20:	dc28      	bgt.n	8008a74 <_printf_common+0xa4>
 8008a22:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008a26:	6822      	ldr	r2, [r4, #0]
 8008a28:	3300      	adds	r3, #0
 8008a2a:	bf18      	it	ne
 8008a2c:	2301      	movne	r3, #1
 8008a2e:	0692      	lsls	r2, r2, #26
 8008a30:	d42d      	bmi.n	8008a8e <_printf_common+0xbe>
 8008a32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a36:	4639      	mov	r1, r7
 8008a38:	4630      	mov	r0, r6
 8008a3a:	47c0      	blx	r8
 8008a3c:	3001      	adds	r0, #1
 8008a3e:	d020      	beq.n	8008a82 <_printf_common+0xb2>
 8008a40:	6823      	ldr	r3, [r4, #0]
 8008a42:	68e5      	ldr	r5, [r4, #12]
 8008a44:	f8d9 2000 	ldr.w	r2, [r9]
 8008a48:	f003 0306 	and.w	r3, r3, #6
 8008a4c:	2b04      	cmp	r3, #4
 8008a4e:	bf08      	it	eq
 8008a50:	1aad      	subeq	r5, r5, r2
 8008a52:	68a3      	ldr	r3, [r4, #8]
 8008a54:	6922      	ldr	r2, [r4, #16]
 8008a56:	bf0c      	ite	eq
 8008a58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a5c:	2500      	movne	r5, #0
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	bfc4      	itt	gt
 8008a62:	1a9b      	subgt	r3, r3, r2
 8008a64:	18ed      	addgt	r5, r5, r3
 8008a66:	f04f 0900 	mov.w	r9, #0
 8008a6a:	341a      	adds	r4, #26
 8008a6c:	454d      	cmp	r5, r9
 8008a6e:	d11a      	bne.n	8008aa6 <_printf_common+0xd6>
 8008a70:	2000      	movs	r0, #0
 8008a72:	e008      	b.n	8008a86 <_printf_common+0xb6>
 8008a74:	2301      	movs	r3, #1
 8008a76:	4652      	mov	r2, sl
 8008a78:	4639      	mov	r1, r7
 8008a7a:	4630      	mov	r0, r6
 8008a7c:	47c0      	blx	r8
 8008a7e:	3001      	adds	r0, #1
 8008a80:	d103      	bne.n	8008a8a <_printf_common+0xba>
 8008a82:	f04f 30ff 	mov.w	r0, #4294967295
 8008a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a8a:	3501      	adds	r5, #1
 8008a8c:	e7c3      	b.n	8008a16 <_printf_common+0x46>
 8008a8e:	18e1      	adds	r1, r4, r3
 8008a90:	1c5a      	adds	r2, r3, #1
 8008a92:	2030      	movs	r0, #48	; 0x30
 8008a94:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a98:	4422      	add	r2, r4
 8008a9a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a9e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008aa2:	3302      	adds	r3, #2
 8008aa4:	e7c5      	b.n	8008a32 <_printf_common+0x62>
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	4622      	mov	r2, r4
 8008aaa:	4639      	mov	r1, r7
 8008aac:	4630      	mov	r0, r6
 8008aae:	47c0      	blx	r8
 8008ab0:	3001      	adds	r0, #1
 8008ab2:	d0e6      	beq.n	8008a82 <_printf_common+0xb2>
 8008ab4:	f109 0901 	add.w	r9, r9, #1
 8008ab8:	e7d8      	b.n	8008a6c <_printf_common+0x9c>
	...

08008abc <_printf_i>:
 8008abc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ac0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008ac4:	460c      	mov	r4, r1
 8008ac6:	7e09      	ldrb	r1, [r1, #24]
 8008ac8:	b085      	sub	sp, #20
 8008aca:	296e      	cmp	r1, #110	; 0x6e
 8008acc:	4617      	mov	r7, r2
 8008ace:	4606      	mov	r6, r0
 8008ad0:	4698      	mov	r8, r3
 8008ad2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ad4:	f000 80b3 	beq.w	8008c3e <_printf_i+0x182>
 8008ad8:	d822      	bhi.n	8008b20 <_printf_i+0x64>
 8008ada:	2963      	cmp	r1, #99	; 0x63
 8008adc:	d036      	beq.n	8008b4c <_printf_i+0x90>
 8008ade:	d80a      	bhi.n	8008af6 <_printf_i+0x3a>
 8008ae0:	2900      	cmp	r1, #0
 8008ae2:	f000 80b9 	beq.w	8008c58 <_printf_i+0x19c>
 8008ae6:	2958      	cmp	r1, #88	; 0x58
 8008ae8:	f000 8083 	beq.w	8008bf2 <_printf_i+0x136>
 8008aec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008af0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008af4:	e032      	b.n	8008b5c <_printf_i+0xa0>
 8008af6:	2964      	cmp	r1, #100	; 0x64
 8008af8:	d001      	beq.n	8008afe <_printf_i+0x42>
 8008afa:	2969      	cmp	r1, #105	; 0x69
 8008afc:	d1f6      	bne.n	8008aec <_printf_i+0x30>
 8008afe:	6820      	ldr	r0, [r4, #0]
 8008b00:	6813      	ldr	r3, [r2, #0]
 8008b02:	0605      	lsls	r5, r0, #24
 8008b04:	f103 0104 	add.w	r1, r3, #4
 8008b08:	d52a      	bpl.n	8008b60 <_printf_i+0xa4>
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	6011      	str	r1, [r2, #0]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	da03      	bge.n	8008b1a <_printf_i+0x5e>
 8008b12:	222d      	movs	r2, #45	; 0x2d
 8008b14:	425b      	negs	r3, r3
 8008b16:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008b1a:	486f      	ldr	r0, [pc, #444]	; (8008cd8 <_printf_i+0x21c>)
 8008b1c:	220a      	movs	r2, #10
 8008b1e:	e039      	b.n	8008b94 <_printf_i+0xd8>
 8008b20:	2973      	cmp	r1, #115	; 0x73
 8008b22:	f000 809d 	beq.w	8008c60 <_printf_i+0x1a4>
 8008b26:	d808      	bhi.n	8008b3a <_printf_i+0x7e>
 8008b28:	296f      	cmp	r1, #111	; 0x6f
 8008b2a:	d020      	beq.n	8008b6e <_printf_i+0xb2>
 8008b2c:	2970      	cmp	r1, #112	; 0x70
 8008b2e:	d1dd      	bne.n	8008aec <_printf_i+0x30>
 8008b30:	6823      	ldr	r3, [r4, #0]
 8008b32:	f043 0320 	orr.w	r3, r3, #32
 8008b36:	6023      	str	r3, [r4, #0]
 8008b38:	e003      	b.n	8008b42 <_printf_i+0x86>
 8008b3a:	2975      	cmp	r1, #117	; 0x75
 8008b3c:	d017      	beq.n	8008b6e <_printf_i+0xb2>
 8008b3e:	2978      	cmp	r1, #120	; 0x78
 8008b40:	d1d4      	bne.n	8008aec <_printf_i+0x30>
 8008b42:	2378      	movs	r3, #120	; 0x78
 8008b44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b48:	4864      	ldr	r0, [pc, #400]	; (8008cdc <_printf_i+0x220>)
 8008b4a:	e055      	b.n	8008bf8 <_printf_i+0x13c>
 8008b4c:	6813      	ldr	r3, [r2, #0]
 8008b4e:	1d19      	adds	r1, r3, #4
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	6011      	str	r1, [r2, #0]
 8008b54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	e08c      	b.n	8008c7a <_printf_i+0x1be>
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	6011      	str	r1, [r2, #0]
 8008b64:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008b68:	bf18      	it	ne
 8008b6a:	b21b      	sxthne	r3, r3
 8008b6c:	e7cf      	b.n	8008b0e <_printf_i+0x52>
 8008b6e:	6813      	ldr	r3, [r2, #0]
 8008b70:	6825      	ldr	r5, [r4, #0]
 8008b72:	1d18      	adds	r0, r3, #4
 8008b74:	6010      	str	r0, [r2, #0]
 8008b76:	0628      	lsls	r0, r5, #24
 8008b78:	d501      	bpl.n	8008b7e <_printf_i+0xc2>
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	e002      	b.n	8008b84 <_printf_i+0xc8>
 8008b7e:	0668      	lsls	r0, r5, #25
 8008b80:	d5fb      	bpl.n	8008b7a <_printf_i+0xbe>
 8008b82:	881b      	ldrh	r3, [r3, #0]
 8008b84:	4854      	ldr	r0, [pc, #336]	; (8008cd8 <_printf_i+0x21c>)
 8008b86:	296f      	cmp	r1, #111	; 0x6f
 8008b88:	bf14      	ite	ne
 8008b8a:	220a      	movne	r2, #10
 8008b8c:	2208      	moveq	r2, #8
 8008b8e:	2100      	movs	r1, #0
 8008b90:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b94:	6865      	ldr	r5, [r4, #4]
 8008b96:	60a5      	str	r5, [r4, #8]
 8008b98:	2d00      	cmp	r5, #0
 8008b9a:	f2c0 8095 	blt.w	8008cc8 <_printf_i+0x20c>
 8008b9e:	6821      	ldr	r1, [r4, #0]
 8008ba0:	f021 0104 	bic.w	r1, r1, #4
 8008ba4:	6021      	str	r1, [r4, #0]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d13d      	bne.n	8008c26 <_printf_i+0x16a>
 8008baa:	2d00      	cmp	r5, #0
 8008bac:	f040 808e 	bne.w	8008ccc <_printf_i+0x210>
 8008bb0:	4665      	mov	r5, ip
 8008bb2:	2a08      	cmp	r2, #8
 8008bb4:	d10b      	bne.n	8008bce <_printf_i+0x112>
 8008bb6:	6823      	ldr	r3, [r4, #0]
 8008bb8:	07db      	lsls	r3, r3, #31
 8008bba:	d508      	bpl.n	8008bce <_printf_i+0x112>
 8008bbc:	6923      	ldr	r3, [r4, #16]
 8008bbe:	6862      	ldr	r2, [r4, #4]
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	bfde      	ittt	le
 8008bc4:	2330      	movle	r3, #48	; 0x30
 8008bc6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008bca:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008bce:	ebac 0305 	sub.w	r3, ip, r5
 8008bd2:	6123      	str	r3, [r4, #16]
 8008bd4:	f8cd 8000 	str.w	r8, [sp]
 8008bd8:	463b      	mov	r3, r7
 8008bda:	aa03      	add	r2, sp, #12
 8008bdc:	4621      	mov	r1, r4
 8008bde:	4630      	mov	r0, r6
 8008be0:	f7ff fef6 	bl	80089d0 <_printf_common>
 8008be4:	3001      	adds	r0, #1
 8008be6:	d14d      	bne.n	8008c84 <_printf_i+0x1c8>
 8008be8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bec:	b005      	add	sp, #20
 8008bee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008bf2:	4839      	ldr	r0, [pc, #228]	; (8008cd8 <_printf_i+0x21c>)
 8008bf4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008bf8:	6813      	ldr	r3, [r2, #0]
 8008bfa:	6821      	ldr	r1, [r4, #0]
 8008bfc:	1d1d      	adds	r5, r3, #4
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	6015      	str	r5, [r2, #0]
 8008c02:	060a      	lsls	r2, r1, #24
 8008c04:	d50b      	bpl.n	8008c1e <_printf_i+0x162>
 8008c06:	07ca      	lsls	r2, r1, #31
 8008c08:	bf44      	itt	mi
 8008c0a:	f041 0120 	orrmi.w	r1, r1, #32
 8008c0e:	6021      	strmi	r1, [r4, #0]
 8008c10:	b91b      	cbnz	r3, 8008c1a <_printf_i+0x15e>
 8008c12:	6822      	ldr	r2, [r4, #0]
 8008c14:	f022 0220 	bic.w	r2, r2, #32
 8008c18:	6022      	str	r2, [r4, #0]
 8008c1a:	2210      	movs	r2, #16
 8008c1c:	e7b7      	b.n	8008b8e <_printf_i+0xd2>
 8008c1e:	064d      	lsls	r5, r1, #25
 8008c20:	bf48      	it	mi
 8008c22:	b29b      	uxthmi	r3, r3
 8008c24:	e7ef      	b.n	8008c06 <_printf_i+0x14a>
 8008c26:	4665      	mov	r5, ip
 8008c28:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c2c:	fb02 3311 	mls	r3, r2, r1, r3
 8008c30:	5cc3      	ldrb	r3, [r0, r3]
 8008c32:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008c36:	460b      	mov	r3, r1
 8008c38:	2900      	cmp	r1, #0
 8008c3a:	d1f5      	bne.n	8008c28 <_printf_i+0x16c>
 8008c3c:	e7b9      	b.n	8008bb2 <_printf_i+0xf6>
 8008c3e:	6813      	ldr	r3, [r2, #0]
 8008c40:	6825      	ldr	r5, [r4, #0]
 8008c42:	6961      	ldr	r1, [r4, #20]
 8008c44:	1d18      	adds	r0, r3, #4
 8008c46:	6010      	str	r0, [r2, #0]
 8008c48:	0628      	lsls	r0, r5, #24
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	d501      	bpl.n	8008c52 <_printf_i+0x196>
 8008c4e:	6019      	str	r1, [r3, #0]
 8008c50:	e002      	b.n	8008c58 <_printf_i+0x19c>
 8008c52:	066a      	lsls	r2, r5, #25
 8008c54:	d5fb      	bpl.n	8008c4e <_printf_i+0x192>
 8008c56:	8019      	strh	r1, [r3, #0]
 8008c58:	2300      	movs	r3, #0
 8008c5a:	6123      	str	r3, [r4, #16]
 8008c5c:	4665      	mov	r5, ip
 8008c5e:	e7b9      	b.n	8008bd4 <_printf_i+0x118>
 8008c60:	6813      	ldr	r3, [r2, #0]
 8008c62:	1d19      	adds	r1, r3, #4
 8008c64:	6011      	str	r1, [r2, #0]
 8008c66:	681d      	ldr	r5, [r3, #0]
 8008c68:	6862      	ldr	r2, [r4, #4]
 8008c6a:	2100      	movs	r1, #0
 8008c6c:	4628      	mov	r0, r5
 8008c6e:	f7f7 faaf 	bl	80001d0 <memchr>
 8008c72:	b108      	cbz	r0, 8008c78 <_printf_i+0x1bc>
 8008c74:	1b40      	subs	r0, r0, r5
 8008c76:	6060      	str	r0, [r4, #4]
 8008c78:	6863      	ldr	r3, [r4, #4]
 8008c7a:	6123      	str	r3, [r4, #16]
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c82:	e7a7      	b.n	8008bd4 <_printf_i+0x118>
 8008c84:	6923      	ldr	r3, [r4, #16]
 8008c86:	462a      	mov	r2, r5
 8008c88:	4639      	mov	r1, r7
 8008c8a:	4630      	mov	r0, r6
 8008c8c:	47c0      	blx	r8
 8008c8e:	3001      	adds	r0, #1
 8008c90:	d0aa      	beq.n	8008be8 <_printf_i+0x12c>
 8008c92:	6823      	ldr	r3, [r4, #0]
 8008c94:	079b      	lsls	r3, r3, #30
 8008c96:	d413      	bmi.n	8008cc0 <_printf_i+0x204>
 8008c98:	68e0      	ldr	r0, [r4, #12]
 8008c9a:	9b03      	ldr	r3, [sp, #12]
 8008c9c:	4298      	cmp	r0, r3
 8008c9e:	bfb8      	it	lt
 8008ca0:	4618      	movlt	r0, r3
 8008ca2:	e7a3      	b.n	8008bec <_printf_i+0x130>
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	464a      	mov	r2, r9
 8008ca8:	4639      	mov	r1, r7
 8008caa:	4630      	mov	r0, r6
 8008cac:	47c0      	blx	r8
 8008cae:	3001      	adds	r0, #1
 8008cb0:	d09a      	beq.n	8008be8 <_printf_i+0x12c>
 8008cb2:	3501      	adds	r5, #1
 8008cb4:	68e3      	ldr	r3, [r4, #12]
 8008cb6:	9a03      	ldr	r2, [sp, #12]
 8008cb8:	1a9b      	subs	r3, r3, r2
 8008cba:	42ab      	cmp	r3, r5
 8008cbc:	dcf2      	bgt.n	8008ca4 <_printf_i+0x1e8>
 8008cbe:	e7eb      	b.n	8008c98 <_printf_i+0x1dc>
 8008cc0:	2500      	movs	r5, #0
 8008cc2:	f104 0919 	add.w	r9, r4, #25
 8008cc6:	e7f5      	b.n	8008cb4 <_printf_i+0x1f8>
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d1ac      	bne.n	8008c26 <_printf_i+0x16a>
 8008ccc:	7803      	ldrb	r3, [r0, #0]
 8008cce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008cd2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cd6:	e76c      	b.n	8008bb2 <_printf_i+0xf6>
 8008cd8:	0800c59a 	.word	0x0800c59a
 8008cdc:	0800c5ab 	.word	0x0800c5ab

08008ce0 <_scanf_float>:
 8008ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce4:	469a      	mov	sl, r3
 8008ce6:	688b      	ldr	r3, [r1, #8]
 8008ce8:	4616      	mov	r6, r2
 8008cea:	1e5a      	subs	r2, r3, #1
 8008cec:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008cf0:	b087      	sub	sp, #28
 8008cf2:	bf83      	ittte	hi
 8008cf4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8008cf8:	189b      	addhi	r3, r3, r2
 8008cfa:	9301      	strhi	r3, [sp, #4]
 8008cfc:	2300      	movls	r3, #0
 8008cfe:	bf86      	itte	hi
 8008d00:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008d04:	608b      	strhi	r3, [r1, #8]
 8008d06:	9301      	strls	r3, [sp, #4]
 8008d08:	680b      	ldr	r3, [r1, #0]
 8008d0a:	4688      	mov	r8, r1
 8008d0c:	f04f 0b00 	mov.w	fp, #0
 8008d10:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008d14:	f848 3b1c 	str.w	r3, [r8], #28
 8008d18:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8008d1c:	4607      	mov	r7, r0
 8008d1e:	460c      	mov	r4, r1
 8008d20:	4645      	mov	r5, r8
 8008d22:	465a      	mov	r2, fp
 8008d24:	46d9      	mov	r9, fp
 8008d26:	f8cd b008 	str.w	fp, [sp, #8]
 8008d2a:	68a1      	ldr	r1, [r4, #8]
 8008d2c:	b181      	cbz	r1, 8008d50 <_scanf_float+0x70>
 8008d2e:	6833      	ldr	r3, [r6, #0]
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	2b49      	cmp	r3, #73	; 0x49
 8008d34:	d071      	beq.n	8008e1a <_scanf_float+0x13a>
 8008d36:	d84d      	bhi.n	8008dd4 <_scanf_float+0xf4>
 8008d38:	2b39      	cmp	r3, #57	; 0x39
 8008d3a:	d840      	bhi.n	8008dbe <_scanf_float+0xde>
 8008d3c:	2b31      	cmp	r3, #49	; 0x31
 8008d3e:	f080 8088 	bcs.w	8008e52 <_scanf_float+0x172>
 8008d42:	2b2d      	cmp	r3, #45	; 0x2d
 8008d44:	f000 8090 	beq.w	8008e68 <_scanf_float+0x188>
 8008d48:	d815      	bhi.n	8008d76 <_scanf_float+0x96>
 8008d4a:	2b2b      	cmp	r3, #43	; 0x2b
 8008d4c:	f000 808c 	beq.w	8008e68 <_scanf_float+0x188>
 8008d50:	f1b9 0f00 	cmp.w	r9, #0
 8008d54:	d003      	beq.n	8008d5e <_scanf_float+0x7e>
 8008d56:	6823      	ldr	r3, [r4, #0]
 8008d58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d5c:	6023      	str	r3, [r4, #0]
 8008d5e:	3a01      	subs	r2, #1
 8008d60:	2a01      	cmp	r2, #1
 8008d62:	f200 80ea 	bhi.w	8008f3a <_scanf_float+0x25a>
 8008d66:	4545      	cmp	r5, r8
 8008d68:	f200 80dc 	bhi.w	8008f24 <_scanf_float+0x244>
 8008d6c:	2601      	movs	r6, #1
 8008d6e:	4630      	mov	r0, r6
 8008d70:	b007      	add	sp, #28
 8008d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d76:	2b2e      	cmp	r3, #46	; 0x2e
 8008d78:	f000 809f 	beq.w	8008eba <_scanf_float+0x1da>
 8008d7c:	2b30      	cmp	r3, #48	; 0x30
 8008d7e:	d1e7      	bne.n	8008d50 <_scanf_float+0x70>
 8008d80:	6820      	ldr	r0, [r4, #0]
 8008d82:	f410 7f80 	tst.w	r0, #256	; 0x100
 8008d86:	d064      	beq.n	8008e52 <_scanf_float+0x172>
 8008d88:	9b01      	ldr	r3, [sp, #4]
 8008d8a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8008d8e:	6020      	str	r0, [r4, #0]
 8008d90:	f109 0901 	add.w	r9, r9, #1
 8008d94:	b11b      	cbz	r3, 8008d9e <_scanf_float+0xbe>
 8008d96:	3b01      	subs	r3, #1
 8008d98:	3101      	adds	r1, #1
 8008d9a:	9301      	str	r3, [sp, #4]
 8008d9c:	60a1      	str	r1, [r4, #8]
 8008d9e:	68a3      	ldr	r3, [r4, #8]
 8008da0:	3b01      	subs	r3, #1
 8008da2:	60a3      	str	r3, [r4, #8]
 8008da4:	6923      	ldr	r3, [r4, #16]
 8008da6:	3301      	adds	r3, #1
 8008da8:	6123      	str	r3, [r4, #16]
 8008daa:	6873      	ldr	r3, [r6, #4]
 8008dac:	3b01      	subs	r3, #1
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	6073      	str	r3, [r6, #4]
 8008db2:	f340 80ac 	ble.w	8008f0e <_scanf_float+0x22e>
 8008db6:	6833      	ldr	r3, [r6, #0]
 8008db8:	3301      	adds	r3, #1
 8008dba:	6033      	str	r3, [r6, #0]
 8008dbc:	e7b5      	b.n	8008d2a <_scanf_float+0x4a>
 8008dbe:	2b45      	cmp	r3, #69	; 0x45
 8008dc0:	f000 8085 	beq.w	8008ece <_scanf_float+0x1ee>
 8008dc4:	2b46      	cmp	r3, #70	; 0x46
 8008dc6:	d06a      	beq.n	8008e9e <_scanf_float+0x1be>
 8008dc8:	2b41      	cmp	r3, #65	; 0x41
 8008dca:	d1c1      	bne.n	8008d50 <_scanf_float+0x70>
 8008dcc:	2a01      	cmp	r2, #1
 8008dce:	d1bf      	bne.n	8008d50 <_scanf_float+0x70>
 8008dd0:	2202      	movs	r2, #2
 8008dd2:	e046      	b.n	8008e62 <_scanf_float+0x182>
 8008dd4:	2b65      	cmp	r3, #101	; 0x65
 8008dd6:	d07a      	beq.n	8008ece <_scanf_float+0x1ee>
 8008dd8:	d818      	bhi.n	8008e0c <_scanf_float+0x12c>
 8008dda:	2b54      	cmp	r3, #84	; 0x54
 8008ddc:	d066      	beq.n	8008eac <_scanf_float+0x1cc>
 8008dde:	d811      	bhi.n	8008e04 <_scanf_float+0x124>
 8008de0:	2b4e      	cmp	r3, #78	; 0x4e
 8008de2:	d1b5      	bne.n	8008d50 <_scanf_float+0x70>
 8008de4:	2a00      	cmp	r2, #0
 8008de6:	d146      	bne.n	8008e76 <_scanf_float+0x196>
 8008de8:	f1b9 0f00 	cmp.w	r9, #0
 8008dec:	d145      	bne.n	8008e7a <_scanf_float+0x19a>
 8008dee:	6821      	ldr	r1, [r4, #0]
 8008df0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8008df4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8008df8:	d13f      	bne.n	8008e7a <_scanf_float+0x19a>
 8008dfa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008dfe:	6021      	str	r1, [r4, #0]
 8008e00:	2201      	movs	r2, #1
 8008e02:	e02e      	b.n	8008e62 <_scanf_float+0x182>
 8008e04:	2b59      	cmp	r3, #89	; 0x59
 8008e06:	d01e      	beq.n	8008e46 <_scanf_float+0x166>
 8008e08:	2b61      	cmp	r3, #97	; 0x61
 8008e0a:	e7de      	b.n	8008dca <_scanf_float+0xea>
 8008e0c:	2b6e      	cmp	r3, #110	; 0x6e
 8008e0e:	d0e9      	beq.n	8008de4 <_scanf_float+0x104>
 8008e10:	d815      	bhi.n	8008e3e <_scanf_float+0x15e>
 8008e12:	2b66      	cmp	r3, #102	; 0x66
 8008e14:	d043      	beq.n	8008e9e <_scanf_float+0x1be>
 8008e16:	2b69      	cmp	r3, #105	; 0x69
 8008e18:	d19a      	bne.n	8008d50 <_scanf_float+0x70>
 8008e1a:	f1bb 0f00 	cmp.w	fp, #0
 8008e1e:	d138      	bne.n	8008e92 <_scanf_float+0x1b2>
 8008e20:	f1b9 0f00 	cmp.w	r9, #0
 8008e24:	d197      	bne.n	8008d56 <_scanf_float+0x76>
 8008e26:	6821      	ldr	r1, [r4, #0]
 8008e28:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8008e2c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8008e30:	d195      	bne.n	8008d5e <_scanf_float+0x7e>
 8008e32:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008e36:	6021      	str	r1, [r4, #0]
 8008e38:	f04f 0b01 	mov.w	fp, #1
 8008e3c:	e011      	b.n	8008e62 <_scanf_float+0x182>
 8008e3e:	2b74      	cmp	r3, #116	; 0x74
 8008e40:	d034      	beq.n	8008eac <_scanf_float+0x1cc>
 8008e42:	2b79      	cmp	r3, #121	; 0x79
 8008e44:	d184      	bne.n	8008d50 <_scanf_float+0x70>
 8008e46:	f1bb 0f07 	cmp.w	fp, #7
 8008e4a:	d181      	bne.n	8008d50 <_scanf_float+0x70>
 8008e4c:	f04f 0b08 	mov.w	fp, #8
 8008e50:	e007      	b.n	8008e62 <_scanf_float+0x182>
 8008e52:	eb12 0f0b 	cmn.w	r2, fp
 8008e56:	f47f af7b 	bne.w	8008d50 <_scanf_float+0x70>
 8008e5a:	6821      	ldr	r1, [r4, #0]
 8008e5c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8008e60:	6021      	str	r1, [r4, #0]
 8008e62:	702b      	strb	r3, [r5, #0]
 8008e64:	3501      	adds	r5, #1
 8008e66:	e79a      	b.n	8008d9e <_scanf_float+0xbe>
 8008e68:	6821      	ldr	r1, [r4, #0]
 8008e6a:	0608      	lsls	r0, r1, #24
 8008e6c:	f57f af70 	bpl.w	8008d50 <_scanf_float+0x70>
 8008e70:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008e74:	e7f4      	b.n	8008e60 <_scanf_float+0x180>
 8008e76:	2a02      	cmp	r2, #2
 8008e78:	d047      	beq.n	8008f0a <_scanf_float+0x22a>
 8008e7a:	f1bb 0f01 	cmp.w	fp, #1
 8008e7e:	d003      	beq.n	8008e88 <_scanf_float+0x1a8>
 8008e80:	f1bb 0f04 	cmp.w	fp, #4
 8008e84:	f47f af64 	bne.w	8008d50 <_scanf_float+0x70>
 8008e88:	f10b 0b01 	add.w	fp, fp, #1
 8008e8c:	fa5f fb8b 	uxtb.w	fp, fp
 8008e90:	e7e7      	b.n	8008e62 <_scanf_float+0x182>
 8008e92:	f1bb 0f03 	cmp.w	fp, #3
 8008e96:	d0f7      	beq.n	8008e88 <_scanf_float+0x1a8>
 8008e98:	f1bb 0f05 	cmp.w	fp, #5
 8008e9c:	e7f2      	b.n	8008e84 <_scanf_float+0x1a4>
 8008e9e:	f1bb 0f02 	cmp.w	fp, #2
 8008ea2:	f47f af55 	bne.w	8008d50 <_scanf_float+0x70>
 8008ea6:	f04f 0b03 	mov.w	fp, #3
 8008eaa:	e7da      	b.n	8008e62 <_scanf_float+0x182>
 8008eac:	f1bb 0f06 	cmp.w	fp, #6
 8008eb0:	f47f af4e 	bne.w	8008d50 <_scanf_float+0x70>
 8008eb4:	f04f 0b07 	mov.w	fp, #7
 8008eb8:	e7d3      	b.n	8008e62 <_scanf_float+0x182>
 8008eba:	6821      	ldr	r1, [r4, #0]
 8008ebc:	0588      	lsls	r0, r1, #22
 8008ebe:	f57f af47 	bpl.w	8008d50 <_scanf_float+0x70>
 8008ec2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8008ec6:	6021      	str	r1, [r4, #0]
 8008ec8:	f8cd 9008 	str.w	r9, [sp, #8]
 8008ecc:	e7c9      	b.n	8008e62 <_scanf_float+0x182>
 8008ece:	6821      	ldr	r1, [r4, #0]
 8008ed0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8008ed4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8008ed8:	d006      	beq.n	8008ee8 <_scanf_float+0x208>
 8008eda:	0548      	lsls	r0, r1, #21
 8008edc:	f57f af38 	bpl.w	8008d50 <_scanf_float+0x70>
 8008ee0:	f1b9 0f00 	cmp.w	r9, #0
 8008ee4:	f43f af3b 	beq.w	8008d5e <_scanf_float+0x7e>
 8008ee8:	0588      	lsls	r0, r1, #22
 8008eea:	bf58      	it	pl
 8008eec:	9802      	ldrpl	r0, [sp, #8]
 8008eee:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008ef2:	bf58      	it	pl
 8008ef4:	eba9 0000 	subpl.w	r0, r9, r0
 8008ef8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8008efc:	bf58      	it	pl
 8008efe:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8008f02:	6021      	str	r1, [r4, #0]
 8008f04:	f04f 0900 	mov.w	r9, #0
 8008f08:	e7ab      	b.n	8008e62 <_scanf_float+0x182>
 8008f0a:	2203      	movs	r2, #3
 8008f0c:	e7a9      	b.n	8008e62 <_scanf_float+0x182>
 8008f0e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008f12:	9205      	str	r2, [sp, #20]
 8008f14:	4631      	mov	r1, r6
 8008f16:	4638      	mov	r0, r7
 8008f18:	4798      	blx	r3
 8008f1a:	9a05      	ldr	r2, [sp, #20]
 8008f1c:	2800      	cmp	r0, #0
 8008f1e:	f43f af04 	beq.w	8008d2a <_scanf_float+0x4a>
 8008f22:	e715      	b.n	8008d50 <_scanf_float+0x70>
 8008f24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f28:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008f2c:	4632      	mov	r2, r6
 8008f2e:	4638      	mov	r0, r7
 8008f30:	4798      	blx	r3
 8008f32:	6923      	ldr	r3, [r4, #16]
 8008f34:	3b01      	subs	r3, #1
 8008f36:	6123      	str	r3, [r4, #16]
 8008f38:	e715      	b.n	8008d66 <_scanf_float+0x86>
 8008f3a:	f10b 33ff 	add.w	r3, fp, #4294967295
 8008f3e:	2b06      	cmp	r3, #6
 8008f40:	d80a      	bhi.n	8008f58 <_scanf_float+0x278>
 8008f42:	f1bb 0f02 	cmp.w	fp, #2
 8008f46:	d968      	bls.n	800901a <_scanf_float+0x33a>
 8008f48:	f1ab 0b03 	sub.w	fp, fp, #3
 8008f4c:	fa5f fb8b 	uxtb.w	fp, fp
 8008f50:	eba5 0b0b 	sub.w	fp, r5, fp
 8008f54:	455d      	cmp	r5, fp
 8008f56:	d14b      	bne.n	8008ff0 <_scanf_float+0x310>
 8008f58:	6823      	ldr	r3, [r4, #0]
 8008f5a:	05da      	lsls	r2, r3, #23
 8008f5c:	d51f      	bpl.n	8008f9e <_scanf_float+0x2be>
 8008f5e:	055b      	lsls	r3, r3, #21
 8008f60:	d468      	bmi.n	8009034 <_scanf_float+0x354>
 8008f62:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008f66:	6923      	ldr	r3, [r4, #16]
 8008f68:	2965      	cmp	r1, #101	; 0x65
 8008f6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8008f6e:	f105 3bff 	add.w	fp, r5, #4294967295
 8008f72:	6123      	str	r3, [r4, #16]
 8008f74:	d00d      	beq.n	8008f92 <_scanf_float+0x2b2>
 8008f76:	2945      	cmp	r1, #69	; 0x45
 8008f78:	d00b      	beq.n	8008f92 <_scanf_float+0x2b2>
 8008f7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f7e:	4632      	mov	r2, r6
 8008f80:	4638      	mov	r0, r7
 8008f82:	4798      	blx	r3
 8008f84:	6923      	ldr	r3, [r4, #16]
 8008f86:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	f1a5 0b02 	sub.w	fp, r5, #2
 8008f90:	6123      	str	r3, [r4, #16]
 8008f92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f96:	4632      	mov	r2, r6
 8008f98:	4638      	mov	r0, r7
 8008f9a:	4798      	blx	r3
 8008f9c:	465d      	mov	r5, fp
 8008f9e:	6826      	ldr	r6, [r4, #0]
 8008fa0:	f016 0610 	ands.w	r6, r6, #16
 8008fa4:	d17a      	bne.n	800909c <_scanf_float+0x3bc>
 8008fa6:	702e      	strb	r6, [r5, #0]
 8008fa8:	6823      	ldr	r3, [r4, #0]
 8008faa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fb2:	d142      	bne.n	800903a <_scanf_float+0x35a>
 8008fb4:	9b02      	ldr	r3, [sp, #8]
 8008fb6:	eba9 0303 	sub.w	r3, r9, r3
 8008fba:	425a      	negs	r2, r3
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d149      	bne.n	8009054 <_scanf_float+0x374>
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	4641      	mov	r1, r8
 8008fc4:	4638      	mov	r0, r7
 8008fc6:	f000 fec3 	bl	8009d50 <_strtod_r>
 8008fca:	6825      	ldr	r5, [r4, #0]
 8008fcc:	f8da 3000 	ldr.w	r3, [sl]
 8008fd0:	f015 0f02 	tst.w	r5, #2
 8008fd4:	f103 0204 	add.w	r2, r3, #4
 8008fd8:	ec59 8b10 	vmov	r8, r9, d0
 8008fdc:	f8ca 2000 	str.w	r2, [sl]
 8008fe0:	d043      	beq.n	800906a <_scanf_float+0x38a>
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	e9c3 8900 	strd	r8, r9, [r3]
 8008fe8:	68e3      	ldr	r3, [r4, #12]
 8008fea:	3301      	adds	r3, #1
 8008fec:	60e3      	str	r3, [r4, #12]
 8008fee:	e6be      	b.n	8008d6e <_scanf_float+0x8e>
 8008ff0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ff4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008ff8:	4632      	mov	r2, r6
 8008ffa:	4638      	mov	r0, r7
 8008ffc:	4798      	blx	r3
 8008ffe:	6923      	ldr	r3, [r4, #16]
 8009000:	3b01      	subs	r3, #1
 8009002:	6123      	str	r3, [r4, #16]
 8009004:	e7a6      	b.n	8008f54 <_scanf_float+0x274>
 8009006:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800900a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800900e:	4632      	mov	r2, r6
 8009010:	4638      	mov	r0, r7
 8009012:	4798      	blx	r3
 8009014:	6923      	ldr	r3, [r4, #16]
 8009016:	3b01      	subs	r3, #1
 8009018:	6123      	str	r3, [r4, #16]
 800901a:	4545      	cmp	r5, r8
 800901c:	d8f3      	bhi.n	8009006 <_scanf_float+0x326>
 800901e:	e6a5      	b.n	8008d6c <_scanf_float+0x8c>
 8009020:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009024:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009028:	4632      	mov	r2, r6
 800902a:	4638      	mov	r0, r7
 800902c:	4798      	blx	r3
 800902e:	6923      	ldr	r3, [r4, #16]
 8009030:	3b01      	subs	r3, #1
 8009032:	6123      	str	r3, [r4, #16]
 8009034:	4545      	cmp	r5, r8
 8009036:	d8f3      	bhi.n	8009020 <_scanf_float+0x340>
 8009038:	e698      	b.n	8008d6c <_scanf_float+0x8c>
 800903a:	9b03      	ldr	r3, [sp, #12]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d0bf      	beq.n	8008fc0 <_scanf_float+0x2e0>
 8009040:	9904      	ldr	r1, [sp, #16]
 8009042:	230a      	movs	r3, #10
 8009044:	4632      	mov	r2, r6
 8009046:	3101      	adds	r1, #1
 8009048:	4638      	mov	r0, r7
 800904a:	f000 ff21 	bl	8009e90 <_strtol_r>
 800904e:	9b03      	ldr	r3, [sp, #12]
 8009050:	9d04      	ldr	r5, [sp, #16]
 8009052:	1ac2      	subs	r2, r0, r3
 8009054:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009058:	429d      	cmp	r5, r3
 800905a:	bf28      	it	cs
 800905c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8009060:	490f      	ldr	r1, [pc, #60]	; (80090a0 <_scanf_float+0x3c0>)
 8009062:	4628      	mov	r0, r5
 8009064:	f000 f824 	bl	80090b0 <siprintf>
 8009068:	e7aa      	b.n	8008fc0 <_scanf_float+0x2e0>
 800906a:	f015 0504 	ands.w	r5, r5, #4
 800906e:	d1b8      	bne.n	8008fe2 <_scanf_float+0x302>
 8009070:	681f      	ldr	r7, [r3, #0]
 8009072:	ee10 2a10 	vmov	r2, s0
 8009076:	464b      	mov	r3, r9
 8009078:	ee10 0a10 	vmov	r0, s0
 800907c:	4649      	mov	r1, r9
 800907e:	f7f7 fd55 	bl	8000b2c <__aeabi_dcmpun>
 8009082:	b128      	cbz	r0, 8009090 <_scanf_float+0x3b0>
 8009084:	4628      	mov	r0, r5
 8009086:	f000 f80d 	bl	80090a4 <nanf>
 800908a:	ed87 0a00 	vstr	s0, [r7]
 800908e:	e7ab      	b.n	8008fe8 <_scanf_float+0x308>
 8009090:	4640      	mov	r0, r8
 8009092:	4649      	mov	r1, r9
 8009094:	f7f7 fda8 	bl	8000be8 <__aeabi_d2f>
 8009098:	6038      	str	r0, [r7, #0]
 800909a:	e7a5      	b.n	8008fe8 <_scanf_float+0x308>
 800909c:	2600      	movs	r6, #0
 800909e:	e666      	b.n	8008d6e <_scanf_float+0x8e>
 80090a0:	0800c5bc 	.word	0x0800c5bc

080090a4 <nanf>:
 80090a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80090ac <nanf+0x8>
 80090a8:	4770      	bx	lr
 80090aa:	bf00      	nop
 80090ac:	7fc00000 	.word	0x7fc00000

080090b0 <siprintf>:
 80090b0:	b40e      	push	{r1, r2, r3}
 80090b2:	b500      	push	{lr}
 80090b4:	b09c      	sub	sp, #112	; 0x70
 80090b6:	ab1d      	add	r3, sp, #116	; 0x74
 80090b8:	9002      	str	r0, [sp, #8]
 80090ba:	9006      	str	r0, [sp, #24]
 80090bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80090c0:	4809      	ldr	r0, [pc, #36]	; (80090e8 <siprintf+0x38>)
 80090c2:	9107      	str	r1, [sp, #28]
 80090c4:	9104      	str	r1, [sp, #16]
 80090c6:	4909      	ldr	r1, [pc, #36]	; (80090ec <siprintf+0x3c>)
 80090c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80090cc:	9105      	str	r1, [sp, #20]
 80090ce:	6800      	ldr	r0, [r0, #0]
 80090d0:	9301      	str	r3, [sp, #4]
 80090d2:	a902      	add	r1, sp, #8
 80090d4:	f002 fdb6 	bl	800bc44 <_svfiprintf_r>
 80090d8:	9b02      	ldr	r3, [sp, #8]
 80090da:	2200      	movs	r2, #0
 80090dc:	701a      	strb	r2, [r3, #0]
 80090de:	b01c      	add	sp, #112	; 0x70
 80090e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80090e4:	b003      	add	sp, #12
 80090e6:	4770      	bx	lr
 80090e8:	20000028 	.word	0x20000028
 80090ec:	ffff0208 	.word	0xffff0208

080090f0 <strchr>:
 80090f0:	b2c9      	uxtb	r1, r1
 80090f2:	4603      	mov	r3, r0
 80090f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090f8:	b11a      	cbz	r2, 8009102 <strchr+0x12>
 80090fa:	428a      	cmp	r2, r1
 80090fc:	d1f9      	bne.n	80090f2 <strchr+0x2>
 80090fe:	4618      	mov	r0, r3
 8009100:	4770      	bx	lr
 8009102:	2900      	cmp	r1, #0
 8009104:	bf18      	it	ne
 8009106:	2300      	movne	r3, #0
 8009108:	e7f9      	b.n	80090fe <strchr+0xe>

0800910a <strncmp>:
 800910a:	b510      	push	{r4, lr}
 800910c:	b16a      	cbz	r2, 800912a <strncmp+0x20>
 800910e:	3901      	subs	r1, #1
 8009110:	1884      	adds	r4, r0, r2
 8009112:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009116:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800911a:	4293      	cmp	r3, r2
 800911c:	d103      	bne.n	8009126 <strncmp+0x1c>
 800911e:	42a0      	cmp	r0, r4
 8009120:	d001      	beq.n	8009126 <strncmp+0x1c>
 8009122:	2b00      	cmp	r3, #0
 8009124:	d1f5      	bne.n	8009112 <strncmp+0x8>
 8009126:	1a98      	subs	r0, r3, r2
 8009128:	bd10      	pop	{r4, pc}
 800912a:	4610      	mov	r0, r2
 800912c:	e7fc      	b.n	8009128 <strncmp+0x1e>

0800912e <sulp>:
 800912e:	b570      	push	{r4, r5, r6, lr}
 8009130:	4604      	mov	r4, r0
 8009132:	460d      	mov	r5, r1
 8009134:	ec45 4b10 	vmov	d0, r4, r5
 8009138:	4616      	mov	r6, r2
 800913a:	f002 fb3f 	bl	800b7bc <__ulp>
 800913e:	ec51 0b10 	vmov	r0, r1, d0
 8009142:	b17e      	cbz	r6, 8009164 <sulp+0x36>
 8009144:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009148:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800914c:	2b00      	cmp	r3, #0
 800914e:	dd09      	ble.n	8009164 <sulp+0x36>
 8009150:	051b      	lsls	r3, r3, #20
 8009152:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009156:	2400      	movs	r4, #0
 8009158:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800915c:	4622      	mov	r2, r4
 800915e:	462b      	mov	r3, r5
 8009160:	f7f7 fa4a 	bl	80005f8 <__aeabi_dmul>
 8009164:	bd70      	pop	{r4, r5, r6, pc}
	...

08009168 <_strtod_l>:
 8009168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800916c:	461f      	mov	r7, r3
 800916e:	b0a1      	sub	sp, #132	; 0x84
 8009170:	2300      	movs	r3, #0
 8009172:	4681      	mov	r9, r0
 8009174:	4638      	mov	r0, r7
 8009176:	460e      	mov	r6, r1
 8009178:	9217      	str	r2, [sp, #92]	; 0x5c
 800917a:	931c      	str	r3, [sp, #112]	; 0x70
 800917c:	f002 f81d 	bl	800b1ba <__localeconv_l>
 8009180:	4680      	mov	r8, r0
 8009182:	6800      	ldr	r0, [r0, #0]
 8009184:	f7f7 f874 	bl	8000270 <strlen>
 8009188:	f04f 0a00 	mov.w	sl, #0
 800918c:	4604      	mov	r4, r0
 800918e:	f04f 0b00 	mov.w	fp, #0
 8009192:	961b      	str	r6, [sp, #108]	; 0x6c
 8009194:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009196:	781a      	ldrb	r2, [r3, #0]
 8009198:	2a0d      	cmp	r2, #13
 800919a:	d832      	bhi.n	8009202 <_strtod_l+0x9a>
 800919c:	2a09      	cmp	r2, #9
 800919e:	d236      	bcs.n	800920e <_strtod_l+0xa6>
 80091a0:	2a00      	cmp	r2, #0
 80091a2:	d03e      	beq.n	8009222 <_strtod_l+0xba>
 80091a4:	2300      	movs	r3, #0
 80091a6:	930d      	str	r3, [sp, #52]	; 0x34
 80091a8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80091aa:	782b      	ldrb	r3, [r5, #0]
 80091ac:	2b30      	cmp	r3, #48	; 0x30
 80091ae:	f040 80ac 	bne.w	800930a <_strtod_l+0x1a2>
 80091b2:	786b      	ldrb	r3, [r5, #1]
 80091b4:	2b58      	cmp	r3, #88	; 0x58
 80091b6:	d001      	beq.n	80091bc <_strtod_l+0x54>
 80091b8:	2b78      	cmp	r3, #120	; 0x78
 80091ba:	d167      	bne.n	800928c <_strtod_l+0x124>
 80091bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091be:	9301      	str	r3, [sp, #4]
 80091c0:	ab1c      	add	r3, sp, #112	; 0x70
 80091c2:	9300      	str	r3, [sp, #0]
 80091c4:	9702      	str	r7, [sp, #8]
 80091c6:	ab1d      	add	r3, sp, #116	; 0x74
 80091c8:	4a88      	ldr	r2, [pc, #544]	; (80093ec <_strtod_l+0x284>)
 80091ca:	a91b      	add	r1, sp, #108	; 0x6c
 80091cc:	4648      	mov	r0, r9
 80091ce:	f001 fd1a 	bl	800ac06 <__gethex>
 80091d2:	f010 0407 	ands.w	r4, r0, #7
 80091d6:	4606      	mov	r6, r0
 80091d8:	d005      	beq.n	80091e6 <_strtod_l+0x7e>
 80091da:	2c06      	cmp	r4, #6
 80091dc:	d12b      	bne.n	8009236 <_strtod_l+0xce>
 80091de:	3501      	adds	r5, #1
 80091e0:	2300      	movs	r3, #0
 80091e2:	951b      	str	r5, [sp, #108]	; 0x6c
 80091e4:	930d      	str	r3, [sp, #52]	; 0x34
 80091e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f040 859a 	bne.w	8009d22 <_strtod_l+0xbba>
 80091ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091f0:	b1e3      	cbz	r3, 800922c <_strtod_l+0xc4>
 80091f2:	4652      	mov	r2, sl
 80091f4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80091f8:	ec43 2b10 	vmov	d0, r2, r3
 80091fc:	b021      	add	sp, #132	; 0x84
 80091fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009202:	2a2b      	cmp	r2, #43	; 0x2b
 8009204:	d015      	beq.n	8009232 <_strtod_l+0xca>
 8009206:	2a2d      	cmp	r2, #45	; 0x2d
 8009208:	d004      	beq.n	8009214 <_strtod_l+0xac>
 800920a:	2a20      	cmp	r2, #32
 800920c:	d1ca      	bne.n	80091a4 <_strtod_l+0x3c>
 800920e:	3301      	adds	r3, #1
 8009210:	931b      	str	r3, [sp, #108]	; 0x6c
 8009212:	e7bf      	b.n	8009194 <_strtod_l+0x2c>
 8009214:	2201      	movs	r2, #1
 8009216:	920d      	str	r2, [sp, #52]	; 0x34
 8009218:	1c5a      	adds	r2, r3, #1
 800921a:	921b      	str	r2, [sp, #108]	; 0x6c
 800921c:	785b      	ldrb	r3, [r3, #1]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1c2      	bne.n	80091a8 <_strtod_l+0x40>
 8009222:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009224:	961b      	str	r6, [sp, #108]	; 0x6c
 8009226:	2b00      	cmp	r3, #0
 8009228:	f040 8579 	bne.w	8009d1e <_strtod_l+0xbb6>
 800922c:	4652      	mov	r2, sl
 800922e:	465b      	mov	r3, fp
 8009230:	e7e2      	b.n	80091f8 <_strtod_l+0x90>
 8009232:	2200      	movs	r2, #0
 8009234:	e7ef      	b.n	8009216 <_strtod_l+0xae>
 8009236:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009238:	b13a      	cbz	r2, 800924a <_strtod_l+0xe2>
 800923a:	2135      	movs	r1, #53	; 0x35
 800923c:	a81e      	add	r0, sp, #120	; 0x78
 800923e:	f002 fbb5 	bl	800b9ac <__copybits>
 8009242:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009244:	4648      	mov	r0, r9
 8009246:	f002 f822 	bl	800b28e <_Bfree>
 800924a:	3c01      	subs	r4, #1
 800924c:	2c04      	cmp	r4, #4
 800924e:	d806      	bhi.n	800925e <_strtod_l+0xf6>
 8009250:	e8df f004 	tbb	[pc, r4]
 8009254:	1714030a 	.word	0x1714030a
 8009258:	0a          	.byte	0x0a
 8009259:	00          	.byte	0x00
 800925a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800925e:	0730      	lsls	r0, r6, #28
 8009260:	d5c1      	bpl.n	80091e6 <_strtod_l+0x7e>
 8009262:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009266:	e7be      	b.n	80091e6 <_strtod_l+0x7e>
 8009268:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800926c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800926e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009272:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009276:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800927a:	e7f0      	b.n	800925e <_strtod_l+0xf6>
 800927c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80093f0 <_strtod_l+0x288>
 8009280:	e7ed      	b.n	800925e <_strtod_l+0xf6>
 8009282:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009286:	f04f 3aff 	mov.w	sl, #4294967295
 800928a:	e7e8      	b.n	800925e <_strtod_l+0xf6>
 800928c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800928e:	1c5a      	adds	r2, r3, #1
 8009290:	921b      	str	r2, [sp, #108]	; 0x6c
 8009292:	785b      	ldrb	r3, [r3, #1]
 8009294:	2b30      	cmp	r3, #48	; 0x30
 8009296:	d0f9      	beq.n	800928c <_strtod_l+0x124>
 8009298:	2b00      	cmp	r3, #0
 800929a:	d0a4      	beq.n	80091e6 <_strtod_l+0x7e>
 800929c:	2301      	movs	r3, #1
 800929e:	2500      	movs	r5, #0
 80092a0:	9306      	str	r3, [sp, #24]
 80092a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80092a4:	9308      	str	r3, [sp, #32]
 80092a6:	9507      	str	r5, [sp, #28]
 80092a8:	9505      	str	r5, [sp, #20]
 80092aa:	220a      	movs	r2, #10
 80092ac:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80092ae:	7807      	ldrb	r7, [r0, #0]
 80092b0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80092b4:	b2d9      	uxtb	r1, r3
 80092b6:	2909      	cmp	r1, #9
 80092b8:	d929      	bls.n	800930e <_strtod_l+0x1a6>
 80092ba:	4622      	mov	r2, r4
 80092bc:	f8d8 1000 	ldr.w	r1, [r8]
 80092c0:	f7ff ff23 	bl	800910a <strncmp>
 80092c4:	2800      	cmp	r0, #0
 80092c6:	d031      	beq.n	800932c <_strtod_l+0x1c4>
 80092c8:	2000      	movs	r0, #0
 80092ca:	9c05      	ldr	r4, [sp, #20]
 80092cc:	9004      	str	r0, [sp, #16]
 80092ce:	463b      	mov	r3, r7
 80092d0:	4602      	mov	r2, r0
 80092d2:	2b65      	cmp	r3, #101	; 0x65
 80092d4:	d001      	beq.n	80092da <_strtod_l+0x172>
 80092d6:	2b45      	cmp	r3, #69	; 0x45
 80092d8:	d114      	bne.n	8009304 <_strtod_l+0x19c>
 80092da:	b924      	cbnz	r4, 80092e6 <_strtod_l+0x17e>
 80092dc:	b910      	cbnz	r0, 80092e4 <_strtod_l+0x17c>
 80092de:	9b06      	ldr	r3, [sp, #24]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d09e      	beq.n	8009222 <_strtod_l+0xba>
 80092e4:	2400      	movs	r4, #0
 80092e6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80092e8:	1c73      	adds	r3, r6, #1
 80092ea:	931b      	str	r3, [sp, #108]	; 0x6c
 80092ec:	7873      	ldrb	r3, [r6, #1]
 80092ee:	2b2b      	cmp	r3, #43	; 0x2b
 80092f0:	d078      	beq.n	80093e4 <_strtod_l+0x27c>
 80092f2:	2b2d      	cmp	r3, #45	; 0x2d
 80092f4:	d070      	beq.n	80093d8 <_strtod_l+0x270>
 80092f6:	f04f 0c00 	mov.w	ip, #0
 80092fa:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80092fe:	2f09      	cmp	r7, #9
 8009300:	d97c      	bls.n	80093fc <_strtod_l+0x294>
 8009302:	961b      	str	r6, [sp, #108]	; 0x6c
 8009304:	f04f 0e00 	mov.w	lr, #0
 8009308:	e09a      	b.n	8009440 <_strtod_l+0x2d8>
 800930a:	2300      	movs	r3, #0
 800930c:	e7c7      	b.n	800929e <_strtod_l+0x136>
 800930e:	9905      	ldr	r1, [sp, #20]
 8009310:	2908      	cmp	r1, #8
 8009312:	bfdd      	ittte	le
 8009314:	9907      	ldrle	r1, [sp, #28]
 8009316:	fb02 3301 	mlale	r3, r2, r1, r3
 800931a:	9307      	strle	r3, [sp, #28]
 800931c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8009320:	9b05      	ldr	r3, [sp, #20]
 8009322:	3001      	adds	r0, #1
 8009324:	3301      	adds	r3, #1
 8009326:	9305      	str	r3, [sp, #20]
 8009328:	901b      	str	r0, [sp, #108]	; 0x6c
 800932a:	e7bf      	b.n	80092ac <_strtod_l+0x144>
 800932c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800932e:	191a      	adds	r2, r3, r4
 8009330:	921b      	str	r2, [sp, #108]	; 0x6c
 8009332:	9a05      	ldr	r2, [sp, #20]
 8009334:	5d1b      	ldrb	r3, [r3, r4]
 8009336:	2a00      	cmp	r2, #0
 8009338:	d037      	beq.n	80093aa <_strtod_l+0x242>
 800933a:	9c05      	ldr	r4, [sp, #20]
 800933c:	4602      	mov	r2, r0
 800933e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009342:	2909      	cmp	r1, #9
 8009344:	d913      	bls.n	800936e <_strtod_l+0x206>
 8009346:	2101      	movs	r1, #1
 8009348:	9104      	str	r1, [sp, #16]
 800934a:	e7c2      	b.n	80092d2 <_strtod_l+0x16a>
 800934c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800934e:	1c5a      	adds	r2, r3, #1
 8009350:	921b      	str	r2, [sp, #108]	; 0x6c
 8009352:	785b      	ldrb	r3, [r3, #1]
 8009354:	3001      	adds	r0, #1
 8009356:	2b30      	cmp	r3, #48	; 0x30
 8009358:	d0f8      	beq.n	800934c <_strtod_l+0x1e4>
 800935a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800935e:	2a08      	cmp	r2, #8
 8009360:	f200 84e4 	bhi.w	8009d2c <_strtod_l+0xbc4>
 8009364:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009366:	9208      	str	r2, [sp, #32]
 8009368:	4602      	mov	r2, r0
 800936a:	2000      	movs	r0, #0
 800936c:	4604      	mov	r4, r0
 800936e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8009372:	f100 0101 	add.w	r1, r0, #1
 8009376:	d012      	beq.n	800939e <_strtod_l+0x236>
 8009378:	440a      	add	r2, r1
 800937a:	eb00 0c04 	add.w	ip, r0, r4
 800937e:	4621      	mov	r1, r4
 8009380:	270a      	movs	r7, #10
 8009382:	458c      	cmp	ip, r1
 8009384:	d113      	bne.n	80093ae <_strtod_l+0x246>
 8009386:	1821      	adds	r1, r4, r0
 8009388:	2908      	cmp	r1, #8
 800938a:	f104 0401 	add.w	r4, r4, #1
 800938e:	4404      	add	r4, r0
 8009390:	dc19      	bgt.n	80093c6 <_strtod_l+0x25e>
 8009392:	9b07      	ldr	r3, [sp, #28]
 8009394:	210a      	movs	r1, #10
 8009396:	fb01 e303 	mla	r3, r1, r3, lr
 800939a:	9307      	str	r3, [sp, #28]
 800939c:	2100      	movs	r1, #0
 800939e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80093a0:	1c58      	adds	r0, r3, #1
 80093a2:	901b      	str	r0, [sp, #108]	; 0x6c
 80093a4:	785b      	ldrb	r3, [r3, #1]
 80093a6:	4608      	mov	r0, r1
 80093a8:	e7c9      	b.n	800933e <_strtod_l+0x1d6>
 80093aa:	9805      	ldr	r0, [sp, #20]
 80093ac:	e7d3      	b.n	8009356 <_strtod_l+0x1ee>
 80093ae:	2908      	cmp	r1, #8
 80093b0:	f101 0101 	add.w	r1, r1, #1
 80093b4:	dc03      	bgt.n	80093be <_strtod_l+0x256>
 80093b6:	9b07      	ldr	r3, [sp, #28]
 80093b8:	437b      	muls	r3, r7
 80093ba:	9307      	str	r3, [sp, #28]
 80093bc:	e7e1      	b.n	8009382 <_strtod_l+0x21a>
 80093be:	2910      	cmp	r1, #16
 80093c0:	bfd8      	it	le
 80093c2:	437d      	mulle	r5, r7
 80093c4:	e7dd      	b.n	8009382 <_strtod_l+0x21a>
 80093c6:	2c10      	cmp	r4, #16
 80093c8:	bfdc      	itt	le
 80093ca:	210a      	movle	r1, #10
 80093cc:	fb01 e505 	mlale	r5, r1, r5, lr
 80093d0:	e7e4      	b.n	800939c <_strtod_l+0x234>
 80093d2:	2301      	movs	r3, #1
 80093d4:	9304      	str	r3, [sp, #16]
 80093d6:	e781      	b.n	80092dc <_strtod_l+0x174>
 80093d8:	f04f 0c01 	mov.w	ip, #1
 80093dc:	1cb3      	adds	r3, r6, #2
 80093de:	931b      	str	r3, [sp, #108]	; 0x6c
 80093e0:	78b3      	ldrb	r3, [r6, #2]
 80093e2:	e78a      	b.n	80092fa <_strtod_l+0x192>
 80093e4:	f04f 0c00 	mov.w	ip, #0
 80093e8:	e7f8      	b.n	80093dc <_strtod_l+0x274>
 80093ea:	bf00      	nop
 80093ec:	0800c5c4 	.word	0x0800c5c4
 80093f0:	7ff00000 	.word	0x7ff00000
 80093f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80093f6:	1c5f      	adds	r7, r3, #1
 80093f8:	971b      	str	r7, [sp, #108]	; 0x6c
 80093fa:	785b      	ldrb	r3, [r3, #1]
 80093fc:	2b30      	cmp	r3, #48	; 0x30
 80093fe:	d0f9      	beq.n	80093f4 <_strtod_l+0x28c>
 8009400:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8009404:	2f08      	cmp	r7, #8
 8009406:	f63f af7d 	bhi.w	8009304 <_strtod_l+0x19c>
 800940a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800940e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009410:	930a      	str	r3, [sp, #40]	; 0x28
 8009412:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009414:	1c5f      	adds	r7, r3, #1
 8009416:	971b      	str	r7, [sp, #108]	; 0x6c
 8009418:	785b      	ldrb	r3, [r3, #1]
 800941a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800941e:	f1b8 0f09 	cmp.w	r8, #9
 8009422:	d937      	bls.n	8009494 <_strtod_l+0x32c>
 8009424:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009426:	1a7f      	subs	r7, r7, r1
 8009428:	2f08      	cmp	r7, #8
 800942a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800942e:	dc37      	bgt.n	80094a0 <_strtod_l+0x338>
 8009430:	45be      	cmp	lr, r7
 8009432:	bfa8      	it	ge
 8009434:	46be      	movge	lr, r7
 8009436:	f1bc 0f00 	cmp.w	ip, #0
 800943a:	d001      	beq.n	8009440 <_strtod_l+0x2d8>
 800943c:	f1ce 0e00 	rsb	lr, lr, #0
 8009440:	2c00      	cmp	r4, #0
 8009442:	d151      	bne.n	80094e8 <_strtod_l+0x380>
 8009444:	2800      	cmp	r0, #0
 8009446:	f47f aece 	bne.w	80091e6 <_strtod_l+0x7e>
 800944a:	9a06      	ldr	r2, [sp, #24]
 800944c:	2a00      	cmp	r2, #0
 800944e:	f47f aeca 	bne.w	80091e6 <_strtod_l+0x7e>
 8009452:	9a04      	ldr	r2, [sp, #16]
 8009454:	2a00      	cmp	r2, #0
 8009456:	f47f aee4 	bne.w	8009222 <_strtod_l+0xba>
 800945a:	2b4e      	cmp	r3, #78	; 0x4e
 800945c:	d027      	beq.n	80094ae <_strtod_l+0x346>
 800945e:	dc21      	bgt.n	80094a4 <_strtod_l+0x33c>
 8009460:	2b49      	cmp	r3, #73	; 0x49
 8009462:	f47f aede 	bne.w	8009222 <_strtod_l+0xba>
 8009466:	49a0      	ldr	r1, [pc, #640]	; (80096e8 <_strtod_l+0x580>)
 8009468:	a81b      	add	r0, sp, #108	; 0x6c
 800946a:	f001 fdff 	bl	800b06c <__match>
 800946e:	2800      	cmp	r0, #0
 8009470:	f43f aed7 	beq.w	8009222 <_strtod_l+0xba>
 8009474:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009476:	499d      	ldr	r1, [pc, #628]	; (80096ec <_strtod_l+0x584>)
 8009478:	3b01      	subs	r3, #1
 800947a:	a81b      	add	r0, sp, #108	; 0x6c
 800947c:	931b      	str	r3, [sp, #108]	; 0x6c
 800947e:	f001 fdf5 	bl	800b06c <__match>
 8009482:	b910      	cbnz	r0, 800948a <_strtod_l+0x322>
 8009484:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009486:	3301      	adds	r3, #1
 8009488:	931b      	str	r3, [sp, #108]	; 0x6c
 800948a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8009700 <_strtod_l+0x598>
 800948e:	f04f 0a00 	mov.w	sl, #0
 8009492:	e6a8      	b.n	80091e6 <_strtod_l+0x7e>
 8009494:	210a      	movs	r1, #10
 8009496:	fb01 3e0e 	mla	lr, r1, lr, r3
 800949a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800949e:	e7b8      	b.n	8009412 <_strtod_l+0x2aa>
 80094a0:	46be      	mov	lr, r7
 80094a2:	e7c8      	b.n	8009436 <_strtod_l+0x2ce>
 80094a4:	2b69      	cmp	r3, #105	; 0x69
 80094a6:	d0de      	beq.n	8009466 <_strtod_l+0x2fe>
 80094a8:	2b6e      	cmp	r3, #110	; 0x6e
 80094aa:	f47f aeba 	bne.w	8009222 <_strtod_l+0xba>
 80094ae:	4990      	ldr	r1, [pc, #576]	; (80096f0 <_strtod_l+0x588>)
 80094b0:	a81b      	add	r0, sp, #108	; 0x6c
 80094b2:	f001 fddb 	bl	800b06c <__match>
 80094b6:	2800      	cmp	r0, #0
 80094b8:	f43f aeb3 	beq.w	8009222 <_strtod_l+0xba>
 80094bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	2b28      	cmp	r3, #40	; 0x28
 80094c2:	d10e      	bne.n	80094e2 <_strtod_l+0x37a>
 80094c4:	aa1e      	add	r2, sp, #120	; 0x78
 80094c6:	498b      	ldr	r1, [pc, #556]	; (80096f4 <_strtod_l+0x58c>)
 80094c8:	a81b      	add	r0, sp, #108	; 0x6c
 80094ca:	f001 fde3 	bl	800b094 <__hexnan>
 80094ce:	2805      	cmp	r0, #5
 80094d0:	d107      	bne.n	80094e2 <_strtod_l+0x37a>
 80094d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80094d4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80094d8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80094dc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80094e0:	e681      	b.n	80091e6 <_strtod_l+0x7e>
 80094e2:	f8df b224 	ldr.w	fp, [pc, #548]	; 8009708 <_strtod_l+0x5a0>
 80094e6:	e7d2      	b.n	800948e <_strtod_l+0x326>
 80094e8:	ebae 0302 	sub.w	r3, lr, r2
 80094ec:	9306      	str	r3, [sp, #24]
 80094ee:	9b05      	ldr	r3, [sp, #20]
 80094f0:	9807      	ldr	r0, [sp, #28]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	bf08      	it	eq
 80094f6:	4623      	moveq	r3, r4
 80094f8:	2c10      	cmp	r4, #16
 80094fa:	9305      	str	r3, [sp, #20]
 80094fc:	46a0      	mov	r8, r4
 80094fe:	bfa8      	it	ge
 8009500:	f04f 0810 	movge.w	r8, #16
 8009504:	f7f6 fffe 	bl	8000504 <__aeabi_ui2d>
 8009508:	2c09      	cmp	r4, #9
 800950a:	4682      	mov	sl, r0
 800950c:	468b      	mov	fp, r1
 800950e:	dc13      	bgt.n	8009538 <_strtod_l+0x3d0>
 8009510:	9b06      	ldr	r3, [sp, #24]
 8009512:	2b00      	cmp	r3, #0
 8009514:	f43f ae67 	beq.w	80091e6 <_strtod_l+0x7e>
 8009518:	9b06      	ldr	r3, [sp, #24]
 800951a:	dd7a      	ble.n	8009612 <_strtod_l+0x4aa>
 800951c:	2b16      	cmp	r3, #22
 800951e:	dc61      	bgt.n	80095e4 <_strtod_l+0x47c>
 8009520:	4a75      	ldr	r2, [pc, #468]	; (80096f8 <_strtod_l+0x590>)
 8009522:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8009526:	e9de 0100 	ldrd	r0, r1, [lr]
 800952a:	4652      	mov	r2, sl
 800952c:	465b      	mov	r3, fp
 800952e:	f7f7 f863 	bl	80005f8 <__aeabi_dmul>
 8009532:	4682      	mov	sl, r0
 8009534:	468b      	mov	fp, r1
 8009536:	e656      	b.n	80091e6 <_strtod_l+0x7e>
 8009538:	4b6f      	ldr	r3, [pc, #444]	; (80096f8 <_strtod_l+0x590>)
 800953a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800953e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009542:	f7f7 f859 	bl	80005f8 <__aeabi_dmul>
 8009546:	4606      	mov	r6, r0
 8009548:	4628      	mov	r0, r5
 800954a:	460f      	mov	r7, r1
 800954c:	f7f6 ffda 	bl	8000504 <__aeabi_ui2d>
 8009550:	4602      	mov	r2, r0
 8009552:	460b      	mov	r3, r1
 8009554:	4630      	mov	r0, r6
 8009556:	4639      	mov	r1, r7
 8009558:	f7f6 fe98 	bl	800028c <__adddf3>
 800955c:	2c0f      	cmp	r4, #15
 800955e:	4682      	mov	sl, r0
 8009560:	468b      	mov	fp, r1
 8009562:	ddd5      	ble.n	8009510 <_strtod_l+0x3a8>
 8009564:	9b06      	ldr	r3, [sp, #24]
 8009566:	eba4 0808 	sub.w	r8, r4, r8
 800956a:	4498      	add	r8, r3
 800956c:	f1b8 0f00 	cmp.w	r8, #0
 8009570:	f340 8096 	ble.w	80096a0 <_strtod_l+0x538>
 8009574:	f018 030f 	ands.w	r3, r8, #15
 8009578:	d00a      	beq.n	8009590 <_strtod_l+0x428>
 800957a:	495f      	ldr	r1, [pc, #380]	; (80096f8 <_strtod_l+0x590>)
 800957c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009580:	4652      	mov	r2, sl
 8009582:	465b      	mov	r3, fp
 8009584:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009588:	f7f7 f836 	bl	80005f8 <__aeabi_dmul>
 800958c:	4682      	mov	sl, r0
 800958e:	468b      	mov	fp, r1
 8009590:	f038 080f 	bics.w	r8, r8, #15
 8009594:	d073      	beq.n	800967e <_strtod_l+0x516>
 8009596:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800959a:	dd47      	ble.n	800962c <_strtod_l+0x4c4>
 800959c:	2400      	movs	r4, #0
 800959e:	46a0      	mov	r8, r4
 80095a0:	9407      	str	r4, [sp, #28]
 80095a2:	9405      	str	r4, [sp, #20]
 80095a4:	2322      	movs	r3, #34	; 0x22
 80095a6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8009700 <_strtod_l+0x598>
 80095aa:	f8c9 3000 	str.w	r3, [r9]
 80095ae:	f04f 0a00 	mov.w	sl, #0
 80095b2:	9b07      	ldr	r3, [sp, #28]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	f43f ae16 	beq.w	80091e6 <_strtod_l+0x7e>
 80095ba:	991c      	ldr	r1, [sp, #112]	; 0x70
 80095bc:	4648      	mov	r0, r9
 80095be:	f001 fe66 	bl	800b28e <_Bfree>
 80095c2:	9905      	ldr	r1, [sp, #20]
 80095c4:	4648      	mov	r0, r9
 80095c6:	f001 fe62 	bl	800b28e <_Bfree>
 80095ca:	4641      	mov	r1, r8
 80095cc:	4648      	mov	r0, r9
 80095ce:	f001 fe5e 	bl	800b28e <_Bfree>
 80095d2:	9907      	ldr	r1, [sp, #28]
 80095d4:	4648      	mov	r0, r9
 80095d6:	f001 fe5a 	bl	800b28e <_Bfree>
 80095da:	4621      	mov	r1, r4
 80095dc:	4648      	mov	r0, r9
 80095de:	f001 fe56 	bl	800b28e <_Bfree>
 80095e2:	e600      	b.n	80091e6 <_strtod_l+0x7e>
 80095e4:	9a06      	ldr	r2, [sp, #24]
 80095e6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80095ea:	4293      	cmp	r3, r2
 80095ec:	dbba      	blt.n	8009564 <_strtod_l+0x3fc>
 80095ee:	4d42      	ldr	r5, [pc, #264]	; (80096f8 <_strtod_l+0x590>)
 80095f0:	f1c4 040f 	rsb	r4, r4, #15
 80095f4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80095f8:	4652      	mov	r2, sl
 80095fa:	465b      	mov	r3, fp
 80095fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009600:	f7f6 fffa 	bl	80005f8 <__aeabi_dmul>
 8009604:	9b06      	ldr	r3, [sp, #24]
 8009606:	1b1c      	subs	r4, r3, r4
 8009608:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800960c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009610:	e78d      	b.n	800952e <_strtod_l+0x3c6>
 8009612:	f113 0f16 	cmn.w	r3, #22
 8009616:	dba5      	blt.n	8009564 <_strtod_l+0x3fc>
 8009618:	4a37      	ldr	r2, [pc, #220]	; (80096f8 <_strtod_l+0x590>)
 800961a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800961e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8009622:	4650      	mov	r0, sl
 8009624:	4659      	mov	r1, fp
 8009626:	f7f7 f911 	bl	800084c <__aeabi_ddiv>
 800962a:	e782      	b.n	8009532 <_strtod_l+0x3ca>
 800962c:	2300      	movs	r3, #0
 800962e:	4e33      	ldr	r6, [pc, #204]	; (80096fc <_strtod_l+0x594>)
 8009630:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009634:	4650      	mov	r0, sl
 8009636:	4659      	mov	r1, fp
 8009638:	461d      	mov	r5, r3
 800963a:	f1b8 0f01 	cmp.w	r8, #1
 800963e:	dc21      	bgt.n	8009684 <_strtod_l+0x51c>
 8009640:	b10b      	cbz	r3, 8009646 <_strtod_l+0x4de>
 8009642:	4682      	mov	sl, r0
 8009644:	468b      	mov	fp, r1
 8009646:	4b2d      	ldr	r3, [pc, #180]	; (80096fc <_strtod_l+0x594>)
 8009648:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800964c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009650:	4652      	mov	r2, sl
 8009652:	465b      	mov	r3, fp
 8009654:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009658:	f7f6 ffce 	bl	80005f8 <__aeabi_dmul>
 800965c:	4b28      	ldr	r3, [pc, #160]	; (8009700 <_strtod_l+0x598>)
 800965e:	460a      	mov	r2, r1
 8009660:	400b      	ands	r3, r1
 8009662:	4928      	ldr	r1, [pc, #160]	; (8009704 <_strtod_l+0x59c>)
 8009664:	428b      	cmp	r3, r1
 8009666:	4682      	mov	sl, r0
 8009668:	d898      	bhi.n	800959c <_strtod_l+0x434>
 800966a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800966e:	428b      	cmp	r3, r1
 8009670:	bf86      	itte	hi
 8009672:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800970c <_strtod_l+0x5a4>
 8009676:	f04f 3aff 	movhi.w	sl, #4294967295
 800967a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800967e:	2300      	movs	r3, #0
 8009680:	9304      	str	r3, [sp, #16]
 8009682:	e077      	b.n	8009774 <_strtod_l+0x60c>
 8009684:	f018 0f01 	tst.w	r8, #1
 8009688:	d006      	beq.n	8009698 <_strtod_l+0x530>
 800968a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800968e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009692:	f7f6 ffb1 	bl	80005f8 <__aeabi_dmul>
 8009696:	2301      	movs	r3, #1
 8009698:	3501      	adds	r5, #1
 800969a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800969e:	e7cc      	b.n	800963a <_strtod_l+0x4d2>
 80096a0:	d0ed      	beq.n	800967e <_strtod_l+0x516>
 80096a2:	f1c8 0800 	rsb	r8, r8, #0
 80096a6:	f018 020f 	ands.w	r2, r8, #15
 80096aa:	d00a      	beq.n	80096c2 <_strtod_l+0x55a>
 80096ac:	4b12      	ldr	r3, [pc, #72]	; (80096f8 <_strtod_l+0x590>)
 80096ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096b2:	4650      	mov	r0, sl
 80096b4:	4659      	mov	r1, fp
 80096b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ba:	f7f7 f8c7 	bl	800084c <__aeabi_ddiv>
 80096be:	4682      	mov	sl, r0
 80096c0:	468b      	mov	fp, r1
 80096c2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80096c6:	d0da      	beq.n	800967e <_strtod_l+0x516>
 80096c8:	f1b8 0f1f 	cmp.w	r8, #31
 80096cc:	dd20      	ble.n	8009710 <_strtod_l+0x5a8>
 80096ce:	2400      	movs	r4, #0
 80096d0:	46a0      	mov	r8, r4
 80096d2:	9407      	str	r4, [sp, #28]
 80096d4:	9405      	str	r4, [sp, #20]
 80096d6:	2322      	movs	r3, #34	; 0x22
 80096d8:	f04f 0a00 	mov.w	sl, #0
 80096dc:	f04f 0b00 	mov.w	fp, #0
 80096e0:	f8c9 3000 	str.w	r3, [r9]
 80096e4:	e765      	b.n	80095b2 <_strtod_l+0x44a>
 80096e6:	bf00      	nop
 80096e8:	0800c58d 	.word	0x0800c58d
 80096ec:	0800c61b 	.word	0x0800c61b
 80096f0:	0800c595 	.word	0x0800c595
 80096f4:	0800c5d8 	.word	0x0800c5d8
 80096f8:	0800c658 	.word	0x0800c658
 80096fc:	0800c630 	.word	0x0800c630
 8009700:	7ff00000 	.word	0x7ff00000
 8009704:	7ca00000 	.word	0x7ca00000
 8009708:	fff80000 	.word	0xfff80000
 800970c:	7fefffff 	.word	0x7fefffff
 8009710:	f018 0310 	ands.w	r3, r8, #16
 8009714:	bf18      	it	ne
 8009716:	236a      	movne	r3, #106	; 0x6a
 8009718:	4da0      	ldr	r5, [pc, #640]	; (800999c <_strtod_l+0x834>)
 800971a:	9304      	str	r3, [sp, #16]
 800971c:	4650      	mov	r0, sl
 800971e:	4659      	mov	r1, fp
 8009720:	2300      	movs	r3, #0
 8009722:	f1b8 0f00 	cmp.w	r8, #0
 8009726:	f300 810a 	bgt.w	800993e <_strtod_l+0x7d6>
 800972a:	b10b      	cbz	r3, 8009730 <_strtod_l+0x5c8>
 800972c:	4682      	mov	sl, r0
 800972e:	468b      	mov	fp, r1
 8009730:	9b04      	ldr	r3, [sp, #16]
 8009732:	b1bb      	cbz	r3, 8009764 <_strtod_l+0x5fc>
 8009734:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8009738:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800973c:	2b00      	cmp	r3, #0
 800973e:	4659      	mov	r1, fp
 8009740:	dd10      	ble.n	8009764 <_strtod_l+0x5fc>
 8009742:	2b1f      	cmp	r3, #31
 8009744:	f340 8107 	ble.w	8009956 <_strtod_l+0x7ee>
 8009748:	2b34      	cmp	r3, #52	; 0x34
 800974a:	bfde      	ittt	le
 800974c:	3b20      	suble	r3, #32
 800974e:	f04f 32ff 	movle.w	r2, #4294967295
 8009752:	fa02 f303 	lslle.w	r3, r2, r3
 8009756:	f04f 0a00 	mov.w	sl, #0
 800975a:	bfcc      	ite	gt
 800975c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009760:	ea03 0b01 	andle.w	fp, r3, r1
 8009764:	2200      	movs	r2, #0
 8009766:	2300      	movs	r3, #0
 8009768:	4650      	mov	r0, sl
 800976a:	4659      	mov	r1, fp
 800976c:	f7f7 f9ac 	bl	8000ac8 <__aeabi_dcmpeq>
 8009770:	2800      	cmp	r0, #0
 8009772:	d1ac      	bne.n	80096ce <_strtod_l+0x566>
 8009774:	9b07      	ldr	r3, [sp, #28]
 8009776:	9300      	str	r3, [sp, #0]
 8009778:	9a05      	ldr	r2, [sp, #20]
 800977a:	9908      	ldr	r1, [sp, #32]
 800977c:	4623      	mov	r3, r4
 800977e:	4648      	mov	r0, r9
 8009780:	f001 fdd7 	bl	800b332 <__s2b>
 8009784:	9007      	str	r0, [sp, #28]
 8009786:	2800      	cmp	r0, #0
 8009788:	f43f af08 	beq.w	800959c <_strtod_l+0x434>
 800978c:	9a06      	ldr	r2, [sp, #24]
 800978e:	9b06      	ldr	r3, [sp, #24]
 8009790:	2a00      	cmp	r2, #0
 8009792:	f1c3 0300 	rsb	r3, r3, #0
 8009796:	bfa8      	it	ge
 8009798:	2300      	movge	r3, #0
 800979a:	930e      	str	r3, [sp, #56]	; 0x38
 800979c:	2400      	movs	r4, #0
 800979e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80097a2:	9316      	str	r3, [sp, #88]	; 0x58
 80097a4:	46a0      	mov	r8, r4
 80097a6:	9b07      	ldr	r3, [sp, #28]
 80097a8:	4648      	mov	r0, r9
 80097aa:	6859      	ldr	r1, [r3, #4]
 80097ac:	f001 fd3b 	bl	800b226 <_Balloc>
 80097b0:	9005      	str	r0, [sp, #20]
 80097b2:	2800      	cmp	r0, #0
 80097b4:	f43f aef6 	beq.w	80095a4 <_strtod_l+0x43c>
 80097b8:	9b07      	ldr	r3, [sp, #28]
 80097ba:	691a      	ldr	r2, [r3, #16]
 80097bc:	3202      	adds	r2, #2
 80097be:	f103 010c 	add.w	r1, r3, #12
 80097c2:	0092      	lsls	r2, r2, #2
 80097c4:	300c      	adds	r0, #12
 80097c6:	f001 fd23 	bl	800b210 <memcpy>
 80097ca:	aa1e      	add	r2, sp, #120	; 0x78
 80097cc:	a91d      	add	r1, sp, #116	; 0x74
 80097ce:	ec4b ab10 	vmov	d0, sl, fp
 80097d2:	4648      	mov	r0, r9
 80097d4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80097d8:	f002 f866 	bl	800b8a8 <__d2b>
 80097dc:	901c      	str	r0, [sp, #112]	; 0x70
 80097de:	2800      	cmp	r0, #0
 80097e0:	f43f aee0 	beq.w	80095a4 <_strtod_l+0x43c>
 80097e4:	2101      	movs	r1, #1
 80097e6:	4648      	mov	r0, r9
 80097e8:	f001 fe2f 	bl	800b44a <__i2b>
 80097ec:	4680      	mov	r8, r0
 80097ee:	2800      	cmp	r0, #0
 80097f0:	f43f aed8 	beq.w	80095a4 <_strtod_l+0x43c>
 80097f4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80097f6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80097f8:	2e00      	cmp	r6, #0
 80097fa:	bfab      	itete	ge
 80097fc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80097fe:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009800:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8009802:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8009804:	bfac      	ite	ge
 8009806:	18f7      	addge	r7, r6, r3
 8009808:	1b9d      	sublt	r5, r3, r6
 800980a:	9b04      	ldr	r3, [sp, #16]
 800980c:	1af6      	subs	r6, r6, r3
 800980e:	4416      	add	r6, r2
 8009810:	4b63      	ldr	r3, [pc, #396]	; (80099a0 <_strtod_l+0x838>)
 8009812:	3e01      	subs	r6, #1
 8009814:	429e      	cmp	r6, r3
 8009816:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800981a:	f280 80af 	bge.w	800997c <_strtod_l+0x814>
 800981e:	1b9b      	subs	r3, r3, r6
 8009820:	2b1f      	cmp	r3, #31
 8009822:	eba2 0203 	sub.w	r2, r2, r3
 8009826:	f04f 0101 	mov.w	r1, #1
 800982a:	f300 809b 	bgt.w	8009964 <_strtod_l+0x7fc>
 800982e:	fa01 f303 	lsl.w	r3, r1, r3
 8009832:	930f      	str	r3, [sp, #60]	; 0x3c
 8009834:	2300      	movs	r3, #0
 8009836:	930a      	str	r3, [sp, #40]	; 0x28
 8009838:	18be      	adds	r6, r7, r2
 800983a:	9b04      	ldr	r3, [sp, #16]
 800983c:	42b7      	cmp	r7, r6
 800983e:	4415      	add	r5, r2
 8009840:	441d      	add	r5, r3
 8009842:	463b      	mov	r3, r7
 8009844:	bfa8      	it	ge
 8009846:	4633      	movge	r3, r6
 8009848:	42ab      	cmp	r3, r5
 800984a:	bfa8      	it	ge
 800984c:	462b      	movge	r3, r5
 800984e:	2b00      	cmp	r3, #0
 8009850:	bfc2      	ittt	gt
 8009852:	1af6      	subgt	r6, r6, r3
 8009854:	1aed      	subgt	r5, r5, r3
 8009856:	1aff      	subgt	r7, r7, r3
 8009858:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800985a:	b1bb      	cbz	r3, 800988c <_strtod_l+0x724>
 800985c:	4641      	mov	r1, r8
 800985e:	461a      	mov	r2, r3
 8009860:	4648      	mov	r0, r9
 8009862:	f001 fe91 	bl	800b588 <__pow5mult>
 8009866:	4680      	mov	r8, r0
 8009868:	2800      	cmp	r0, #0
 800986a:	f43f ae9b 	beq.w	80095a4 <_strtod_l+0x43c>
 800986e:	4601      	mov	r1, r0
 8009870:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009872:	4648      	mov	r0, r9
 8009874:	f001 fdf2 	bl	800b45c <__multiply>
 8009878:	900c      	str	r0, [sp, #48]	; 0x30
 800987a:	2800      	cmp	r0, #0
 800987c:	f43f ae92 	beq.w	80095a4 <_strtod_l+0x43c>
 8009880:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009882:	4648      	mov	r0, r9
 8009884:	f001 fd03 	bl	800b28e <_Bfree>
 8009888:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800988a:	931c      	str	r3, [sp, #112]	; 0x70
 800988c:	2e00      	cmp	r6, #0
 800988e:	dc7a      	bgt.n	8009986 <_strtod_l+0x81e>
 8009890:	9b06      	ldr	r3, [sp, #24]
 8009892:	2b00      	cmp	r3, #0
 8009894:	dd08      	ble.n	80098a8 <_strtod_l+0x740>
 8009896:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009898:	9905      	ldr	r1, [sp, #20]
 800989a:	4648      	mov	r0, r9
 800989c:	f001 fe74 	bl	800b588 <__pow5mult>
 80098a0:	9005      	str	r0, [sp, #20]
 80098a2:	2800      	cmp	r0, #0
 80098a4:	f43f ae7e 	beq.w	80095a4 <_strtod_l+0x43c>
 80098a8:	2d00      	cmp	r5, #0
 80098aa:	dd08      	ble.n	80098be <_strtod_l+0x756>
 80098ac:	462a      	mov	r2, r5
 80098ae:	9905      	ldr	r1, [sp, #20]
 80098b0:	4648      	mov	r0, r9
 80098b2:	f001 feb7 	bl	800b624 <__lshift>
 80098b6:	9005      	str	r0, [sp, #20]
 80098b8:	2800      	cmp	r0, #0
 80098ba:	f43f ae73 	beq.w	80095a4 <_strtod_l+0x43c>
 80098be:	2f00      	cmp	r7, #0
 80098c0:	dd08      	ble.n	80098d4 <_strtod_l+0x76c>
 80098c2:	4641      	mov	r1, r8
 80098c4:	463a      	mov	r2, r7
 80098c6:	4648      	mov	r0, r9
 80098c8:	f001 feac 	bl	800b624 <__lshift>
 80098cc:	4680      	mov	r8, r0
 80098ce:	2800      	cmp	r0, #0
 80098d0:	f43f ae68 	beq.w	80095a4 <_strtod_l+0x43c>
 80098d4:	9a05      	ldr	r2, [sp, #20]
 80098d6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80098d8:	4648      	mov	r0, r9
 80098da:	f001 ff11 	bl	800b700 <__mdiff>
 80098de:	4604      	mov	r4, r0
 80098e0:	2800      	cmp	r0, #0
 80098e2:	f43f ae5f 	beq.w	80095a4 <_strtod_l+0x43c>
 80098e6:	68c3      	ldr	r3, [r0, #12]
 80098e8:	930c      	str	r3, [sp, #48]	; 0x30
 80098ea:	2300      	movs	r3, #0
 80098ec:	60c3      	str	r3, [r0, #12]
 80098ee:	4641      	mov	r1, r8
 80098f0:	f001 feec 	bl	800b6cc <__mcmp>
 80098f4:	2800      	cmp	r0, #0
 80098f6:	da55      	bge.n	80099a4 <_strtod_l+0x83c>
 80098f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098fa:	b9e3      	cbnz	r3, 8009936 <_strtod_l+0x7ce>
 80098fc:	f1ba 0f00 	cmp.w	sl, #0
 8009900:	d119      	bne.n	8009936 <_strtod_l+0x7ce>
 8009902:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009906:	b9b3      	cbnz	r3, 8009936 <_strtod_l+0x7ce>
 8009908:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800990c:	0d1b      	lsrs	r3, r3, #20
 800990e:	051b      	lsls	r3, r3, #20
 8009910:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009914:	d90f      	bls.n	8009936 <_strtod_l+0x7ce>
 8009916:	6963      	ldr	r3, [r4, #20]
 8009918:	b913      	cbnz	r3, 8009920 <_strtod_l+0x7b8>
 800991a:	6923      	ldr	r3, [r4, #16]
 800991c:	2b01      	cmp	r3, #1
 800991e:	dd0a      	ble.n	8009936 <_strtod_l+0x7ce>
 8009920:	4621      	mov	r1, r4
 8009922:	2201      	movs	r2, #1
 8009924:	4648      	mov	r0, r9
 8009926:	f001 fe7d 	bl	800b624 <__lshift>
 800992a:	4641      	mov	r1, r8
 800992c:	4604      	mov	r4, r0
 800992e:	f001 fecd 	bl	800b6cc <__mcmp>
 8009932:	2800      	cmp	r0, #0
 8009934:	dc67      	bgt.n	8009a06 <_strtod_l+0x89e>
 8009936:	9b04      	ldr	r3, [sp, #16]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d171      	bne.n	8009a20 <_strtod_l+0x8b8>
 800993c:	e63d      	b.n	80095ba <_strtod_l+0x452>
 800993e:	f018 0f01 	tst.w	r8, #1
 8009942:	d004      	beq.n	800994e <_strtod_l+0x7e6>
 8009944:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009948:	f7f6 fe56 	bl	80005f8 <__aeabi_dmul>
 800994c:	2301      	movs	r3, #1
 800994e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009952:	3508      	adds	r5, #8
 8009954:	e6e5      	b.n	8009722 <_strtod_l+0x5ba>
 8009956:	f04f 32ff 	mov.w	r2, #4294967295
 800995a:	fa02 f303 	lsl.w	r3, r2, r3
 800995e:	ea03 0a0a 	and.w	sl, r3, sl
 8009962:	e6ff      	b.n	8009764 <_strtod_l+0x5fc>
 8009964:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009968:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800996c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009970:	36e2      	adds	r6, #226	; 0xe2
 8009972:	fa01 f306 	lsl.w	r3, r1, r6
 8009976:	930a      	str	r3, [sp, #40]	; 0x28
 8009978:	910f      	str	r1, [sp, #60]	; 0x3c
 800997a:	e75d      	b.n	8009838 <_strtod_l+0x6d0>
 800997c:	2300      	movs	r3, #0
 800997e:	930a      	str	r3, [sp, #40]	; 0x28
 8009980:	2301      	movs	r3, #1
 8009982:	930f      	str	r3, [sp, #60]	; 0x3c
 8009984:	e758      	b.n	8009838 <_strtod_l+0x6d0>
 8009986:	4632      	mov	r2, r6
 8009988:	991c      	ldr	r1, [sp, #112]	; 0x70
 800998a:	4648      	mov	r0, r9
 800998c:	f001 fe4a 	bl	800b624 <__lshift>
 8009990:	901c      	str	r0, [sp, #112]	; 0x70
 8009992:	2800      	cmp	r0, #0
 8009994:	f47f af7c 	bne.w	8009890 <_strtod_l+0x728>
 8009998:	e604      	b.n	80095a4 <_strtod_l+0x43c>
 800999a:	bf00      	nop
 800999c:	0800c5f0 	.word	0x0800c5f0
 80099a0:	fffffc02 	.word	0xfffffc02
 80099a4:	465d      	mov	r5, fp
 80099a6:	f040 8086 	bne.w	8009ab6 <_strtod_l+0x94e>
 80099aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80099ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80099b0:	b32a      	cbz	r2, 80099fe <_strtod_l+0x896>
 80099b2:	4aaf      	ldr	r2, [pc, #700]	; (8009c70 <_strtod_l+0xb08>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d153      	bne.n	8009a60 <_strtod_l+0x8f8>
 80099b8:	9b04      	ldr	r3, [sp, #16]
 80099ba:	4650      	mov	r0, sl
 80099bc:	b1d3      	cbz	r3, 80099f4 <_strtod_l+0x88c>
 80099be:	4aad      	ldr	r2, [pc, #692]	; (8009c74 <_strtod_l+0xb0c>)
 80099c0:	402a      	ands	r2, r5
 80099c2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80099c6:	f04f 31ff 	mov.w	r1, #4294967295
 80099ca:	d816      	bhi.n	80099fa <_strtod_l+0x892>
 80099cc:	0d12      	lsrs	r2, r2, #20
 80099ce:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80099d2:	fa01 f303 	lsl.w	r3, r1, r3
 80099d6:	4298      	cmp	r0, r3
 80099d8:	d142      	bne.n	8009a60 <_strtod_l+0x8f8>
 80099da:	4ba7      	ldr	r3, [pc, #668]	; (8009c78 <_strtod_l+0xb10>)
 80099dc:	429d      	cmp	r5, r3
 80099de:	d102      	bne.n	80099e6 <_strtod_l+0x87e>
 80099e0:	3001      	adds	r0, #1
 80099e2:	f43f addf 	beq.w	80095a4 <_strtod_l+0x43c>
 80099e6:	4ba3      	ldr	r3, [pc, #652]	; (8009c74 <_strtod_l+0xb0c>)
 80099e8:	402b      	ands	r3, r5
 80099ea:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80099ee:	f04f 0a00 	mov.w	sl, #0
 80099f2:	e7a0      	b.n	8009936 <_strtod_l+0x7ce>
 80099f4:	f04f 33ff 	mov.w	r3, #4294967295
 80099f8:	e7ed      	b.n	80099d6 <_strtod_l+0x86e>
 80099fa:	460b      	mov	r3, r1
 80099fc:	e7eb      	b.n	80099d6 <_strtod_l+0x86e>
 80099fe:	bb7b      	cbnz	r3, 8009a60 <_strtod_l+0x8f8>
 8009a00:	f1ba 0f00 	cmp.w	sl, #0
 8009a04:	d12c      	bne.n	8009a60 <_strtod_l+0x8f8>
 8009a06:	9904      	ldr	r1, [sp, #16]
 8009a08:	4a9a      	ldr	r2, [pc, #616]	; (8009c74 <_strtod_l+0xb0c>)
 8009a0a:	465b      	mov	r3, fp
 8009a0c:	b1f1      	cbz	r1, 8009a4c <_strtod_l+0x8e4>
 8009a0e:	ea02 010b 	and.w	r1, r2, fp
 8009a12:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009a16:	dc19      	bgt.n	8009a4c <_strtod_l+0x8e4>
 8009a18:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009a1c:	f77f ae5b 	ble.w	80096d6 <_strtod_l+0x56e>
 8009a20:	4a96      	ldr	r2, [pc, #600]	; (8009c7c <_strtod_l+0xb14>)
 8009a22:	2300      	movs	r3, #0
 8009a24:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8009a28:	4650      	mov	r0, sl
 8009a2a:	4659      	mov	r1, fp
 8009a2c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009a30:	f7f6 fde2 	bl	80005f8 <__aeabi_dmul>
 8009a34:	4682      	mov	sl, r0
 8009a36:	468b      	mov	fp, r1
 8009a38:	2900      	cmp	r1, #0
 8009a3a:	f47f adbe 	bne.w	80095ba <_strtod_l+0x452>
 8009a3e:	2800      	cmp	r0, #0
 8009a40:	f47f adbb 	bne.w	80095ba <_strtod_l+0x452>
 8009a44:	2322      	movs	r3, #34	; 0x22
 8009a46:	f8c9 3000 	str.w	r3, [r9]
 8009a4a:	e5b6      	b.n	80095ba <_strtod_l+0x452>
 8009a4c:	4013      	ands	r3, r2
 8009a4e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009a52:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009a56:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009a5a:	f04f 3aff 	mov.w	sl, #4294967295
 8009a5e:	e76a      	b.n	8009936 <_strtod_l+0x7ce>
 8009a60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a62:	b193      	cbz	r3, 8009a8a <_strtod_l+0x922>
 8009a64:	422b      	tst	r3, r5
 8009a66:	f43f af66 	beq.w	8009936 <_strtod_l+0x7ce>
 8009a6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a6c:	9a04      	ldr	r2, [sp, #16]
 8009a6e:	4650      	mov	r0, sl
 8009a70:	4659      	mov	r1, fp
 8009a72:	b173      	cbz	r3, 8009a92 <_strtod_l+0x92a>
 8009a74:	f7ff fb5b 	bl	800912e <sulp>
 8009a78:	4602      	mov	r2, r0
 8009a7a:	460b      	mov	r3, r1
 8009a7c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009a80:	f7f6 fc04 	bl	800028c <__adddf3>
 8009a84:	4682      	mov	sl, r0
 8009a86:	468b      	mov	fp, r1
 8009a88:	e755      	b.n	8009936 <_strtod_l+0x7ce>
 8009a8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a8c:	ea13 0f0a 	tst.w	r3, sl
 8009a90:	e7e9      	b.n	8009a66 <_strtod_l+0x8fe>
 8009a92:	f7ff fb4c 	bl	800912e <sulp>
 8009a96:	4602      	mov	r2, r0
 8009a98:	460b      	mov	r3, r1
 8009a9a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009a9e:	f7f6 fbf3 	bl	8000288 <__aeabi_dsub>
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	4682      	mov	sl, r0
 8009aa8:	468b      	mov	fp, r1
 8009aaa:	f7f7 f80d 	bl	8000ac8 <__aeabi_dcmpeq>
 8009aae:	2800      	cmp	r0, #0
 8009ab0:	f47f ae11 	bne.w	80096d6 <_strtod_l+0x56e>
 8009ab4:	e73f      	b.n	8009936 <_strtod_l+0x7ce>
 8009ab6:	4641      	mov	r1, r8
 8009ab8:	4620      	mov	r0, r4
 8009aba:	f001 ff44 	bl	800b946 <__ratio>
 8009abe:	ec57 6b10 	vmov	r6, r7, d0
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009ac8:	ee10 0a10 	vmov	r0, s0
 8009acc:	4639      	mov	r1, r7
 8009ace:	f7f7 f80f 	bl	8000af0 <__aeabi_dcmple>
 8009ad2:	2800      	cmp	r0, #0
 8009ad4:	d077      	beq.n	8009bc6 <_strtod_l+0xa5e>
 8009ad6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d04a      	beq.n	8009b72 <_strtod_l+0xa0a>
 8009adc:	4b68      	ldr	r3, [pc, #416]	; (8009c80 <_strtod_l+0xb18>)
 8009ade:	2200      	movs	r2, #0
 8009ae0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009ae4:	4f66      	ldr	r7, [pc, #408]	; (8009c80 <_strtod_l+0xb18>)
 8009ae6:	2600      	movs	r6, #0
 8009ae8:	4b62      	ldr	r3, [pc, #392]	; (8009c74 <_strtod_l+0xb0c>)
 8009aea:	402b      	ands	r3, r5
 8009aec:	930f      	str	r3, [sp, #60]	; 0x3c
 8009aee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009af0:	4b64      	ldr	r3, [pc, #400]	; (8009c84 <_strtod_l+0xb1c>)
 8009af2:	429a      	cmp	r2, r3
 8009af4:	f040 80ce 	bne.w	8009c94 <_strtod_l+0xb2c>
 8009af8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009afc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009b00:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8009b04:	ec4b ab10 	vmov	d0, sl, fp
 8009b08:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009b0c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009b10:	f001 fe54 	bl	800b7bc <__ulp>
 8009b14:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009b18:	ec53 2b10 	vmov	r2, r3, d0
 8009b1c:	f7f6 fd6c 	bl	80005f8 <__aeabi_dmul>
 8009b20:	4652      	mov	r2, sl
 8009b22:	465b      	mov	r3, fp
 8009b24:	f7f6 fbb2 	bl	800028c <__adddf3>
 8009b28:	460b      	mov	r3, r1
 8009b2a:	4952      	ldr	r1, [pc, #328]	; (8009c74 <_strtod_l+0xb0c>)
 8009b2c:	4a56      	ldr	r2, [pc, #344]	; (8009c88 <_strtod_l+0xb20>)
 8009b2e:	4019      	ands	r1, r3
 8009b30:	4291      	cmp	r1, r2
 8009b32:	4682      	mov	sl, r0
 8009b34:	d95b      	bls.n	8009bee <_strtod_l+0xa86>
 8009b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b38:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d103      	bne.n	8009b48 <_strtod_l+0x9e0>
 8009b40:	9b08      	ldr	r3, [sp, #32]
 8009b42:	3301      	adds	r3, #1
 8009b44:	f43f ad2e 	beq.w	80095a4 <_strtod_l+0x43c>
 8009b48:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8009c78 <_strtod_l+0xb10>
 8009b4c:	f04f 3aff 	mov.w	sl, #4294967295
 8009b50:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009b52:	4648      	mov	r0, r9
 8009b54:	f001 fb9b 	bl	800b28e <_Bfree>
 8009b58:	9905      	ldr	r1, [sp, #20]
 8009b5a:	4648      	mov	r0, r9
 8009b5c:	f001 fb97 	bl	800b28e <_Bfree>
 8009b60:	4641      	mov	r1, r8
 8009b62:	4648      	mov	r0, r9
 8009b64:	f001 fb93 	bl	800b28e <_Bfree>
 8009b68:	4621      	mov	r1, r4
 8009b6a:	4648      	mov	r0, r9
 8009b6c:	f001 fb8f 	bl	800b28e <_Bfree>
 8009b70:	e619      	b.n	80097a6 <_strtod_l+0x63e>
 8009b72:	f1ba 0f00 	cmp.w	sl, #0
 8009b76:	d11a      	bne.n	8009bae <_strtod_l+0xa46>
 8009b78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b7c:	b9eb      	cbnz	r3, 8009bba <_strtod_l+0xa52>
 8009b7e:	2200      	movs	r2, #0
 8009b80:	4b3f      	ldr	r3, [pc, #252]	; (8009c80 <_strtod_l+0xb18>)
 8009b82:	4630      	mov	r0, r6
 8009b84:	4639      	mov	r1, r7
 8009b86:	f7f6 ffa9 	bl	8000adc <__aeabi_dcmplt>
 8009b8a:	b9c8      	cbnz	r0, 8009bc0 <_strtod_l+0xa58>
 8009b8c:	4630      	mov	r0, r6
 8009b8e:	4639      	mov	r1, r7
 8009b90:	2200      	movs	r2, #0
 8009b92:	4b3e      	ldr	r3, [pc, #248]	; (8009c8c <_strtod_l+0xb24>)
 8009b94:	f7f6 fd30 	bl	80005f8 <__aeabi_dmul>
 8009b98:	4606      	mov	r6, r0
 8009b9a:	460f      	mov	r7, r1
 8009b9c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009ba0:	9618      	str	r6, [sp, #96]	; 0x60
 8009ba2:	9319      	str	r3, [sp, #100]	; 0x64
 8009ba4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8009ba8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009bac:	e79c      	b.n	8009ae8 <_strtod_l+0x980>
 8009bae:	f1ba 0f01 	cmp.w	sl, #1
 8009bb2:	d102      	bne.n	8009bba <_strtod_l+0xa52>
 8009bb4:	2d00      	cmp	r5, #0
 8009bb6:	f43f ad8e 	beq.w	80096d6 <_strtod_l+0x56e>
 8009bba:	2200      	movs	r2, #0
 8009bbc:	4b34      	ldr	r3, [pc, #208]	; (8009c90 <_strtod_l+0xb28>)
 8009bbe:	e78f      	b.n	8009ae0 <_strtod_l+0x978>
 8009bc0:	2600      	movs	r6, #0
 8009bc2:	4f32      	ldr	r7, [pc, #200]	; (8009c8c <_strtod_l+0xb24>)
 8009bc4:	e7ea      	b.n	8009b9c <_strtod_l+0xa34>
 8009bc6:	4b31      	ldr	r3, [pc, #196]	; (8009c8c <_strtod_l+0xb24>)
 8009bc8:	4630      	mov	r0, r6
 8009bca:	4639      	mov	r1, r7
 8009bcc:	2200      	movs	r2, #0
 8009bce:	f7f6 fd13 	bl	80005f8 <__aeabi_dmul>
 8009bd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009bd4:	4606      	mov	r6, r0
 8009bd6:	460f      	mov	r7, r1
 8009bd8:	b933      	cbnz	r3, 8009be8 <_strtod_l+0xa80>
 8009bda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009bde:	9010      	str	r0, [sp, #64]	; 0x40
 8009be0:	9311      	str	r3, [sp, #68]	; 0x44
 8009be2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009be6:	e7df      	b.n	8009ba8 <_strtod_l+0xa40>
 8009be8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8009bec:	e7f9      	b.n	8009be2 <_strtod_l+0xa7a>
 8009bee:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009bf2:	9b04      	ldr	r3, [sp, #16]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d1ab      	bne.n	8009b50 <_strtod_l+0x9e8>
 8009bf8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009bfc:	0d1b      	lsrs	r3, r3, #20
 8009bfe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009c00:	051b      	lsls	r3, r3, #20
 8009c02:	429a      	cmp	r2, r3
 8009c04:	465d      	mov	r5, fp
 8009c06:	d1a3      	bne.n	8009b50 <_strtod_l+0x9e8>
 8009c08:	4639      	mov	r1, r7
 8009c0a:	4630      	mov	r0, r6
 8009c0c:	f7f6 ffa4 	bl	8000b58 <__aeabi_d2iz>
 8009c10:	f7f6 fc88 	bl	8000524 <__aeabi_i2d>
 8009c14:	460b      	mov	r3, r1
 8009c16:	4602      	mov	r2, r0
 8009c18:	4639      	mov	r1, r7
 8009c1a:	4630      	mov	r0, r6
 8009c1c:	f7f6 fb34 	bl	8000288 <__aeabi_dsub>
 8009c20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c22:	4606      	mov	r6, r0
 8009c24:	460f      	mov	r7, r1
 8009c26:	b933      	cbnz	r3, 8009c36 <_strtod_l+0xace>
 8009c28:	f1ba 0f00 	cmp.w	sl, #0
 8009c2c:	d103      	bne.n	8009c36 <_strtod_l+0xace>
 8009c2e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8009c32:	2d00      	cmp	r5, #0
 8009c34:	d06d      	beq.n	8009d12 <_strtod_l+0xbaa>
 8009c36:	a30a      	add	r3, pc, #40	; (adr r3, 8009c60 <_strtod_l+0xaf8>)
 8009c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3c:	4630      	mov	r0, r6
 8009c3e:	4639      	mov	r1, r7
 8009c40:	f7f6 ff4c 	bl	8000adc <__aeabi_dcmplt>
 8009c44:	2800      	cmp	r0, #0
 8009c46:	f47f acb8 	bne.w	80095ba <_strtod_l+0x452>
 8009c4a:	a307      	add	r3, pc, #28	; (adr r3, 8009c68 <_strtod_l+0xb00>)
 8009c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c50:	4630      	mov	r0, r6
 8009c52:	4639      	mov	r1, r7
 8009c54:	f7f6 ff60 	bl	8000b18 <__aeabi_dcmpgt>
 8009c58:	2800      	cmp	r0, #0
 8009c5a:	f43f af79 	beq.w	8009b50 <_strtod_l+0x9e8>
 8009c5e:	e4ac      	b.n	80095ba <_strtod_l+0x452>
 8009c60:	94a03595 	.word	0x94a03595
 8009c64:	3fdfffff 	.word	0x3fdfffff
 8009c68:	35afe535 	.word	0x35afe535
 8009c6c:	3fe00000 	.word	0x3fe00000
 8009c70:	000fffff 	.word	0x000fffff
 8009c74:	7ff00000 	.word	0x7ff00000
 8009c78:	7fefffff 	.word	0x7fefffff
 8009c7c:	39500000 	.word	0x39500000
 8009c80:	3ff00000 	.word	0x3ff00000
 8009c84:	7fe00000 	.word	0x7fe00000
 8009c88:	7c9fffff 	.word	0x7c9fffff
 8009c8c:	3fe00000 	.word	0x3fe00000
 8009c90:	bff00000 	.word	0xbff00000
 8009c94:	9b04      	ldr	r3, [sp, #16]
 8009c96:	b333      	cbz	r3, 8009ce6 <_strtod_l+0xb7e>
 8009c98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c9a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009c9e:	d822      	bhi.n	8009ce6 <_strtod_l+0xb7e>
 8009ca0:	a327      	add	r3, pc, #156	; (adr r3, 8009d40 <_strtod_l+0xbd8>)
 8009ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca6:	4630      	mov	r0, r6
 8009ca8:	4639      	mov	r1, r7
 8009caa:	f7f6 ff21 	bl	8000af0 <__aeabi_dcmple>
 8009cae:	b1a0      	cbz	r0, 8009cda <_strtod_l+0xb72>
 8009cb0:	4639      	mov	r1, r7
 8009cb2:	4630      	mov	r0, r6
 8009cb4:	f7f6 ff78 	bl	8000ba8 <__aeabi_d2uiz>
 8009cb8:	2800      	cmp	r0, #0
 8009cba:	bf08      	it	eq
 8009cbc:	2001      	moveq	r0, #1
 8009cbe:	f7f6 fc21 	bl	8000504 <__aeabi_ui2d>
 8009cc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009cc4:	4606      	mov	r6, r0
 8009cc6:	460f      	mov	r7, r1
 8009cc8:	bb03      	cbnz	r3, 8009d0c <_strtod_l+0xba4>
 8009cca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009cce:	9012      	str	r0, [sp, #72]	; 0x48
 8009cd0:	9313      	str	r3, [sp, #76]	; 0x4c
 8009cd2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8009cd6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009cda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cdc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009cde:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009ce2:	1a9b      	subs	r3, r3, r2
 8009ce4:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ce6:	ed9d 0b08 	vldr	d0, [sp, #32]
 8009cea:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8009cee:	f001 fd65 	bl	800b7bc <__ulp>
 8009cf2:	4650      	mov	r0, sl
 8009cf4:	ec53 2b10 	vmov	r2, r3, d0
 8009cf8:	4659      	mov	r1, fp
 8009cfa:	f7f6 fc7d 	bl	80005f8 <__aeabi_dmul>
 8009cfe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009d02:	f7f6 fac3 	bl	800028c <__adddf3>
 8009d06:	4682      	mov	sl, r0
 8009d08:	468b      	mov	fp, r1
 8009d0a:	e772      	b.n	8009bf2 <_strtod_l+0xa8a>
 8009d0c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8009d10:	e7df      	b.n	8009cd2 <_strtod_l+0xb6a>
 8009d12:	a30d      	add	r3, pc, #52	; (adr r3, 8009d48 <_strtod_l+0xbe0>)
 8009d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d18:	f7f6 fee0 	bl	8000adc <__aeabi_dcmplt>
 8009d1c:	e79c      	b.n	8009c58 <_strtod_l+0xaf0>
 8009d1e:	2300      	movs	r3, #0
 8009d20:	930d      	str	r3, [sp, #52]	; 0x34
 8009d22:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009d24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009d26:	6013      	str	r3, [r2, #0]
 8009d28:	f7ff ba61 	b.w	80091ee <_strtod_l+0x86>
 8009d2c:	2b65      	cmp	r3, #101	; 0x65
 8009d2e:	f04f 0200 	mov.w	r2, #0
 8009d32:	f43f ab4e 	beq.w	80093d2 <_strtod_l+0x26a>
 8009d36:	2101      	movs	r1, #1
 8009d38:	4614      	mov	r4, r2
 8009d3a:	9104      	str	r1, [sp, #16]
 8009d3c:	f7ff bacb 	b.w	80092d6 <_strtod_l+0x16e>
 8009d40:	ffc00000 	.word	0xffc00000
 8009d44:	41dfffff 	.word	0x41dfffff
 8009d48:	94a03595 	.word	0x94a03595
 8009d4c:	3fcfffff 	.word	0x3fcfffff

08009d50 <_strtod_r>:
 8009d50:	4b05      	ldr	r3, [pc, #20]	; (8009d68 <_strtod_r+0x18>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	b410      	push	{r4}
 8009d56:	6a1b      	ldr	r3, [r3, #32]
 8009d58:	4c04      	ldr	r4, [pc, #16]	; (8009d6c <_strtod_r+0x1c>)
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	bf08      	it	eq
 8009d5e:	4623      	moveq	r3, r4
 8009d60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d64:	f7ff ba00 	b.w	8009168 <_strtod_l>
 8009d68:	20000028 	.word	0x20000028
 8009d6c:	2000008c 	.word	0x2000008c

08009d70 <strtod>:
 8009d70:	4b07      	ldr	r3, [pc, #28]	; (8009d90 <strtod+0x20>)
 8009d72:	4a08      	ldr	r2, [pc, #32]	; (8009d94 <strtod+0x24>)
 8009d74:	b410      	push	{r4}
 8009d76:	681c      	ldr	r4, [r3, #0]
 8009d78:	6a23      	ldr	r3, [r4, #32]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	bf08      	it	eq
 8009d7e:	4613      	moveq	r3, r2
 8009d80:	460a      	mov	r2, r1
 8009d82:	4601      	mov	r1, r0
 8009d84:	4620      	mov	r0, r4
 8009d86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d8a:	f7ff b9ed 	b.w	8009168 <_strtod_l>
 8009d8e:	bf00      	nop
 8009d90:	20000028 	.word	0x20000028
 8009d94:	2000008c 	.word	0x2000008c

08009d98 <_strtol_l.isra.0>:
 8009d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d9c:	4680      	mov	r8, r0
 8009d9e:	4689      	mov	r9, r1
 8009da0:	4692      	mov	sl, r2
 8009da2:	461e      	mov	r6, r3
 8009da4:	460f      	mov	r7, r1
 8009da6:	463d      	mov	r5, r7
 8009da8:	9808      	ldr	r0, [sp, #32]
 8009daa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009dae:	f001 fa01 	bl	800b1b4 <__locale_ctype_ptr_l>
 8009db2:	4420      	add	r0, r4
 8009db4:	7843      	ldrb	r3, [r0, #1]
 8009db6:	f013 0308 	ands.w	r3, r3, #8
 8009dba:	d132      	bne.n	8009e22 <_strtol_l.isra.0+0x8a>
 8009dbc:	2c2d      	cmp	r4, #45	; 0x2d
 8009dbe:	d132      	bne.n	8009e26 <_strtol_l.isra.0+0x8e>
 8009dc0:	787c      	ldrb	r4, [r7, #1]
 8009dc2:	1cbd      	adds	r5, r7, #2
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	2e00      	cmp	r6, #0
 8009dc8:	d05d      	beq.n	8009e86 <_strtol_l.isra.0+0xee>
 8009dca:	2e10      	cmp	r6, #16
 8009dcc:	d109      	bne.n	8009de2 <_strtol_l.isra.0+0x4a>
 8009dce:	2c30      	cmp	r4, #48	; 0x30
 8009dd0:	d107      	bne.n	8009de2 <_strtol_l.isra.0+0x4a>
 8009dd2:	782b      	ldrb	r3, [r5, #0]
 8009dd4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009dd8:	2b58      	cmp	r3, #88	; 0x58
 8009dda:	d14f      	bne.n	8009e7c <_strtol_l.isra.0+0xe4>
 8009ddc:	786c      	ldrb	r4, [r5, #1]
 8009dde:	2610      	movs	r6, #16
 8009de0:	3502      	adds	r5, #2
 8009de2:	2a00      	cmp	r2, #0
 8009de4:	bf14      	ite	ne
 8009de6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8009dea:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009dee:	2700      	movs	r7, #0
 8009df0:	fbb1 fcf6 	udiv	ip, r1, r6
 8009df4:	4638      	mov	r0, r7
 8009df6:	fb06 1e1c 	mls	lr, r6, ip, r1
 8009dfa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009dfe:	2b09      	cmp	r3, #9
 8009e00:	d817      	bhi.n	8009e32 <_strtol_l.isra.0+0x9a>
 8009e02:	461c      	mov	r4, r3
 8009e04:	42a6      	cmp	r6, r4
 8009e06:	dd23      	ble.n	8009e50 <_strtol_l.isra.0+0xb8>
 8009e08:	1c7b      	adds	r3, r7, #1
 8009e0a:	d007      	beq.n	8009e1c <_strtol_l.isra.0+0x84>
 8009e0c:	4584      	cmp	ip, r0
 8009e0e:	d31c      	bcc.n	8009e4a <_strtol_l.isra.0+0xb2>
 8009e10:	d101      	bne.n	8009e16 <_strtol_l.isra.0+0x7e>
 8009e12:	45a6      	cmp	lr, r4
 8009e14:	db19      	blt.n	8009e4a <_strtol_l.isra.0+0xb2>
 8009e16:	fb00 4006 	mla	r0, r0, r6, r4
 8009e1a:	2701      	movs	r7, #1
 8009e1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e20:	e7eb      	b.n	8009dfa <_strtol_l.isra.0+0x62>
 8009e22:	462f      	mov	r7, r5
 8009e24:	e7bf      	b.n	8009da6 <_strtol_l.isra.0+0xe>
 8009e26:	2c2b      	cmp	r4, #43	; 0x2b
 8009e28:	bf04      	itt	eq
 8009e2a:	1cbd      	addeq	r5, r7, #2
 8009e2c:	787c      	ldrbeq	r4, [r7, #1]
 8009e2e:	461a      	mov	r2, r3
 8009e30:	e7c9      	b.n	8009dc6 <_strtol_l.isra.0+0x2e>
 8009e32:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8009e36:	2b19      	cmp	r3, #25
 8009e38:	d801      	bhi.n	8009e3e <_strtol_l.isra.0+0xa6>
 8009e3a:	3c37      	subs	r4, #55	; 0x37
 8009e3c:	e7e2      	b.n	8009e04 <_strtol_l.isra.0+0x6c>
 8009e3e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8009e42:	2b19      	cmp	r3, #25
 8009e44:	d804      	bhi.n	8009e50 <_strtol_l.isra.0+0xb8>
 8009e46:	3c57      	subs	r4, #87	; 0x57
 8009e48:	e7dc      	b.n	8009e04 <_strtol_l.isra.0+0x6c>
 8009e4a:	f04f 37ff 	mov.w	r7, #4294967295
 8009e4e:	e7e5      	b.n	8009e1c <_strtol_l.isra.0+0x84>
 8009e50:	1c7b      	adds	r3, r7, #1
 8009e52:	d108      	bne.n	8009e66 <_strtol_l.isra.0+0xce>
 8009e54:	2322      	movs	r3, #34	; 0x22
 8009e56:	f8c8 3000 	str.w	r3, [r8]
 8009e5a:	4608      	mov	r0, r1
 8009e5c:	f1ba 0f00 	cmp.w	sl, #0
 8009e60:	d107      	bne.n	8009e72 <_strtol_l.isra.0+0xda>
 8009e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e66:	b102      	cbz	r2, 8009e6a <_strtol_l.isra.0+0xd2>
 8009e68:	4240      	negs	r0, r0
 8009e6a:	f1ba 0f00 	cmp.w	sl, #0
 8009e6e:	d0f8      	beq.n	8009e62 <_strtol_l.isra.0+0xca>
 8009e70:	b10f      	cbz	r7, 8009e76 <_strtol_l.isra.0+0xde>
 8009e72:	f105 39ff 	add.w	r9, r5, #4294967295
 8009e76:	f8ca 9000 	str.w	r9, [sl]
 8009e7a:	e7f2      	b.n	8009e62 <_strtol_l.isra.0+0xca>
 8009e7c:	2430      	movs	r4, #48	; 0x30
 8009e7e:	2e00      	cmp	r6, #0
 8009e80:	d1af      	bne.n	8009de2 <_strtol_l.isra.0+0x4a>
 8009e82:	2608      	movs	r6, #8
 8009e84:	e7ad      	b.n	8009de2 <_strtol_l.isra.0+0x4a>
 8009e86:	2c30      	cmp	r4, #48	; 0x30
 8009e88:	d0a3      	beq.n	8009dd2 <_strtol_l.isra.0+0x3a>
 8009e8a:	260a      	movs	r6, #10
 8009e8c:	e7a9      	b.n	8009de2 <_strtol_l.isra.0+0x4a>
	...

08009e90 <_strtol_r>:
 8009e90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e92:	4c06      	ldr	r4, [pc, #24]	; (8009eac <_strtol_r+0x1c>)
 8009e94:	4d06      	ldr	r5, [pc, #24]	; (8009eb0 <_strtol_r+0x20>)
 8009e96:	6824      	ldr	r4, [r4, #0]
 8009e98:	6a24      	ldr	r4, [r4, #32]
 8009e9a:	2c00      	cmp	r4, #0
 8009e9c:	bf08      	it	eq
 8009e9e:	462c      	moveq	r4, r5
 8009ea0:	9400      	str	r4, [sp, #0]
 8009ea2:	f7ff ff79 	bl	8009d98 <_strtol_l.isra.0>
 8009ea6:	b003      	add	sp, #12
 8009ea8:	bd30      	pop	{r4, r5, pc}
 8009eaa:	bf00      	nop
 8009eac:	20000028 	.word	0x20000028
 8009eb0:	2000008c 	.word	0x2000008c

08009eb4 <strtol>:
 8009eb4:	4b08      	ldr	r3, [pc, #32]	; (8009ed8 <strtol+0x24>)
 8009eb6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009eb8:	681c      	ldr	r4, [r3, #0]
 8009eba:	4d08      	ldr	r5, [pc, #32]	; (8009edc <strtol+0x28>)
 8009ebc:	6a23      	ldr	r3, [r4, #32]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	bf08      	it	eq
 8009ec2:	462b      	moveq	r3, r5
 8009ec4:	9300      	str	r3, [sp, #0]
 8009ec6:	4613      	mov	r3, r2
 8009ec8:	460a      	mov	r2, r1
 8009eca:	4601      	mov	r1, r0
 8009ecc:	4620      	mov	r0, r4
 8009ece:	f7ff ff63 	bl	8009d98 <_strtol_l.isra.0>
 8009ed2:	b003      	add	sp, #12
 8009ed4:	bd30      	pop	{r4, r5, pc}
 8009ed6:	bf00      	nop
 8009ed8:	20000028 	.word	0x20000028
 8009edc:	2000008c 	.word	0x2000008c

08009ee0 <quorem>:
 8009ee0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee4:	6903      	ldr	r3, [r0, #16]
 8009ee6:	690c      	ldr	r4, [r1, #16]
 8009ee8:	42a3      	cmp	r3, r4
 8009eea:	4680      	mov	r8, r0
 8009eec:	f2c0 8082 	blt.w	8009ff4 <quorem+0x114>
 8009ef0:	3c01      	subs	r4, #1
 8009ef2:	f101 0714 	add.w	r7, r1, #20
 8009ef6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009efa:	f100 0614 	add.w	r6, r0, #20
 8009efe:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009f02:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009f06:	eb06 030c 	add.w	r3, r6, ip
 8009f0a:	3501      	adds	r5, #1
 8009f0c:	eb07 090c 	add.w	r9, r7, ip
 8009f10:	9301      	str	r3, [sp, #4]
 8009f12:	fbb0 f5f5 	udiv	r5, r0, r5
 8009f16:	b395      	cbz	r5, 8009f7e <quorem+0x9e>
 8009f18:	f04f 0a00 	mov.w	sl, #0
 8009f1c:	4638      	mov	r0, r7
 8009f1e:	46b6      	mov	lr, r6
 8009f20:	46d3      	mov	fp, sl
 8009f22:	f850 2b04 	ldr.w	r2, [r0], #4
 8009f26:	b293      	uxth	r3, r2
 8009f28:	fb05 a303 	mla	r3, r5, r3, sl
 8009f2c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009f30:	b29b      	uxth	r3, r3
 8009f32:	ebab 0303 	sub.w	r3, fp, r3
 8009f36:	0c12      	lsrs	r2, r2, #16
 8009f38:	f8de b000 	ldr.w	fp, [lr]
 8009f3c:	fb05 a202 	mla	r2, r5, r2, sl
 8009f40:	fa13 f38b 	uxtah	r3, r3, fp
 8009f44:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009f48:	fa1f fb82 	uxth.w	fp, r2
 8009f4c:	f8de 2000 	ldr.w	r2, [lr]
 8009f50:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009f54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f58:	b29b      	uxth	r3, r3
 8009f5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f5e:	4581      	cmp	r9, r0
 8009f60:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009f64:	f84e 3b04 	str.w	r3, [lr], #4
 8009f68:	d2db      	bcs.n	8009f22 <quorem+0x42>
 8009f6a:	f856 300c 	ldr.w	r3, [r6, ip]
 8009f6e:	b933      	cbnz	r3, 8009f7e <quorem+0x9e>
 8009f70:	9b01      	ldr	r3, [sp, #4]
 8009f72:	3b04      	subs	r3, #4
 8009f74:	429e      	cmp	r6, r3
 8009f76:	461a      	mov	r2, r3
 8009f78:	d330      	bcc.n	8009fdc <quorem+0xfc>
 8009f7a:	f8c8 4010 	str.w	r4, [r8, #16]
 8009f7e:	4640      	mov	r0, r8
 8009f80:	f001 fba4 	bl	800b6cc <__mcmp>
 8009f84:	2800      	cmp	r0, #0
 8009f86:	db25      	blt.n	8009fd4 <quorem+0xf4>
 8009f88:	3501      	adds	r5, #1
 8009f8a:	4630      	mov	r0, r6
 8009f8c:	f04f 0c00 	mov.w	ip, #0
 8009f90:	f857 2b04 	ldr.w	r2, [r7], #4
 8009f94:	f8d0 e000 	ldr.w	lr, [r0]
 8009f98:	b293      	uxth	r3, r2
 8009f9a:	ebac 0303 	sub.w	r3, ip, r3
 8009f9e:	0c12      	lsrs	r2, r2, #16
 8009fa0:	fa13 f38e 	uxtah	r3, r3, lr
 8009fa4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009fa8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009fac:	b29b      	uxth	r3, r3
 8009fae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009fb2:	45b9      	cmp	r9, r7
 8009fb4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009fb8:	f840 3b04 	str.w	r3, [r0], #4
 8009fbc:	d2e8      	bcs.n	8009f90 <quorem+0xb0>
 8009fbe:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009fc2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009fc6:	b92a      	cbnz	r2, 8009fd4 <quorem+0xf4>
 8009fc8:	3b04      	subs	r3, #4
 8009fca:	429e      	cmp	r6, r3
 8009fcc:	461a      	mov	r2, r3
 8009fce:	d30b      	bcc.n	8009fe8 <quorem+0x108>
 8009fd0:	f8c8 4010 	str.w	r4, [r8, #16]
 8009fd4:	4628      	mov	r0, r5
 8009fd6:	b003      	add	sp, #12
 8009fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fdc:	6812      	ldr	r2, [r2, #0]
 8009fde:	3b04      	subs	r3, #4
 8009fe0:	2a00      	cmp	r2, #0
 8009fe2:	d1ca      	bne.n	8009f7a <quorem+0x9a>
 8009fe4:	3c01      	subs	r4, #1
 8009fe6:	e7c5      	b.n	8009f74 <quorem+0x94>
 8009fe8:	6812      	ldr	r2, [r2, #0]
 8009fea:	3b04      	subs	r3, #4
 8009fec:	2a00      	cmp	r2, #0
 8009fee:	d1ef      	bne.n	8009fd0 <quorem+0xf0>
 8009ff0:	3c01      	subs	r4, #1
 8009ff2:	e7ea      	b.n	8009fca <quorem+0xea>
 8009ff4:	2000      	movs	r0, #0
 8009ff6:	e7ee      	b.n	8009fd6 <quorem+0xf6>

08009ff8 <_dtoa_r>:
 8009ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ffc:	ec57 6b10 	vmov	r6, r7, d0
 800a000:	b097      	sub	sp, #92	; 0x5c
 800a002:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a004:	9106      	str	r1, [sp, #24]
 800a006:	4604      	mov	r4, r0
 800a008:	920b      	str	r2, [sp, #44]	; 0x2c
 800a00a:	9312      	str	r3, [sp, #72]	; 0x48
 800a00c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a010:	e9cd 6700 	strd	r6, r7, [sp]
 800a014:	b93d      	cbnz	r5, 800a026 <_dtoa_r+0x2e>
 800a016:	2010      	movs	r0, #16
 800a018:	f001 f8e0 	bl	800b1dc <malloc>
 800a01c:	6260      	str	r0, [r4, #36]	; 0x24
 800a01e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a022:	6005      	str	r5, [r0, #0]
 800a024:	60c5      	str	r5, [r0, #12]
 800a026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a028:	6819      	ldr	r1, [r3, #0]
 800a02a:	b151      	cbz	r1, 800a042 <_dtoa_r+0x4a>
 800a02c:	685a      	ldr	r2, [r3, #4]
 800a02e:	604a      	str	r2, [r1, #4]
 800a030:	2301      	movs	r3, #1
 800a032:	4093      	lsls	r3, r2
 800a034:	608b      	str	r3, [r1, #8]
 800a036:	4620      	mov	r0, r4
 800a038:	f001 f929 	bl	800b28e <_Bfree>
 800a03c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a03e:	2200      	movs	r2, #0
 800a040:	601a      	str	r2, [r3, #0]
 800a042:	1e3b      	subs	r3, r7, #0
 800a044:	bfbb      	ittet	lt
 800a046:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a04a:	9301      	strlt	r3, [sp, #4]
 800a04c:	2300      	movge	r3, #0
 800a04e:	2201      	movlt	r2, #1
 800a050:	bfac      	ite	ge
 800a052:	f8c8 3000 	strge.w	r3, [r8]
 800a056:	f8c8 2000 	strlt.w	r2, [r8]
 800a05a:	4baf      	ldr	r3, [pc, #700]	; (800a318 <_dtoa_r+0x320>)
 800a05c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a060:	ea33 0308 	bics.w	r3, r3, r8
 800a064:	d114      	bne.n	800a090 <_dtoa_r+0x98>
 800a066:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a068:	f242 730f 	movw	r3, #9999	; 0x270f
 800a06c:	6013      	str	r3, [r2, #0]
 800a06e:	9b00      	ldr	r3, [sp, #0]
 800a070:	b923      	cbnz	r3, 800a07c <_dtoa_r+0x84>
 800a072:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a076:	2800      	cmp	r0, #0
 800a078:	f000 8542 	beq.w	800ab00 <_dtoa_r+0xb08>
 800a07c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a07e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800a32c <_dtoa_r+0x334>
 800a082:	2b00      	cmp	r3, #0
 800a084:	f000 8544 	beq.w	800ab10 <_dtoa_r+0xb18>
 800a088:	f10b 0303 	add.w	r3, fp, #3
 800a08c:	f000 bd3e 	b.w	800ab0c <_dtoa_r+0xb14>
 800a090:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a094:	2200      	movs	r2, #0
 800a096:	2300      	movs	r3, #0
 800a098:	4630      	mov	r0, r6
 800a09a:	4639      	mov	r1, r7
 800a09c:	f7f6 fd14 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0a0:	4681      	mov	r9, r0
 800a0a2:	b168      	cbz	r0, 800a0c0 <_dtoa_r+0xc8>
 800a0a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	6013      	str	r3, [r2, #0]
 800a0aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	f000 8524 	beq.w	800aafa <_dtoa_r+0xb02>
 800a0b2:	4b9a      	ldr	r3, [pc, #616]	; (800a31c <_dtoa_r+0x324>)
 800a0b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a0b6:	f103 3bff 	add.w	fp, r3, #4294967295
 800a0ba:	6013      	str	r3, [r2, #0]
 800a0bc:	f000 bd28 	b.w	800ab10 <_dtoa_r+0xb18>
 800a0c0:	aa14      	add	r2, sp, #80	; 0x50
 800a0c2:	a915      	add	r1, sp, #84	; 0x54
 800a0c4:	ec47 6b10 	vmov	d0, r6, r7
 800a0c8:	4620      	mov	r0, r4
 800a0ca:	f001 fbed 	bl	800b8a8 <__d2b>
 800a0ce:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a0d2:	9004      	str	r0, [sp, #16]
 800a0d4:	2d00      	cmp	r5, #0
 800a0d6:	d07c      	beq.n	800a1d2 <_dtoa_r+0x1da>
 800a0d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a0dc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a0e0:	46b2      	mov	sl, r6
 800a0e2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a0e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a0ea:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	4b8b      	ldr	r3, [pc, #556]	; (800a320 <_dtoa_r+0x328>)
 800a0f2:	4650      	mov	r0, sl
 800a0f4:	4659      	mov	r1, fp
 800a0f6:	f7f6 f8c7 	bl	8000288 <__aeabi_dsub>
 800a0fa:	a381      	add	r3, pc, #516	; (adr r3, 800a300 <_dtoa_r+0x308>)
 800a0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a100:	f7f6 fa7a 	bl	80005f8 <__aeabi_dmul>
 800a104:	a380      	add	r3, pc, #512	; (adr r3, 800a308 <_dtoa_r+0x310>)
 800a106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a10a:	f7f6 f8bf 	bl	800028c <__adddf3>
 800a10e:	4606      	mov	r6, r0
 800a110:	4628      	mov	r0, r5
 800a112:	460f      	mov	r7, r1
 800a114:	f7f6 fa06 	bl	8000524 <__aeabi_i2d>
 800a118:	a37d      	add	r3, pc, #500	; (adr r3, 800a310 <_dtoa_r+0x318>)
 800a11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a11e:	f7f6 fa6b 	bl	80005f8 <__aeabi_dmul>
 800a122:	4602      	mov	r2, r0
 800a124:	460b      	mov	r3, r1
 800a126:	4630      	mov	r0, r6
 800a128:	4639      	mov	r1, r7
 800a12a:	f7f6 f8af 	bl	800028c <__adddf3>
 800a12e:	4606      	mov	r6, r0
 800a130:	460f      	mov	r7, r1
 800a132:	f7f6 fd11 	bl	8000b58 <__aeabi_d2iz>
 800a136:	2200      	movs	r2, #0
 800a138:	4682      	mov	sl, r0
 800a13a:	2300      	movs	r3, #0
 800a13c:	4630      	mov	r0, r6
 800a13e:	4639      	mov	r1, r7
 800a140:	f7f6 fccc 	bl	8000adc <__aeabi_dcmplt>
 800a144:	b148      	cbz	r0, 800a15a <_dtoa_r+0x162>
 800a146:	4650      	mov	r0, sl
 800a148:	f7f6 f9ec 	bl	8000524 <__aeabi_i2d>
 800a14c:	4632      	mov	r2, r6
 800a14e:	463b      	mov	r3, r7
 800a150:	f7f6 fcba 	bl	8000ac8 <__aeabi_dcmpeq>
 800a154:	b908      	cbnz	r0, 800a15a <_dtoa_r+0x162>
 800a156:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a15a:	f1ba 0f16 	cmp.w	sl, #22
 800a15e:	d859      	bhi.n	800a214 <_dtoa_r+0x21c>
 800a160:	4970      	ldr	r1, [pc, #448]	; (800a324 <_dtoa_r+0x32c>)
 800a162:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a166:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a16a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a16e:	f7f6 fcd3 	bl	8000b18 <__aeabi_dcmpgt>
 800a172:	2800      	cmp	r0, #0
 800a174:	d050      	beq.n	800a218 <_dtoa_r+0x220>
 800a176:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a17a:	2300      	movs	r3, #0
 800a17c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a17e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a180:	1b5d      	subs	r5, r3, r5
 800a182:	f1b5 0801 	subs.w	r8, r5, #1
 800a186:	bf49      	itett	mi
 800a188:	f1c5 0301 	rsbmi	r3, r5, #1
 800a18c:	2300      	movpl	r3, #0
 800a18e:	9305      	strmi	r3, [sp, #20]
 800a190:	f04f 0800 	movmi.w	r8, #0
 800a194:	bf58      	it	pl
 800a196:	9305      	strpl	r3, [sp, #20]
 800a198:	f1ba 0f00 	cmp.w	sl, #0
 800a19c:	db3e      	blt.n	800a21c <_dtoa_r+0x224>
 800a19e:	2300      	movs	r3, #0
 800a1a0:	44d0      	add	r8, sl
 800a1a2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a1a6:	9307      	str	r3, [sp, #28]
 800a1a8:	9b06      	ldr	r3, [sp, #24]
 800a1aa:	2b09      	cmp	r3, #9
 800a1ac:	f200 8090 	bhi.w	800a2d0 <_dtoa_r+0x2d8>
 800a1b0:	2b05      	cmp	r3, #5
 800a1b2:	bfc4      	itt	gt
 800a1b4:	3b04      	subgt	r3, #4
 800a1b6:	9306      	strgt	r3, [sp, #24]
 800a1b8:	9b06      	ldr	r3, [sp, #24]
 800a1ba:	f1a3 0302 	sub.w	r3, r3, #2
 800a1be:	bfcc      	ite	gt
 800a1c0:	2500      	movgt	r5, #0
 800a1c2:	2501      	movle	r5, #1
 800a1c4:	2b03      	cmp	r3, #3
 800a1c6:	f200 808f 	bhi.w	800a2e8 <_dtoa_r+0x2f0>
 800a1ca:	e8df f003 	tbb	[pc, r3]
 800a1ce:	7f7d      	.short	0x7f7d
 800a1d0:	7131      	.short	0x7131
 800a1d2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800a1d6:	441d      	add	r5, r3
 800a1d8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a1dc:	2820      	cmp	r0, #32
 800a1de:	dd13      	ble.n	800a208 <_dtoa_r+0x210>
 800a1e0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a1e4:	9b00      	ldr	r3, [sp, #0]
 800a1e6:	fa08 f800 	lsl.w	r8, r8, r0
 800a1ea:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a1ee:	fa23 f000 	lsr.w	r0, r3, r0
 800a1f2:	ea48 0000 	orr.w	r0, r8, r0
 800a1f6:	f7f6 f985 	bl	8000504 <__aeabi_ui2d>
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	4682      	mov	sl, r0
 800a1fe:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800a202:	3d01      	subs	r5, #1
 800a204:	9313      	str	r3, [sp, #76]	; 0x4c
 800a206:	e772      	b.n	800a0ee <_dtoa_r+0xf6>
 800a208:	9b00      	ldr	r3, [sp, #0]
 800a20a:	f1c0 0020 	rsb	r0, r0, #32
 800a20e:	fa03 f000 	lsl.w	r0, r3, r0
 800a212:	e7f0      	b.n	800a1f6 <_dtoa_r+0x1fe>
 800a214:	2301      	movs	r3, #1
 800a216:	e7b1      	b.n	800a17c <_dtoa_r+0x184>
 800a218:	900f      	str	r0, [sp, #60]	; 0x3c
 800a21a:	e7b0      	b.n	800a17e <_dtoa_r+0x186>
 800a21c:	9b05      	ldr	r3, [sp, #20]
 800a21e:	eba3 030a 	sub.w	r3, r3, sl
 800a222:	9305      	str	r3, [sp, #20]
 800a224:	f1ca 0300 	rsb	r3, sl, #0
 800a228:	9307      	str	r3, [sp, #28]
 800a22a:	2300      	movs	r3, #0
 800a22c:	930e      	str	r3, [sp, #56]	; 0x38
 800a22e:	e7bb      	b.n	800a1a8 <_dtoa_r+0x1b0>
 800a230:	2301      	movs	r3, #1
 800a232:	930a      	str	r3, [sp, #40]	; 0x28
 800a234:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a236:	2b00      	cmp	r3, #0
 800a238:	dd59      	ble.n	800a2ee <_dtoa_r+0x2f6>
 800a23a:	9302      	str	r3, [sp, #8]
 800a23c:	4699      	mov	r9, r3
 800a23e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a240:	2200      	movs	r2, #0
 800a242:	6072      	str	r2, [r6, #4]
 800a244:	2204      	movs	r2, #4
 800a246:	f102 0014 	add.w	r0, r2, #20
 800a24a:	4298      	cmp	r0, r3
 800a24c:	6871      	ldr	r1, [r6, #4]
 800a24e:	d953      	bls.n	800a2f8 <_dtoa_r+0x300>
 800a250:	4620      	mov	r0, r4
 800a252:	f000 ffe8 	bl	800b226 <_Balloc>
 800a256:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a258:	6030      	str	r0, [r6, #0]
 800a25a:	f1b9 0f0e 	cmp.w	r9, #14
 800a25e:	f8d3 b000 	ldr.w	fp, [r3]
 800a262:	f200 80e6 	bhi.w	800a432 <_dtoa_r+0x43a>
 800a266:	2d00      	cmp	r5, #0
 800a268:	f000 80e3 	beq.w	800a432 <_dtoa_r+0x43a>
 800a26c:	ed9d 7b00 	vldr	d7, [sp]
 800a270:	f1ba 0f00 	cmp.w	sl, #0
 800a274:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a278:	dd74      	ble.n	800a364 <_dtoa_r+0x36c>
 800a27a:	4a2a      	ldr	r2, [pc, #168]	; (800a324 <_dtoa_r+0x32c>)
 800a27c:	f00a 030f 	and.w	r3, sl, #15
 800a280:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a284:	ed93 7b00 	vldr	d7, [r3]
 800a288:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a28c:	06f0      	lsls	r0, r6, #27
 800a28e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a292:	d565      	bpl.n	800a360 <_dtoa_r+0x368>
 800a294:	4b24      	ldr	r3, [pc, #144]	; (800a328 <_dtoa_r+0x330>)
 800a296:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a29a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a29e:	f7f6 fad5 	bl	800084c <__aeabi_ddiv>
 800a2a2:	e9cd 0100 	strd	r0, r1, [sp]
 800a2a6:	f006 060f 	and.w	r6, r6, #15
 800a2aa:	2503      	movs	r5, #3
 800a2ac:	4f1e      	ldr	r7, [pc, #120]	; (800a328 <_dtoa_r+0x330>)
 800a2ae:	e04c      	b.n	800a34a <_dtoa_r+0x352>
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	930a      	str	r3, [sp, #40]	; 0x28
 800a2b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2b6:	4453      	add	r3, sl
 800a2b8:	f103 0901 	add.w	r9, r3, #1
 800a2bc:	9302      	str	r3, [sp, #8]
 800a2be:	464b      	mov	r3, r9
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	bfb8      	it	lt
 800a2c4:	2301      	movlt	r3, #1
 800a2c6:	e7ba      	b.n	800a23e <_dtoa_r+0x246>
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	e7b2      	b.n	800a232 <_dtoa_r+0x23a>
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	e7f0      	b.n	800a2b2 <_dtoa_r+0x2ba>
 800a2d0:	2501      	movs	r5, #1
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	9306      	str	r3, [sp, #24]
 800a2d6:	950a      	str	r5, [sp, #40]	; 0x28
 800a2d8:	f04f 33ff 	mov.w	r3, #4294967295
 800a2dc:	9302      	str	r3, [sp, #8]
 800a2de:	4699      	mov	r9, r3
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	2312      	movs	r3, #18
 800a2e4:	920b      	str	r2, [sp, #44]	; 0x2c
 800a2e6:	e7aa      	b.n	800a23e <_dtoa_r+0x246>
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	930a      	str	r3, [sp, #40]	; 0x28
 800a2ec:	e7f4      	b.n	800a2d8 <_dtoa_r+0x2e0>
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	9302      	str	r3, [sp, #8]
 800a2f2:	4699      	mov	r9, r3
 800a2f4:	461a      	mov	r2, r3
 800a2f6:	e7f5      	b.n	800a2e4 <_dtoa_r+0x2ec>
 800a2f8:	3101      	adds	r1, #1
 800a2fa:	6071      	str	r1, [r6, #4]
 800a2fc:	0052      	lsls	r2, r2, #1
 800a2fe:	e7a2      	b.n	800a246 <_dtoa_r+0x24e>
 800a300:	636f4361 	.word	0x636f4361
 800a304:	3fd287a7 	.word	0x3fd287a7
 800a308:	8b60c8b3 	.word	0x8b60c8b3
 800a30c:	3fc68a28 	.word	0x3fc68a28
 800a310:	509f79fb 	.word	0x509f79fb
 800a314:	3fd34413 	.word	0x3fd34413
 800a318:	7ff00000 	.word	0x7ff00000
 800a31c:	0800c599 	.word	0x0800c599
 800a320:	3ff80000 	.word	0x3ff80000
 800a324:	0800c658 	.word	0x0800c658
 800a328:	0800c630 	.word	0x0800c630
 800a32c:	0800c621 	.word	0x0800c621
 800a330:	07f1      	lsls	r1, r6, #31
 800a332:	d508      	bpl.n	800a346 <_dtoa_r+0x34e>
 800a334:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a338:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a33c:	f7f6 f95c 	bl	80005f8 <__aeabi_dmul>
 800a340:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a344:	3501      	adds	r5, #1
 800a346:	1076      	asrs	r6, r6, #1
 800a348:	3708      	adds	r7, #8
 800a34a:	2e00      	cmp	r6, #0
 800a34c:	d1f0      	bne.n	800a330 <_dtoa_r+0x338>
 800a34e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a352:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a356:	f7f6 fa79 	bl	800084c <__aeabi_ddiv>
 800a35a:	e9cd 0100 	strd	r0, r1, [sp]
 800a35e:	e01a      	b.n	800a396 <_dtoa_r+0x39e>
 800a360:	2502      	movs	r5, #2
 800a362:	e7a3      	b.n	800a2ac <_dtoa_r+0x2b4>
 800a364:	f000 80a0 	beq.w	800a4a8 <_dtoa_r+0x4b0>
 800a368:	f1ca 0600 	rsb	r6, sl, #0
 800a36c:	4b9f      	ldr	r3, [pc, #636]	; (800a5ec <_dtoa_r+0x5f4>)
 800a36e:	4fa0      	ldr	r7, [pc, #640]	; (800a5f0 <_dtoa_r+0x5f8>)
 800a370:	f006 020f 	and.w	r2, r6, #15
 800a374:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a37c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a380:	f7f6 f93a 	bl	80005f8 <__aeabi_dmul>
 800a384:	e9cd 0100 	strd	r0, r1, [sp]
 800a388:	1136      	asrs	r6, r6, #4
 800a38a:	2300      	movs	r3, #0
 800a38c:	2502      	movs	r5, #2
 800a38e:	2e00      	cmp	r6, #0
 800a390:	d17f      	bne.n	800a492 <_dtoa_r+0x49a>
 800a392:	2b00      	cmp	r3, #0
 800a394:	d1e1      	bne.n	800a35a <_dtoa_r+0x362>
 800a396:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a398:	2b00      	cmp	r3, #0
 800a39a:	f000 8087 	beq.w	800a4ac <_dtoa_r+0x4b4>
 800a39e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	4b93      	ldr	r3, [pc, #588]	; (800a5f4 <_dtoa_r+0x5fc>)
 800a3a6:	4630      	mov	r0, r6
 800a3a8:	4639      	mov	r1, r7
 800a3aa:	f7f6 fb97 	bl	8000adc <__aeabi_dcmplt>
 800a3ae:	2800      	cmp	r0, #0
 800a3b0:	d07c      	beq.n	800a4ac <_dtoa_r+0x4b4>
 800a3b2:	f1b9 0f00 	cmp.w	r9, #0
 800a3b6:	d079      	beq.n	800a4ac <_dtoa_r+0x4b4>
 800a3b8:	9b02      	ldr	r3, [sp, #8]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	dd35      	ble.n	800a42a <_dtoa_r+0x432>
 800a3be:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a3c2:	9308      	str	r3, [sp, #32]
 800a3c4:	4639      	mov	r1, r7
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	4b8b      	ldr	r3, [pc, #556]	; (800a5f8 <_dtoa_r+0x600>)
 800a3ca:	4630      	mov	r0, r6
 800a3cc:	f7f6 f914 	bl	80005f8 <__aeabi_dmul>
 800a3d0:	e9cd 0100 	strd	r0, r1, [sp]
 800a3d4:	9f02      	ldr	r7, [sp, #8]
 800a3d6:	3501      	adds	r5, #1
 800a3d8:	4628      	mov	r0, r5
 800a3da:	f7f6 f8a3 	bl	8000524 <__aeabi_i2d>
 800a3de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a3e2:	f7f6 f909 	bl	80005f8 <__aeabi_dmul>
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	4b84      	ldr	r3, [pc, #528]	; (800a5fc <_dtoa_r+0x604>)
 800a3ea:	f7f5 ff4f 	bl	800028c <__adddf3>
 800a3ee:	4605      	mov	r5, r0
 800a3f0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a3f4:	2f00      	cmp	r7, #0
 800a3f6:	d15d      	bne.n	800a4b4 <_dtoa_r+0x4bc>
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	4b81      	ldr	r3, [pc, #516]	; (800a600 <_dtoa_r+0x608>)
 800a3fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a400:	f7f5 ff42 	bl	8000288 <__aeabi_dsub>
 800a404:	462a      	mov	r2, r5
 800a406:	4633      	mov	r3, r6
 800a408:	e9cd 0100 	strd	r0, r1, [sp]
 800a40c:	f7f6 fb84 	bl	8000b18 <__aeabi_dcmpgt>
 800a410:	2800      	cmp	r0, #0
 800a412:	f040 8288 	bne.w	800a926 <_dtoa_r+0x92e>
 800a416:	462a      	mov	r2, r5
 800a418:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a41c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a420:	f7f6 fb5c 	bl	8000adc <__aeabi_dcmplt>
 800a424:	2800      	cmp	r0, #0
 800a426:	f040 827c 	bne.w	800a922 <_dtoa_r+0x92a>
 800a42a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a42e:	e9cd 2300 	strd	r2, r3, [sp]
 800a432:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a434:	2b00      	cmp	r3, #0
 800a436:	f2c0 8150 	blt.w	800a6da <_dtoa_r+0x6e2>
 800a43a:	f1ba 0f0e 	cmp.w	sl, #14
 800a43e:	f300 814c 	bgt.w	800a6da <_dtoa_r+0x6e2>
 800a442:	4b6a      	ldr	r3, [pc, #424]	; (800a5ec <_dtoa_r+0x5f4>)
 800a444:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a448:	ed93 7b00 	vldr	d7, [r3]
 800a44c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a44e:	2b00      	cmp	r3, #0
 800a450:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a454:	f280 80d8 	bge.w	800a608 <_dtoa_r+0x610>
 800a458:	f1b9 0f00 	cmp.w	r9, #0
 800a45c:	f300 80d4 	bgt.w	800a608 <_dtoa_r+0x610>
 800a460:	f040 825e 	bne.w	800a920 <_dtoa_r+0x928>
 800a464:	2200      	movs	r2, #0
 800a466:	4b66      	ldr	r3, [pc, #408]	; (800a600 <_dtoa_r+0x608>)
 800a468:	ec51 0b17 	vmov	r0, r1, d7
 800a46c:	f7f6 f8c4 	bl	80005f8 <__aeabi_dmul>
 800a470:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a474:	f7f6 fb46 	bl	8000b04 <__aeabi_dcmpge>
 800a478:	464f      	mov	r7, r9
 800a47a:	464e      	mov	r6, r9
 800a47c:	2800      	cmp	r0, #0
 800a47e:	f040 8234 	bne.w	800a8ea <_dtoa_r+0x8f2>
 800a482:	2331      	movs	r3, #49	; 0x31
 800a484:	f10b 0501 	add.w	r5, fp, #1
 800a488:	f88b 3000 	strb.w	r3, [fp]
 800a48c:	f10a 0a01 	add.w	sl, sl, #1
 800a490:	e22f      	b.n	800a8f2 <_dtoa_r+0x8fa>
 800a492:	07f2      	lsls	r2, r6, #31
 800a494:	d505      	bpl.n	800a4a2 <_dtoa_r+0x4aa>
 800a496:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a49a:	f7f6 f8ad 	bl	80005f8 <__aeabi_dmul>
 800a49e:	3501      	adds	r5, #1
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	1076      	asrs	r6, r6, #1
 800a4a4:	3708      	adds	r7, #8
 800a4a6:	e772      	b.n	800a38e <_dtoa_r+0x396>
 800a4a8:	2502      	movs	r5, #2
 800a4aa:	e774      	b.n	800a396 <_dtoa_r+0x39e>
 800a4ac:	f8cd a020 	str.w	sl, [sp, #32]
 800a4b0:	464f      	mov	r7, r9
 800a4b2:	e791      	b.n	800a3d8 <_dtoa_r+0x3e0>
 800a4b4:	4b4d      	ldr	r3, [pc, #308]	; (800a5ec <_dtoa_r+0x5f4>)
 800a4b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a4ba:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a4be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d047      	beq.n	800a554 <_dtoa_r+0x55c>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	2000      	movs	r0, #0
 800a4ca:	494e      	ldr	r1, [pc, #312]	; (800a604 <_dtoa_r+0x60c>)
 800a4cc:	f7f6 f9be 	bl	800084c <__aeabi_ddiv>
 800a4d0:	462a      	mov	r2, r5
 800a4d2:	4633      	mov	r3, r6
 800a4d4:	f7f5 fed8 	bl	8000288 <__aeabi_dsub>
 800a4d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a4dc:	465d      	mov	r5, fp
 800a4de:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4e2:	f7f6 fb39 	bl	8000b58 <__aeabi_d2iz>
 800a4e6:	4606      	mov	r6, r0
 800a4e8:	f7f6 f81c 	bl	8000524 <__aeabi_i2d>
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4f4:	f7f5 fec8 	bl	8000288 <__aeabi_dsub>
 800a4f8:	3630      	adds	r6, #48	; 0x30
 800a4fa:	f805 6b01 	strb.w	r6, [r5], #1
 800a4fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a502:	e9cd 0100 	strd	r0, r1, [sp]
 800a506:	f7f6 fae9 	bl	8000adc <__aeabi_dcmplt>
 800a50a:	2800      	cmp	r0, #0
 800a50c:	d163      	bne.n	800a5d6 <_dtoa_r+0x5de>
 800a50e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a512:	2000      	movs	r0, #0
 800a514:	4937      	ldr	r1, [pc, #220]	; (800a5f4 <_dtoa_r+0x5fc>)
 800a516:	f7f5 feb7 	bl	8000288 <__aeabi_dsub>
 800a51a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a51e:	f7f6 fadd 	bl	8000adc <__aeabi_dcmplt>
 800a522:	2800      	cmp	r0, #0
 800a524:	f040 80b7 	bne.w	800a696 <_dtoa_r+0x69e>
 800a528:	eba5 030b 	sub.w	r3, r5, fp
 800a52c:	429f      	cmp	r7, r3
 800a52e:	f77f af7c 	ble.w	800a42a <_dtoa_r+0x432>
 800a532:	2200      	movs	r2, #0
 800a534:	4b30      	ldr	r3, [pc, #192]	; (800a5f8 <_dtoa_r+0x600>)
 800a536:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a53a:	f7f6 f85d 	bl	80005f8 <__aeabi_dmul>
 800a53e:	2200      	movs	r2, #0
 800a540:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a544:	4b2c      	ldr	r3, [pc, #176]	; (800a5f8 <_dtoa_r+0x600>)
 800a546:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a54a:	f7f6 f855 	bl	80005f8 <__aeabi_dmul>
 800a54e:	e9cd 0100 	strd	r0, r1, [sp]
 800a552:	e7c4      	b.n	800a4de <_dtoa_r+0x4e6>
 800a554:	462a      	mov	r2, r5
 800a556:	4633      	mov	r3, r6
 800a558:	f7f6 f84e 	bl	80005f8 <__aeabi_dmul>
 800a55c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a560:	eb0b 0507 	add.w	r5, fp, r7
 800a564:	465e      	mov	r6, fp
 800a566:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a56a:	f7f6 faf5 	bl	8000b58 <__aeabi_d2iz>
 800a56e:	4607      	mov	r7, r0
 800a570:	f7f5 ffd8 	bl	8000524 <__aeabi_i2d>
 800a574:	3730      	adds	r7, #48	; 0x30
 800a576:	4602      	mov	r2, r0
 800a578:	460b      	mov	r3, r1
 800a57a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a57e:	f7f5 fe83 	bl	8000288 <__aeabi_dsub>
 800a582:	f806 7b01 	strb.w	r7, [r6], #1
 800a586:	42ae      	cmp	r6, r5
 800a588:	e9cd 0100 	strd	r0, r1, [sp]
 800a58c:	f04f 0200 	mov.w	r2, #0
 800a590:	d126      	bne.n	800a5e0 <_dtoa_r+0x5e8>
 800a592:	4b1c      	ldr	r3, [pc, #112]	; (800a604 <_dtoa_r+0x60c>)
 800a594:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a598:	f7f5 fe78 	bl	800028c <__adddf3>
 800a59c:	4602      	mov	r2, r0
 800a59e:	460b      	mov	r3, r1
 800a5a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5a4:	f7f6 fab8 	bl	8000b18 <__aeabi_dcmpgt>
 800a5a8:	2800      	cmp	r0, #0
 800a5aa:	d174      	bne.n	800a696 <_dtoa_r+0x69e>
 800a5ac:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a5b0:	2000      	movs	r0, #0
 800a5b2:	4914      	ldr	r1, [pc, #80]	; (800a604 <_dtoa_r+0x60c>)
 800a5b4:	f7f5 fe68 	bl	8000288 <__aeabi_dsub>
 800a5b8:	4602      	mov	r2, r0
 800a5ba:	460b      	mov	r3, r1
 800a5bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5c0:	f7f6 fa8c 	bl	8000adc <__aeabi_dcmplt>
 800a5c4:	2800      	cmp	r0, #0
 800a5c6:	f43f af30 	beq.w	800a42a <_dtoa_r+0x432>
 800a5ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a5ce:	2b30      	cmp	r3, #48	; 0x30
 800a5d0:	f105 32ff 	add.w	r2, r5, #4294967295
 800a5d4:	d002      	beq.n	800a5dc <_dtoa_r+0x5e4>
 800a5d6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a5da:	e04a      	b.n	800a672 <_dtoa_r+0x67a>
 800a5dc:	4615      	mov	r5, r2
 800a5de:	e7f4      	b.n	800a5ca <_dtoa_r+0x5d2>
 800a5e0:	4b05      	ldr	r3, [pc, #20]	; (800a5f8 <_dtoa_r+0x600>)
 800a5e2:	f7f6 f809 	bl	80005f8 <__aeabi_dmul>
 800a5e6:	e9cd 0100 	strd	r0, r1, [sp]
 800a5ea:	e7bc      	b.n	800a566 <_dtoa_r+0x56e>
 800a5ec:	0800c658 	.word	0x0800c658
 800a5f0:	0800c630 	.word	0x0800c630
 800a5f4:	3ff00000 	.word	0x3ff00000
 800a5f8:	40240000 	.word	0x40240000
 800a5fc:	401c0000 	.word	0x401c0000
 800a600:	40140000 	.word	0x40140000
 800a604:	3fe00000 	.word	0x3fe00000
 800a608:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a60c:	465d      	mov	r5, fp
 800a60e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a612:	4630      	mov	r0, r6
 800a614:	4639      	mov	r1, r7
 800a616:	f7f6 f919 	bl	800084c <__aeabi_ddiv>
 800a61a:	f7f6 fa9d 	bl	8000b58 <__aeabi_d2iz>
 800a61e:	4680      	mov	r8, r0
 800a620:	f7f5 ff80 	bl	8000524 <__aeabi_i2d>
 800a624:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a628:	f7f5 ffe6 	bl	80005f8 <__aeabi_dmul>
 800a62c:	4602      	mov	r2, r0
 800a62e:	460b      	mov	r3, r1
 800a630:	4630      	mov	r0, r6
 800a632:	4639      	mov	r1, r7
 800a634:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a638:	f7f5 fe26 	bl	8000288 <__aeabi_dsub>
 800a63c:	f805 6b01 	strb.w	r6, [r5], #1
 800a640:	eba5 060b 	sub.w	r6, r5, fp
 800a644:	45b1      	cmp	r9, r6
 800a646:	4602      	mov	r2, r0
 800a648:	460b      	mov	r3, r1
 800a64a:	d139      	bne.n	800a6c0 <_dtoa_r+0x6c8>
 800a64c:	f7f5 fe1e 	bl	800028c <__adddf3>
 800a650:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a654:	4606      	mov	r6, r0
 800a656:	460f      	mov	r7, r1
 800a658:	f7f6 fa5e 	bl	8000b18 <__aeabi_dcmpgt>
 800a65c:	b9c8      	cbnz	r0, 800a692 <_dtoa_r+0x69a>
 800a65e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a662:	4630      	mov	r0, r6
 800a664:	4639      	mov	r1, r7
 800a666:	f7f6 fa2f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a66a:	b110      	cbz	r0, 800a672 <_dtoa_r+0x67a>
 800a66c:	f018 0f01 	tst.w	r8, #1
 800a670:	d10f      	bne.n	800a692 <_dtoa_r+0x69a>
 800a672:	9904      	ldr	r1, [sp, #16]
 800a674:	4620      	mov	r0, r4
 800a676:	f000 fe0a 	bl	800b28e <_Bfree>
 800a67a:	2300      	movs	r3, #0
 800a67c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a67e:	702b      	strb	r3, [r5, #0]
 800a680:	f10a 0301 	add.w	r3, sl, #1
 800a684:	6013      	str	r3, [r2, #0]
 800a686:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a688:	2b00      	cmp	r3, #0
 800a68a:	f000 8241 	beq.w	800ab10 <_dtoa_r+0xb18>
 800a68e:	601d      	str	r5, [r3, #0]
 800a690:	e23e      	b.n	800ab10 <_dtoa_r+0xb18>
 800a692:	f8cd a020 	str.w	sl, [sp, #32]
 800a696:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a69a:	2a39      	cmp	r2, #57	; 0x39
 800a69c:	f105 33ff 	add.w	r3, r5, #4294967295
 800a6a0:	d108      	bne.n	800a6b4 <_dtoa_r+0x6bc>
 800a6a2:	459b      	cmp	fp, r3
 800a6a4:	d10a      	bne.n	800a6bc <_dtoa_r+0x6c4>
 800a6a6:	9b08      	ldr	r3, [sp, #32]
 800a6a8:	3301      	adds	r3, #1
 800a6aa:	9308      	str	r3, [sp, #32]
 800a6ac:	2330      	movs	r3, #48	; 0x30
 800a6ae:	f88b 3000 	strb.w	r3, [fp]
 800a6b2:	465b      	mov	r3, fp
 800a6b4:	781a      	ldrb	r2, [r3, #0]
 800a6b6:	3201      	adds	r2, #1
 800a6b8:	701a      	strb	r2, [r3, #0]
 800a6ba:	e78c      	b.n	800a5d6 <_dtoa_r+0x5de>
 800a6bc:	461d      	mov	r5, r3
 800a6be:	e7ea      	b.n	800a696 <_dtoa_r+0x69e>
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	4b9b      	ldr	r3, [pc, #620]	; (800a930 <_dtoa_r+0x938>)
 800a6c4:	f7f5 ff98 	bl	80005f8 <__aeabi_dmul>
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	4606      	mov	r6, r0
 800a6ce:	460f      	mov	r7, r1
 800a6d0:	f7f6 f9fa 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6d4:	2800      	cmp	r0, #0
 800a6d6:	d09a      	beq.n	800a60e <_dtoa_r+0x616>
 800a6d8:	e7cb      	b.n	800a672 <_dtoa_r+0x67a>
 800a6da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6dc:	2a00      	cmp	r2, #0
 800a6de:	f000 808b 	beq.w	800a7f8 <_dtoa_r+0x800>
 800a6e2:	9a06      	ldr	r2, [sp, #24]
 800a6e4:	2a01      	cmp	r2, #1
 800a6e6:	dc6e      	bgt.n	800a7c6 <_dtoa_r+0x7ce>
 800a6e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a6ea:	2a00      	cmp	r2, #0
 800a6ec:	d067      	beq.n	800a7be <_dtoa_r+0x7c6>
 800a6ee:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a6f2:	9f07      	ldr	r7, [sp, #28]
 800a6f4:	9d05      	ldr	r5, [sp, #20]
 800a6f6:	9a05      	ldr	r2, [sp, #20]
 800a6f8:	2101      	movs	r1, #1
 800a6fa:	441a      	add	r2, r3
 800a6fc:	4620      	mov	r0, r4
 800a6fe:	9205      	str	r2, [sp, #20]
 800a700:	4498      	add	r8, r3
 800a702:	f000 fea2 	bl	800b44a <__i2b>
 800a706:	4606      	mov	r6, r0
 800a708:	2d00      	cmp	r5, #0
 800a70a:	dd0c      	ble.n	800a726 <_dtoa_r+0x72e>
 800a70c:	f1b8 0f00 	cmp.w	r8, #0
 800a710:	dd09      	ble.n	800a726 <_dtoa_r+0x72e>
 800a712:	4545      	cmp	r5, r8
 800a714:	9a05      	ldr	r2, [sp, #20]
 800a716:	462b      	mov	r3, r5
 800a718:	bfa8      	it	ge
 800a71a:	4643      	movge	r3, r8
 800a71c:	1ad2      	subs	r2, r2, r3
 800a71e:	9205      	str	r2, [sp, #20]
 800a720:	1aed      	subs	r5, r5, r3
 800a722:	eba8 0803 	sub.w	r8, r8, r3
 800a726:	9b07      	ldr	r3, [sp, #28]
 800a728:	b1eb      	cbz	r3, 800a766 <_dtoa_r+0x76e>
 800a72a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d067      	beq.n	800a800 <_dtoa_r+0x808>
 800a730:	b18f      	cbz	r7, 800a756 <_dtoa_r+0x75e>
 800a732:	4631      	mov	r1, r6
 800a734:	463a      	mov	r2, r7
 800a736:	4620      	mov	r0, r4
 800a738:	f000 ff26 	bl	800b588 <__pow5mult>
 800a73c:	9a04      	ldr	r2, [sp, #16]
 800a73e:	4601      	mov	r1, r0
 800a740:	4606      	mov	r6, r0
 800a742:	4620      	mov	r0, r4
 800a744:	f000 fe8a 	bl	800b45c <__multiply>
 800a748:	9904      	ldr	r1, [sp, #16]
 800a74a:	9008      	str	r0, [sp, #32]
 800a74c:	4620      	mov	r0, r4
 800a74e:	f000 fd9e 	bl	800b28e <_Bfree>
 800a752:	9b08      	ldr	r3, [sp, #32]
 800a754:	9304      	str	r3, [sp, #16]
 800a756:	9b07      	ldr	r3, [sp, #28]
 800a758:	1bda      	subs	r2, r3, r7
 800a75a:	d004      	beq.n	800a766 <_dtoa_r+0x76e>
 800a75c:	9904      	ldr	r1, [sp, #16]
 800a75e:	4620      	mov	r0, r4
 800a760:	f000 ff12 	bl	800b588 <__pow5mult>
 800a764:	9004      	str	r0, [sp, #16]
 800a766:	2101      	movs	r1, #1
 800a768:	4620      	mov	r0, r4
 800a76a:	f000 fe6e 	bl	800b44a <__i2b>
 800a76e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a770:	4607      	mov	r7, r0
 800a772:	2b00      	cmp	r3, #0
 800a774:	f000 81d0 	beq.w	800ab18 <_dtoa_r+0xb20>
 800a778:	461a      	mov	r2, r3
 800a77a:	4601      	mov	r1, r0
 800a77c:	4620      	mov	r0, r4
 800a77e:	f000 ff03 	bl	800b588 <__pow5mult>
 800a782:	9b06      	ldr	r3, [sp, #24]
 800a784:	2b01      	cmp	r3, #1
 800a786:	4607      	mov	r7, r0
 800a788:	dc40      	bgt.n	800a80c <_dtoa_r+0x814>
 800a78a:	9b00      	ldr	r3, [sp, #0]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d139      	bne.n	800a804 <_dtoa_r+0x80c>
 800a790:	9b01      	ldr	r3, [sp, #4]
 800a792:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a796:	2b00      	cmp	r3, #0
 800a798:	d136      	bne.n	800a808 <_dtoa_r+0x810>
 800a79a:	9b01      	ldr	r3, [sp, #4]
 800a79c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a7a0:	0d1b      	lsrs	r3, r3, #20
 800a7a2:	051b      	lsls	r3, r3, #20
 800a7a4:	b12b      	cbz	r3, 800a7b2 <_dtoa_r+0x7ba>
 800a7a6:	9b05      	ldr	r3, [sp, #20]
 800a7a8:	3301      	adds	r3, #1
 800a7aa:	9305      	str	r3, [sp, #20]
 800a7ac:	f108 0801 	add.w	r8, r8, #1
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	9307      	str	r3, [sp, #28]
 800a7b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d12a      	bne.n	800a810 <_dtoa_r+0x818>
 800a7ba:	2001      	movs	r0, #1
 800a7bc:	e030      	b.n	800a820 <_dtoa_r+0x828>
 800a7be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a7c0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a7c4:	e795      	b.n	800a6f2 <_dtoa_r+0x6fa>
 800a7c6:	9b07      	ldr	r3, [sp, #28]
 800a7c8:	f109 37ff 	add.w	r7, r9, #4294967295
 800a7cc:	42bb      	cmp	r3, r7
 800a7ce:	bfbf      	itttt	lt
 800a7d0:	9b07      	ldrlt	r3, [sp, #28]
 800a7d2:	9707      	strlt	r7, [sp, #28]
 800a7d4:	1afa      	sublt	r2, r7, r3
 800a7d6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a7d8:	bfbb      	ittet	lt
 800a7da:	189b      	addlt	r3, r3, r2
 800a7dc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a7de:	1bdf      	subge	r7, r3, r7
 800a7e0:	2700      	movlt	r7, #0
 800a7e2:	f1b9 0f00 	cmp.w	r9, #0
 800a7e6:	bfb5      	itete	lt
 800a7e8:	9b05      	ldrlt	r3, [sp, #20]
 800a7ea:	9d05      	ldrge	r5, [sp, #20]
 800a7ec:	eba3 0509 	sublt.w	r5, r3, r9
 800a7f0:	464b      	movge	r3, r9
 800a7f2:	bfb8      	it	lt
 800a7f4:	2300      	movlt	r3, #0
 800a7f6:	e77e      	b.n	800a6f6 <_dtoa_r+0x6fe>
 800a7f8:	9f07      	ldr	r7, [sp, #28]
 800a7fa:	9d05      	ldr	r5, [sp, #20]
 800a7fc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a7fe:	e783      	b.n	800a708 <_dtoa_r+0x710>
 800a800:	9a07      	ldr	r2, [sp, #28]
 800a802:	e7ab      	b.n	800a75c <_dtoa_r+0x764>
 800a804:	2300      	movs	r3, #0
 800a806:	e7d4      	b.n	800a7b2 <_dtoa_r+0x7ba>
 800a808:	9b00      	ldr	r3, [sp, #0]
 800a80a:	e7d2      	b.n	800a7b2 <_dtoa_r+0x7ba>
 800a80c:	2300      	movs	r3, #0
 800a80e:	9307      	str	r3, [sp, #28]
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a816:	6918      	ldr	r0, [r3, #16]
 800a818:	f000 fdc9 	bl	800b3ae <__hi0bits>
 800a81c:	f1c0 0020 	rsb	r0, r0, #32
 800a820:	4440      	add	r0, r8
 800a822:	f010 001f 	ands.w	r0, r0, #31
 800a826:	d047      	beq.n	800a8b8 <_dtoa_r+0x8c0>
 800a828:	f1c0 0320 	rsb	r3, r0, #32
 800a82c:	2b04      	cmp	r3, #4
 800a82e:	dd3b      	ble.n	800a8a8 <_dtoa_r+0x8b0>
 800a830:	9b05      	ldr	r3, [sp, #20]
 800a832:	f1c0 001c 	rsb	r0, r0, #28
 800a836:	4403      	add	r3, r0
 800a838:	9305      	str	r3, [sp, #20]
 800a83a:	4405      	add	r5, r0
 800a83c:	4480      	add	r8, r0
 800a83e:	9b05      	ldr	r3, [sp, #20]
 800a840:	2b00      	cmp	r3, #0
 800a842:	dd05      	ble.n	800a850 <_dtoa_r+0x858>
 800a844:	461a      	mov	r2, r3
 800a846:	9904      	ldr	r1, [sp, #16]
 800a848:	4620      	mov	r0, r4
 800a84a:	f000 feeb 	bl	800b624 <__lshift>
 800a84e:	9004      	str	r0, [sp, #16]
 800a850:	f1b8 0f00 	cmp.w	r8, #0
 800a854:	dd05      	ble.n	800a862 <_dtoa_r+0x86a>
 800a856:	4639      	mov	r1, r7
 800a858:	4642      	mov	r2, r8
 800a85a:	4620      	mov	r0, r4
 800a85c:	f000 fee2 	bl	800b624 <__lshift>
 800a860:	4607      	mov	r7, r0
 800a862:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a864:	b353      	cbz	r3, 800a8bc <_dtoa_r+0x8c4>
 800a866:	4639      	mov	r1, r7
 800a868:	9804      	ldr	r0, [sp, #16]
 800a86a:	f000 ff2f 	bl	800b6cc <__mcmp>
 800a86e:	2800      	cmp	r0, #0
 800a870:	da24      	bge.n	800a8bc <_dtoa_r+0x8c4>
 800a872:	2300      	movs	r3, #0
 800a874:	220a      	movs	r2, #10
 800a876:	9904      	ldr	r1, [sp, #16]
 800a878:	4620      	mov	r0, r4
 800a87a:	f000 fd1f 	bl	800b2bc <__multadd>
 800a87e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a880:	9004      	str	r0, [sp, #16]
 800a882:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a886:	2b00      	cmp	r3, #0
 800a888:	f000 814d 	beq.w	800ab26 <_dtoa_r+0xb2e>
 800a88c:	2300      	movs	r3, #0
 800a88e:	4631      	mov	r1, r6
 800a890:	220a      	movs	r2, #10
 800a892:	4620      	mov	r0, r4
 800a894:	f000 fd12 	bl	800b2bc <__multadd>
 800a898:	9b02      	ldr	r3, [sp, #8]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	4606      	mov	r6, r0
 800a89e:	dc4f      	bgt.n	800a940 <_dtoa_r+0x948>
 800a8a0:	9b06      	ldr	r3, [sp, #24]
 800a8a2:	2b02      	cmp	r3, #2
 800a8a4:	dd4c      	ble.n	800a940 <_dtoa_r+0x948>
 800a8a6:	e011      	b.n	800a8cc <_dtoa_r+0x8d4>
 800a8a8:	d0c9      	beq.n	800a83e <_dtoa_r+0x846>
 800a8aa:	9a05      	ldr	r2, [sp, #20]
 800a8ac:	331c      	adds	r3, #28
 800a8ae:	441a      	add	r2, r3
 800a8b0:	9205      	str	r2, [sp, #20]
 800a8b2:	441d      	add	r5, r3
 800a8b4:	4498      	add	r8, r3
 800a8b6:	e7c2      	b.n	800a83e <_dtoa_r+0x846>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	e7f6      	b.n	800a8aa <_dtoa_r+0x8b2>
 800a8bc:	f1b9 0f00 	cmp.w	r9, #0
 800a8c0:	dc38      	bgt.n	800a934 <_dtoa_r+0x93c>
 800a8c2:	9b06      	ldr	r3, [sp, #24]
 800a8c4:	2b02      	cmp	r3, #2
 800a8c6:	dd35      	ble.n	800a934 <_dtoa_r+0x93c>
 800a8c8:	f8cd 9008 	str.w	r9, [sp, #8]
 800a8cc:	9b02      	ldr	r3, [sp, #8]
 800a8ce:	b963      	cbnz	r3, 800a8ea <_dtoa_r+0x8f2>
 800a8d0:	4639      	mov	r1, r7
 800a8d2:	2205      	movs	r2, #5
 800a8d4:	4620      	mov	r0, r4
 800a8d6:	f000 fcf1 	bl	800b2bc <__multadd>
 800a8da:	4601      	mov	r1, r0
 800a8dc:	4607      	mov	r7, r0
 800a8de:	9804      	ldr	r0, [sp, #16]
 800a8e0:	f000 fef4 	bl	800b6cc <__mcmp>
 800a8e4:	2800      	cmp	r0, #0
 800a8e6:	f73f adcc 	bgt.w	800a482 <_dtoa_r+0x48a>
 800a8ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8ec:	465d      	mov	r5, fp
 800a8ee:	ea6f 0a03 	mvn.w	sl, r3
 800a8f2:	f04f 0900 	mov.w	r9, #0
 800a8f6:	4639      	mov	r1, r7
 800a8f8:	4620      	mov	r0, r4
 800a8fa:	f000 fcc8 	bl	800b28e <_Bfree>
 800a8fe:	2e00      	cmp	r6, #0
 800a900:	f43f aeb7 	beq.w	800a672 <_dtoa_r+0x67a>
 800a904:	f1b9 0f00 	cmp.w	r9, #0
 800a908:	d005      	beq.n	800a916 <_dtoa_r+0x91e>
 800a90a:	45b1      	cmp	r9, r6
 800a90c:	d003      	beq.n	800a916 <_dtoa_r+0x91e>
 800a90e:	4649      	mov	r1, r9
 800a910:	4620      	mov	r0, r4
 800a912:	f000 fcbc 	bl	800b28e <_Bfree>
 800a916:	4631      	mov	r1, r6
 800a918:	4620      	mov	r0, r4
 800a91a:	f000 fcb8 	bl	800b28e <_Bfree>
 800a91e:	e6a8      	b.n	800a672 <_dtoa_r+0x67a>
 800a920:	2700      	movs	r7, #0
 800a922:	463e      	mov	r6, r7
 800a924:	e7e1      	b.n	800a8ea <_dtoa_r+0x8f2>
 800a926:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a92a:	463e      	mov	r6, r7
 800a92c:	e5a9      	b.n	800a482 <_dtoa_r+0x48a>
 800a92e:	bf00      	nop
 800a930:	40240000 	.word	0x40240000
 800a934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a936:	f8cd 9008 	str.w	r9, [sp, #8]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	f000 80fa 	beq.w	800ab34 <_dtoa_r+0xb3c>
 800a940:	2d00      	cmp	r5, #0
 800a942:	dd05      	ble.n	800a950 <_dtoa_r+0x958>
 800a944:	4631      	mov	r1, r6
 800a946:	462a      	mov	r2, r5
 800a948:	4620      	mov	r0, r4
 800a94a:	f000 fe6b 	bl	800b624 <__lshift>
 800a94e:	4606      	mov	r6, r0
 800a950:	9b07      	ldr	r3, [sp, #28]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d04c      	beq.n	800a9f0 <_dtoa_r+0x9f8>
 800a956:	6871      	ldr	r1, [r6, #4]
 800a958:	4620      	mov	r0, r4
 800a95a:	f000 fc64 	bl	800b226 <_Balloc>
 800a95e:	6932      	ldr	r2, [r6, #16]
 800a960:	3202      	adds	r2, #2
 800a962:	4605      	mov	r5, r0
 800a964:	0092      	lsls	r2, r2, #2
 800a966:	f106 010c 	add.w	r1, r6, #12
 800a96a:	300c      	adds	r0, #12
 800a96c:	f000 fc50 	bl	800b210 <memcpy>
 800a970:	2201      	movs	r2, #1
 800a972:	4629      	mov	r1, r5
 800a974:	4620      	mov	r0, r4
 800a976:	f000 fe55 	bl	800b624 <__lshift>
 800a97a:	9b00      	ldr	r3, [sp, #0]
 800a97c:	f8cd b014 	str.w	fp, [sp, #20]
 800a980:	f003 0301 	and.w	r3, r3, #1
 800a984:	46b1      	mov	r9, r6
 800a986:	9307      	str	r3, [sp, #28]
 800a988:	4606      	mov	r6, r0
 800a98a:	4639      	mov	r1, r7
 800a98c:	9804      	ldr	r0, [sp, #16]
 800a98e:	f7ff faa7 	bl	8009ee0 <quorem>
 800a992:	4649      	mov	r1, r9
 800a994:	4605      	mov	r5, r0
 800a996:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a99a:	9804      	ldr	r0, [sp, #16]
 800a99c:	f000 fe96 	bl	800b6cc <__mcmp>
 800a9a0:	4632      	mov	r2, r6
 800a9a2:	9000      	str	r0, [sp, #0]
 800a9a4:	4639      	mov	r1, r7
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	f000 feaa 	bl	800b700 <__mdiff>
 800a9ac:	68c3      	ldr	r3, [r0, #12]
 800a9ae:	4602      	mov	r2, r0
 800a9b0:	bb03      	cbnz	r3, 800a9f4 <_dtoa_r+0x9fc>
 800a9b2:	4601      	mov	r1, r0
 800a9b4:	9008      	str	r0, [sp, #32]
 800a9b6:	9804      	ldr	r0, [sp, #16]
 800a9b8:	f000 fe88 	bl	800b6cc <__mcmp>
 800a9bc:	9a08      	ldr	r2, [sp, #32]
 800a9be:	4603      	mov	r3, r0
 800a9c0:	4611      	mov	r1, r2
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	9308      	str	r3, [sp, #32]
 800a9c6:	f000 fc62 	bl	800b28e <_Bfree>
 800a9ca:	9b08      	ldr	r3, [sp, #32]
 800a9cc:	b9a3      	cbnz	r3, 800a9f8 <_dtoa_r+0xa00>
 800a9ce:	9a06      	ldr	r2, [sp, #24]
 800a9d0:	b992      	cbnz	r2, 800a9f8 <_dtoa_r+0xa00>
 800a9d2:	9a07      	ldr	r2, [sp, #28]
 800a9d4:	b982      	cbnz	r2, 800a9f8 <_dtoa_r+0xa00>
 800a9d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a9da:	d029      	beq.n	800aa30 <_dtoa_r+0xa38>
 800a9dc:	9b00      	ldr	r3, [sp, #0]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	dd01      	ble.n	800a9e6 <_dtoa_r+0x9ee>
 800a9e2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a9e6:	9b05      	ldr	r3, [sp, #20]
 800a9e8:	1c5d      	adds	r5, r3, #1
 800a9ea:	f883 8000 	strb.w	r8, [r3]
 800a9ee:	e782      	b.n	800a8f6 <_dtoa_r+0x8fe>
 800a9f0:	4630      	mov	r0, r6
 800a9f2:	e7c2      	b.n	800a97a <_dtoa_r+0x982>
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	e7e3      	b.n	800a9c0 <_dtoa_r+0x9c8>
 800a9f8:	9a00      	ldr	r2, [sp, #0]
 800a9fa:	2a00      	cmp	r2, #0
 800a9fc:	db04      	blt.n	800aa08 <_dtoa_r+0xa10>
 800a9fe:	d125      	bne.n	800aa4c <_dtoa_r+0xa54>
 800aa00:	9a06      	ldr	r2, [sp, #24]
 800aa02:	bb1a      	cbnz	r2, 800aa4c <_dtoa_r+0xa54>
 800aa04:	9a07      	ldr	r2, [sp, #28]
 800aa06:	bb0a      	cbnz	r2, 800aa4c <_dtoa_r+0xa54>
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	ddec      	ble.n	800a9e6 <_dtoa_r+0x9ee>
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	9904      	ldr	r1, [sp, #16]
 800aa10:	4620      	mov	r0, r4
 800aa12:	f000 fe07 	bl	800b624 <__lshift>
 800aa16:	4639      	mov	r1, r7
 800aa18:	9004      	str	r0, [sp, #16]
 800aa1a:	f000 fe57 	bl	800b6cc <__mcmp>
 800aa1e:	2800      	cmp	r0, #0
 800aa20:	dc03      	bgt.n	800aa2a <_dtoa_r+0xa32>
 800aa22:	d1e0      	bne.n	800a9e6 <_dtoa_r+0x9ee>
 800aa24:	f018 0f01 	tst.w	r8, #1
 800aa28:	d0dd      	beq.n	800a9e6 <_dtoa_r+0x9ee>
 800aa2a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800aa2e:	d1d8      	bne.n	800a9e2 <_dtoa_r+0x9ea>
 800aa30:	9b05      	ldr	r3, [sp, #20]
 800aa32:	9a05      	ldr	r2, [sp, #20]
 800aa34:	1c5d      	adds	r5, r3, #1
 800aa36:	2339      	movs	r3, #57	; 0x39
 800aa38:	7013      	strb	r3, [r2, #0]
 800aa3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aa3e:	2b39      	cmp	r3, #57	; 0x39
 800aa40:	f105 32ff 	add.w	r2, r5, #4294967295
 800aa44:	d04f      	beq.n	800aae6 <_dtoa_r+0xaee>
 800aa46:	3301      	adds	r3, #1
 800aa48:	7013      	strb	r3, [r2, #0]
 800aa4a:	e754      	b.n	800a8f6 <_dtoa_r+0x8fe>
 800aa4c:	9a05      	ldr	r2, [sp, #20]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	f102 0501 	add.w	r5, r2, #1
 800aa54:	dd06      	ble.n	800aa64 <_dtoa_r+0xa6c>
 800aa56:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800aa5a:	d0e9      	beq.n	800aa30 <_dtoa_r+0xa38>
 800aa5c:	f108 0801 	add.w	r8, r8, #1
 800aa60:	9b05      	ldr	r3, [sp, #20]
 800aa62:	e7c2      	b.n	800a9ea <_dtoa_r+0x9f2>
 800aa64:	9a02      	ldr	r2, [sp, #8]
 800aa66:	f805 8c01 	strb.w	r8, [r5, #-1]
 800aa6a:	eba5 030b 	sub.w	r3, r5, fp
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d021      	beq.n	800aab6 <_dtoa_r+0xabe>
 800aa72:	2300      	movs	r3, #0
 800aa74:	220a      	movs	r2, #10
 800aa76:	9904      	ldr	r1, [sp, #16]
 800aa78:	4620      	mov	r0, r4
 800aa7a:	f000 fc1f 	bl	800b2bc <__multadd>
 800aa7e:	45b1      	cmp	r9, r6
 800aa80:	9004      	str	r0, [sp, #16]
 800aa82:	f04f 0300 	mov.w	r3, #0
 800aa86:	f04f 020a 	mov.w	r2, #10
 800aa8a:	4649      	mov	r1, r9
 800aa8c:	4620      	mov	r0, r4
 800aa8e:	d105      	bne.n	800aa9c <_dtoa_r+0xaa4>
 800aa90:	f000 fc14 	bl	800b2bc <__multadd>
 800aa94:	4681      	mov	r9, r0
 800aa96:	4606      	mov	r6, r0
 800aa98:	9505      	str	r5, [sp, #20]
 800aa9a:	e776      	b.n	800a98a <_dtoa_r+0x992>
 800aa9c:	f000 fc0e 	bl	800b2bc <__multadd>
 800aaa0:	4631      	mov	r1, r6
 800aaa2:	4681      	mov	r9, r0
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	220a      	movs	r2, #10
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	f000 fc07 	bl	800b2bc <__multadd>
 800aaae:	4606      	mov	r6, r0
 800aab0:	e7f2      	b.n	800aa98 <_dtoa_r+0xaa0>
 800aab2:	f04f 0900 	mov.w	r9, #0
 800aab6:	2201      	movs	r2, #1
 800aab8:	9904      	ldr	r1, [sp, #16]
 800aaba:	4620      	mov	r0, r4
 800aabc:	f000 fdb2 	bl	800b624 <__lshift>
 800aac0:	4639      	mov	r1, r7
 800aac2:	9004      	str	r0, [sp, #16]
 800aac4:	f000 fe02 	bl	800b6cc <__mcmp>
 800aac8:	2800      	cmp	r0, #0
 800aaca:	dcb6      	bgt.n	800aa3a <_dtoa_r+0xa42>
 800aacc:	d102      	bne.n	800aad4 <_dtoa_r+0xadc>
 800aace:	f018 0f01 	tst.w	r8, #1
 800aad2:	d1b2      	bne.n	800aa3a <_dtoa_r+0xa42>
 800aad4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aad8:	2b30      	cmp	r3, #48	; 0x30
 800aada:	f105 32ff 	add.w	r2, r5, #4294967295
 800aade:	f47f af0a 	bne.w	800a8f6 <_dtoa_r+0x8fe>
 800aae2:	4615      	mov	r5, r2
 800aae4:	e7f6      	b.n	800aad4 <_dtoa_r+0xadc>
 800aae6:	4593      	cmp	fp, r2
 800aae8:	d105      	bne.n	800aaf6 <_dtoa_r+0xafe>
 800aaea:	2331      	movs	r3, #49	; 0x31
 800aaec:	f10a 0a01 	add.w	sl, sl, #1
 800aaf0:	f88b 3000 	strb.w	r3, [fp]
 800aaf4:	e6ff      	b.n	800a8f6 <_dtoa_r+0x8fe>
 800aaf6:	4615      	mov	r5, r2
 800aaf8:	e79f      	b.n	800aa3a <_dtoa_r+0xa42>
 800aafa:	f8df b064 	ldr.w	fp, [pc, #100]	; 800ab60 <_dtoa_r+0xb68>
 800aafe:	e007      	b.n	800ab10 <_dtoa_r+0xb18>
 800ab00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab02:	f8df b060 	ldr.w	fp, [pc, #96]	; 800ab64 <_dtoa_r+0xb6c>
 800ab06:	b11b      	cbz	r3, 800ab10 <_dtoa_r+0xb18>
 800ab08:	f10b 0308 	add.w	r3, fp, #8
 800ab0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ab0e:	6013      	str	r3, [r2, #0]
 800ab10:	4658      	mov	r0, fp
 800ab12:	b017      	add	sp, #92	; 0x5c
 800ab14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab18:	9b06      	ldr	r3, [sp, #24]
 800ab1a:	2b01      	cmp	r3, #1
 800ab1c:	f77f ae35 	ble.w	800a78a <_dtoa_r+0x792>
 800ab20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab22:	9307      	str	r3, [sp, #28]
 800ab24:	e649      	b.n	800a7ba <_dtoa_r+0x7c2>
 800ab26:	9b02      	ldr	r3, [sp, #8]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	dc03      	bgt.n	800ab34 <_dtoa_r+0xb3c>
 800ab2c:	9b06      	ldr	r3, [sp, #24]
 800ab2e:	2b02      	cmp	r3, #2
 800ab30:	f73f aecc 	bgt.w	800a8cc <_dtoa_r+0x8d4>
 800ab34:	465d      	mov	r5, fp
 800ab36:	4639      	mov	r1, r7
 800ab38:	9804      	ldr	r0, [sp, #16]
 800ab3a:	f7ff f9d1 	bl	8009ee0 <quorem>
 800ab3e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ab42:	f805 8b01 	strb.w	r8, [r5], #1
 800ab46:	9a02      	ldr	r2, [sp, #8]
 800ab48:	eba5 030b 	sub.w	r3, r5, fp
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	ddb0      	ble.n	800aab2 <_dtoa_r+0xaba>
 800ab50:	2300      	movs	r3, #0
 800ab52:	220a      	movs	r2, #10
 800ab54:	9904      	ldr	r1, [sp, #16]
 800ab56:	4620      	mov	r0, r4
 800ab58:	f000 fbb0 	bl	800b2bc <__multadd>
 800ab5c:	9004      	str	r0, [sp, #16]
 800ab5e:	e7ea      	b.n	800ab36 <_dtoa_r+0xb3e>
 800ab60:	0800c598 	.word	0x0800c598
 800ab64:	0800c618 	.word	0x0800c618

0800ab68 <rshift>:
 800ab68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab6a:	6906      	ldr	r6, [r0, #16]
 800ab6c:	114b      	asrs	r3, r1, #5
 800ab6e:	429e      	cmp	r6, r3
 800ab70:	f100 0414 	add.w	r4, r0, #20
 800ab74:	dd30      	ble.n	800abd8 <rshift+0x70>
 800ab76:	f011 011f 	ands.w	r1, r1, #31
 800ab7a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800ab7e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800ab82:	d108      	bne.n	800ab96 <rshift+0x2e>
 800ab84:	4621      	mov	r1, r4
 800ab86:	42b2      	cmp	r2, r6
 800ab88:	460b      	mov	r3, r1
 800ab8a:	d211      	bcs.n	800abb0 <rshift+0x48>
 800ab8c:	f852 3b04 	ldr.w	r3, [r2], #4
 800ab90:	f841 3b04 	str.w	r3, [r1], #4
 800ab94:	e7f7      	b.n	800ab86 <rshift+0x1e>
 800ab96:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800ab9a:	f1c1 0c20 	rsb	ip, r1, #32
 800ab9e:	40cd      	lsrs	r5, r1
 800aba0:	3204      	adds	r2, #4
 800aba2:	4623      	mov	r3, r4
 800aba4:	42b2      	cmp	r2, r6
 800aba6:	4617      	mov	r7, r2
 800aba8:	d30c      	bcc.n	800abc4 <rshift+0x5c>
 800abaa:	601d      	str	r5, [r3, #0]
 800abac:	b105      	cbz	r5, 800abb0 <rshift+0x48>
 800abae:	3304      	adds	r3, #4
 800abb0:	1b1a      	subs	r2, r3, r4
 800abb2:	42a3      	cmp	r3, r4
 800abb4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800abb8:	bf08      	it	eq
 800abba:	2300      	moveq	r3, #0
 800abbc:	6102      	str	r2, [r0, #16]
 800abbe:	bf08      	it	eq
 800abc0:	6143      	streq	r3, [r0, #20]
 800abc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abc4:	683f      	ldr	r7, [r7, #0]
 800abc6:	fa07 f70c 	lsl.w	r7, r7, ip
 800abca:	433d      	orrs	r5, r7
 800abcc:	f843 5b04 	str.w	r5, [r3], #4
 800abd0:	f852 5b04 	ldr.w	r5, [r2], #4
 800abd4:	40cd      	lsrs	r5, r1
 800abd6:	e7e5      	b.n	800aba4 <rshift+0x3c>
 800abd8:	4623      	mov	r3, r4
 800abda:	e7e9      	b.n	800abb0 <rshift+0x48>

0800abdc <__hexdig_fun>:
 800abdc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800abe0:	2b09      	cmp	r3, #9
 800abe2:	d802      	bhi.n	800abea <__hexdig_fun+0xe>
 800abe4:	3820      	subs	r0, #32
 800abe6:	b2c0      	uxtb	r0, r0
 800abe8:	4770      	bx	lr
 800abea:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800abee:	2b05      	cmp	r3, #5
 800abf0:	d801      	bhi.n	800abf6 <__hexdig_fun+0x1a>
 800abf2:	3847      	subs	r0, #71	; 0x47
 800abf4:	e7f7      	b.n	800abe6 <__hexdig_fun+0xa>
 800abf6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800abfa:	2b05      	cmp	r3, #5
 800abfc:	d801      	bhi.n	800ac02 <__hexdig_fun+0x26>
 800abfe:	3827      	subs	r0, #39	; 0x27
 800ac00:	e7f1      	b.n	800abe6 <__hexdig_fun+0xa>
 800ac02:	2000      	movs	r0, #0
 800ac04:	4770      	bx	lr

0800ac06 <__gethex>:
 800ac06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac0a:	b08b      	sub	sp, #44	; 0x2c
 800ac0c:	468a      	mov	sl, r1
 800ac0e:	9002      	str	r0, [sp, #8]
 800ac10:	9816      	ldr	r0, [sp, #88]	; 0x58
 800ac12:	9306      	str	r3, [sp, #24]
 800ac14:	4690      	mov	r8, r2
 800ac16:	f000 fad0 	bl	800b1ba <__localeconv_l>
 800ac1a:	6803      	ldr	r3, [r0, #0]
 800ac1c:	9303      	str	r3, [sp, #12]
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f7f5 fb26 	bl	8000270 <strlen>
 800ac24:	9b03      	ldr	r3, [sp, #12]
 800ac26:	9001      	str	r0, [sp, #4]
 800ac28:	4403      	add	r3, r0
 800ac2a:	f04f 0b00 	mov.w	fp, #0
 800ac2e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ac32:	9307      	str	r3, [sp, #28]
 800ac34:	f8da 3000 	ldr.w	r3, [sl]
 800ac38:	3302      	adds	r3, #2
 800ac3a:	461f      	mov	r7, r3
 800ac3c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ac40:	2830      	cmp	r0, #48	; 0x30
 800ac42:	d06c      	beq.n	800ad1e <__gethex+0x118>
 800ac44:	f7ff ffca 	bl	800abdc <__hexdig_fun>
 800ac48:	4604      	mov	r4, r0
 800ac4a:	2800      	cmp	r0, #0
 800ac4c:	d16a      	bne.n	800ad24 <__gethex+0x11e>
 800ac4e:	9a01      	ldr	r2, [sp, #4]
 800ac50:	9903      	ldr	r1, [sp, #12]
 800ac52:	4638      	mov	r0, r7
 800ac54:	f7fe fa59 	bl	800910a <strncmp>
 800ac58:	2800      	cmp	r0, #0
 800ac5a:	d166      	bne.n	800ad2a <__gethex+0x124>
 800ac5c:	9b01      	ldr	r3, [sp, #4]
 800ac5e:	5cf8      	ldrb	r0, [r7, r3]
 800ac60:	18fe      	adds	r6, r7, r3
 800ac62:	f7ff ffbb 	bl	800abdc <__hexdig_fun>
 800ac66:	2800      	cmp	r0, #0
 800ac68:	d062      	beq.n	800ad30 <__gethex+0x12a>
 800ac6a:	4633      	mov	r3, r6
 800ac6c:	7818      	ldrb	r0, [r3, #0]
 800ac6e:	2830      	cmp	r0, #48	; 0x30
 800ac70:	461f      	mov	r7, r3
 800ac72:	f103 0301 	add.w	r3, r3, #1
 800ac76:	d0f9      	beq.n	800ac6c <__gethex+0x66>
 800ac78:	f7ff ffb0 	bl	800abdc <__hexdig_fun>
 800ac7c:	fab0 f580 	clz	r5, r0
 800ac80:	096d      	lsrs	r5, r5, #5
 800ac82:	4634      	mov	r4, r6
 800ac84:	f04f 0b01 	mov.w	fp, #1
 800ac88:	463a      	mov	r2, r7
 800ac8a:	4616      	mov	r6, r2
 800ac8c:	3201      	adds	r2, #1
 800ac8e:	7830      	ldrb	r0, [r6, #0]
 800ac90:	f7ff ffa4 	bl	800abdc <__hexdig_fun>
 800ac94:	2800      	cmp	r0, #0
 800ac96:	d1f8      	bne.n	800ac8a <__gethex+0x84>
 800ac98:	9a01      	ldr	r2, [sp, #4]
 800ac9a:	9903      	ldr	r1, [sp, #12]
 800ac9c:	4630      	mov	r0, r6
 800ac9e:	f7fe fa34 	bl	800910a <strncmp>
 800aca2:	b950      	cbnz	r0, 800acba <__gethex+0xb4>
 800aca4:	b954      	cbnz	r4, 800acbc <__gethex+0xb6>
 800aca6:	9b01      	ldr	r3, [sp, #4]
 800aca8:	18f4      	adds	r4, r6, r3
 800acaa:	4622      	mov	r2, r4
 800acac:	4616      	mov	r6, r2
 800acae:	3201      	adds	r2, #1
 800acb0:	7830      	ldrb	r0, [r6, #0]
 800acb2:	f7ff ff93 	bl	800abdc <__hexdig_fun>
 800acb6:	2800      	cmp	r0, #0
 800acb8:	d1f8      	bne.n	800acac <__gethex+0xa6>
 800acba:	b10c      	cbz	r4, 800acc0 <__gethex+0xba>
 800acbc:	1ba4      	subs	r4, r4, r6
 800acbe:	00a4      	lsls	r4, r4, #2
 800acc0:	7833      	ldrb	r3, [r6, #0]
 800acc2:	2b50      	cmp	r3, #80	; 0x50
 800acc4:	d001      	beq.n	800acca <__gethex+0xc4>
 800acc6:	2b70      	cmp	r3, #112	; 0x70
 800acc8:	d140      	bne.n	800ad4c <__gethex+0x146>
 800acca:	7873      	ldrb	r3, [r6, #1]
 800accc:	2b2b      	cmp	r3, #43	; 0x2b
 800acce:	d031      	beq.n	800ad34 <__gethex+0x12e>
 800acd0:	2b2d      	cmp	r3, #45	; 0x2d
 800acd2:	d033      	beq.n	800ad3c <__gethex+0x136>
 800acd4:	1c71      	adds	r1, r6, #1
 800acd6:	f04f 0900 	mov.w	r9, #0
 800acda:	7808      	ldrb	r0, [r1, #0]
 800acdc:	f7ff ff7e 	bl	800abdc <__hexdig_fun>
 800ace0:	1e43      	subs	r3, r0, #1
 800ace2:	b2db      	uxtb	r3, r3
 800ace4:	2b18      	cmp	r3, #24
 800ace6:	d831      	bhi.n	800ad4c <__gethex+0x146>
 800ace8:	f1a0 0210 	sub.w	r2, r0, #16
 800acec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800acf0:	f7ff ff74 	bl	800abdc <__hexdig_fun>
 800acf4:	1e43      	subs	r3, r0, #1
 800acf6:	b2db      	uxtb	r3, r3
 800acf8:	2b18      	cmp	r3, #24
 800acfa:	d922      	bls.n	800ad42 <__gethex+0x13c>
 800acfc:	f1b9 0f00 	cmp.w	r9, #0
 800ad00:	d000      	beq.n	800ad04 <__gethex+0xfe>
 800ad02:	4252      	negs	r2, r2
 800ad04:	4414      	add	r4, r2
 800ad06:	f8ca 1000 	str.w	r1, [sl]
 800ad0a:	b30d      	cbz	r5, 800ad50 <__gethex+0x14a>
 800ad0c:	f1bb 0f00 	cmp.w	fp, #0
 800ad10:	bf0c      	ite	eq
 800ad12:	2706      	moveq	r7, #6
 800ad14:	2700      	movne	r7, #0
 800ad16:	4638      	mov	r0, r7
 800ad18:	b00b      	add	sp, #44	; 0x2c
 800ad1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad1e:	f10b 0b01 	add.w	fp, fp, #1
 800ad22:	e78a      	b.n	800ac3a <__gethex+0x34>
 800ad24:	2500      	movs	r5, #0
 800ad26:	462c      	mov	r4, r5
 800ad28:	e7ae      	b.n	800ac88 <__gethex+0x82>
 800ad2a:	463e      	mov	r6, r7
 800ad2c:	2501      	movs	r5, #1
 800ad2e:	e7c7      	b.n	800acc0 <__gethex+0xba>
 800ad30:	4604      	mov	r4, r0
 800ad32:	e7fb      	b.n	800ad2c <__gethex+0x126>
 800ad34:	f04f 0900 	mov.w	r9, #0
 800ad38:	1cb1      	adds	r1, r6, #2
 800ad3a:	e7ce      	b.n	800acda <__gethex+0xd4>
 800ad3c:	f04f 0901 	mov.w	r9, #1
 800ad40:	e7fa      	b.n	800ad38 <__gethex+0x132>
 800ad42:	230a      	movs	r3, #10
 800ad44:	fb03 0202 	mla	r2, r3, r2, r0
 800ad48:	3a10      	subs	r2, #16
 800ad4a:	e7cf      	b.n	800acec <__gethex+0xe6>
 800ad4c:	4631      	mov	r1, r6
 800ad4e:	e7da      	b.n	800ad06 <__gethex+0x100>
 800ad50:	1bf3      	subs	r3, r6, r7
 800ad52:	3b01      	subs	r3, #1
 800ad54:	4629      	mov	r1, r5
 800ad56:	2b07      	cmp	r3, #7
 800ad58:	dc49      	bgt.n	800adee <__gethex+0x1e8>
 800ad5a:	9802      	ldr	r0, [sp, #8]
 800ad5c:	f000 fa63 	bl	800b226 <_Balloc>
 800ad60:	9b01      	ldr	r3, [sp, #4]
 800ad62:	f100 0914 	add.w	r9, r0, #20
 800ad66:	f04f 0b00 	mov.w	fp, #0
 800ad6a:	f1c3 0301 	rsb	r3, r3, #1
 800ad6e:	4605      	mov	r5, r0
 800ad70:	f8cd 9010 	str.w	r9, [sp, #16]
 800ad74:	46da      	mov	sl, fp
 800ad76:	9308      	str	r3, [sp, #32]
 800ad78:	42b7      	cmp	r7, r6
 800ad7a:	d33b      	bcc.n	800adf4 <__gethex+0x1ee>
 800ad7c:	9804      	ldr	r0, [sp, #16]
 800ad7e:	f840 ab04 	str.w	sl, [r0], #4
 800ad82:	eba0 0009 	sub.w	r0, r0, r9
 800ad86:	1080      	asrs	r0, r0, #2
 800ad88:	6128      	str	r0, [r5, #16]
 800ad8a:	0147      	lsls	r7, r0, #5
 800ad8c:	4650      	mov	r0, sl
 800ad8e:	f000 fb0e 	bl	800b3ae <__hi0bits>
 800ad92:	f8d8 6000 	ldr.w	r6, [r8]
 800ad96:	1a3f      	subs	r7, r7, r0
 800ad98:	42b7      	cmp	r7, r6
 800ad9a:	dd64      	ble.n	800ae66 <__gethex+0x260>
 800ad9c:	1bbf      	subs	r7, r7, r6
 800ad9e:	4639      	mov	r1, r7
 800ada0:	4628      	mov	r0, r5
 800ada2:	f000 fe1d 	bl	800b9e0 <__any_on>
 800ada6:	4682      	mov	sl, r0
 800ada8:	b178      	cbz	r0, 800adca <__gethex+0x1c4>
 800adaa:	1e7b      	subs	r3, r7, #1
 800adac:	1159      	asrs	r1, r3, #5
 800adae:	f003 021f 	and.w	r2, r3, #31
 800adb2:	f04f 0a01 	mov.w	sl, #1
 800adb6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800adba:	fa0a f202 	lsl.w	r2, sl, r2
 800adbe:	420a      	tst	r2, r1
 800adc0:	d003      	beq.n	800adca <__gethex+0x1c4>
 800adc2:	4553      	cmp	r3, sl
 800adc4:	dc46      	bgt.n	800ae54 <__gethex+0x24e>
 800adc6:	f04f 0a02 	mov.w	sl, #2
 800adca:	4639      	mov	r1, r7
 800adcc:	4628      	mov	r0, r5
 800adce:	f7ff fecb 	bl	800ab68 <rshift>
 800add2:	443c      	add	r4, r7
 800add4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800add8:	42a3      	cmp	r3, r4
 800adda:	da52      	bge.n	800ae82 <__gethex+0x27c>
 800addc:	4629      	mov	r1, r5
 800adde:	9802      	ldr	r0, [sp, #8]
 800ade0:	f000 fa55 	bl	800b28e <_Bfree>
 800ade4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ade6:	2300      	movs	r3, #0
 800ade8:	6013      	str	r3, [r2, #0]
 800adea:	27a3      	movs	r7, #163	; 0xa3
 800adec:	e793      	b.n	800ad16 <__gethex+0x110>
 800adee:	3101      	adds	r1, #1
 800adf0:	105b      	asrs	r3, r3, #1
 800adf2:	e7b0      	b.n	800ad56 <__gethex+0x150>
 800adf4:	1e73      	subs	r3, r6, #1
 800adf6:	9305      	str	r3, [sp, #20]
 800adf8:	9a07      	ldr	r2, [sp, #28]
 800adfa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d018      	beq.n	800ae34 <__gethex+0x22e>
 800ae02:	f1bb 0f20 	cmp.w	fp, #32
 800ae06:	d107      	bne.n	800ae18 <__gethex+0x212>
 800ae08:	9b04      	ldr	r3, [sp, #16]
 800ae0a:	f8c3 a000 	str.w	sl, [r3]
 800ae0e:	3304      	adds	r3, #4
 800ae10:	f04f 0a00 	mov.w	sl, #0
 800ae14:	9304      	str	r3, [sp, #16]
 800ae16:	46d3      	mov	fp, sl
 800ae18:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ae1c:	f7ff fede 	bl	800abdc <__hexdig_fun>
 800ae20:	f000 000f 	and.w	r0, r0, #15
 800ae24:	fa00 f00b 	lsl.w	r0, r0, fp
 800ae28:	ea4a 0a00 	orr.w	sl, sl, r0
 800ae2c:	f10b 0b04 	add.w	fp, fp, #4
 800ae30:	9b05      	ldr	r3, [sp, #20]
 800ae32:	e00d      	b.n	800ae50 <__gethex+0x24a>
 800ae34:	9b05      	ldr	r3, [sp, #20]
 800ae36:	9a08      	ldr	r2, [sp, #32]
 800ae38:	4413      	add	r3, r2
 800ae3a:	42bb      	cmp	r3, r7
 800ae3c:	d3e1      	bcc.n	800ae02 <__gethex+0x1fc>
 800ae3e:	4618      	mov	r0, r3
 800ae40:	9a01      	ldr	r2, [sp, #4]
 800ae42:	9903      	ldr	r1, [sp, #12]
 800ae44:	9309      	str	r3, [sp, #36]	; 0x24
 800ae46:	f7fe f960 	bl	800910a <strncmp>
 800ae4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae4c:	2800      	cmp	r0, #0
 800ae4e:	d1d8      	bne.n	800ae02 <__gethex+0x1fc>
 800ae50:	461e      	mov	r6, r3
 800ae52:	e791      	b.n	800ad78 <__gethex+0x172>
 800ae54:	1eb9      	subs	r1, r7, #2
 800ae56:	4628      	mov	r0, r5
 800ae58:	f000 fdc2 	bl	800b9e0 <__any_on>
 800ae5c:	2800      	cmp	r0, #0
 800ae5e:	d0b2      	beq.n	800adc6 <__gethex+0x1c0>
 800ae60:	f04f 0a03 	mov.w	sl, #3
 800ae64:	e7b1      	b.n	800adca <__gethex+0x1c4>
 800ae66:	da09      	bge.n	800ae7c <__gethex+0x276>
 800ae68:	1bf7      	subs	r7, r6, r7
 800ae6a:	4629      	mov	r1, r5
 800ae6c:	463a      	mov	r2, r7
 800ae6e:	9802      	ldr	r0, [sp, #8]
 800ae70:	f000 fbd8 	bl	800b624 <__lshift>
 800ae74:	1be4      	subs	r4, r4, r7
 800ae76:	4605      	mov	r5, r0
 800ae78:	f100 0914 	add.w	r9, r0, #20
 800ae7c:	f04f 0a00 	mov.w	sl, #0
 800ae80:	e7a8      	b.n	800add4 <__gethex+0x1ce>
 800ae82:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ae86:	42a0      	cmp	r0, r4
 800ae88:	dd6a      	ble.n	800af60 <__gethex+0x35a>
 800ae8a:	1b04      	subs	r4, r0, r4
 800ae8c:	42a6      	cmp	r6, r4
 800ae8e:	dc2e      	bgt.n	800aeee <__gethex+0x2e8>
 800ae90:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ae94:	2b02      	cmp	r3, #2
 800ae96:	d022      	beq.n	800aede <__gethex+0x2d8>
 800ae98:	2b03      	cmp	r3, #3
 800ae9a:	d024      	beq.n	800aee6 <__gethex+0x2e0>
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	d115      	bne.n	800aecc <__gethex+0x2c6>
 800aea0:	42a6      	cmp	r6, r4
 800aea2:	d113      	bne.n	800aecc <__gethex+0x2c6>
 800aea4:	2e01      	cmp	r6, #1
 800aea6:	dc0b      	bgt.n	800aec0 <__gethex+0x2ba>
 800aea8:	9a06      	ldr	r2, [sp, #24]
 800aeaa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aeae:	6013      	str	r3, [r2, #0]
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	612b      	str	r3, [r5, #16]
 800aeb4:	f8c9 3000 	str.w	r3, [r9]
 800aeb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aeba:	2762      	movs	r7, #98	; 0x62
 800aebc:	601d      	str	r5, [r3, #0]
 800aebe:	e72a      	b.n	800ad16 <__gethex+0x110>
 800aec0:	1e71      	subs	r1, r6, #1
 800aec2:	4628      	mov	r0, r5
 800aec4:	f000 fd8c 	bl	800b9e0 <__any_on>
 800aec8:	2800      	cmp	r0, #0
 800aeca:	d1ed      	bne.n	800aea8 <__gethex+0x2a2>
 800aecc:	4629      	mov	r1, r5
 800aece:	9802      	ldr	r0, [sp, #8]
 800aed0:	f000 f9dd 	bl	800b28e <_Bfree>
 800aed4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aed6:	2300      	movs	r3, #0
 800aed8:	6013      	str	r3, [r2, #0]
 800aeda:	2750      	movs	r7, #80	; 0x50
 800aedc:	e71b      	b.n	800ad16 <__gethex+0x110>
 800aede:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d0e1      	beq.n	800aea8 <__gethex+0x2a2>
 800aee4:	e7f2      	b.n	800aecc <__gethex+0x2c6>
 800aee6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d1dd      	bne.n	800aea8 <__gethex+0x2a2>
 800aeec:	e7ee      	b.n	800aecc <__gethex+0x2c6>
 800aeee:	1e67      	subs	r7, r4, #1
 800aef0:	f1ba 0f00 	cmp.w	sl, #0
 800aef4:	d131      	bne.n	800af5a <__gethex+0x354>
 800aef6:	b127      	cbz	r7, 800af02 <__gethex+0x2fc>
 800aef8:	4639      	mov	r1, r7
 800aefa:	4628      	mov	r0, r5
 800aefc:	f000 fd70 	bl	800b9e0 <__any_on>
 800af00:	4682      	mov	sl, r0
 800af02:	117a      	asrs	r2, r7, #5
 800af04:	2301      	movs	r3, #1
 800af06:	f007 071f 	and.w	r7, r7, #31
 800af0a:	fa03 f707 	lsl.w	r7, r3, r7
 800af0e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800af12:	4621      	mov	r1, r4
 800af14:	421f      	tst	r7, r3
 800af16:	4628      	mov	r0, r5
 800af18:	bf18      	it	ne
 800af1a:	f04a 0a02 	orrne.w	sl, sl, #2
 800af1e:	1b36      	subs	r6, r6, r4
 800af20:	f7ff fe22 	bl	800ab68 <rshift>
 800af24:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800af28:	2702      	movs	r7, #2
 800af2a:	f1ba 0f00 	cmp.w	sl, #0
 800af2e:	d048      	beq.n	800afc2 <__gethex+0x3bc>
 800af30:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800af34:	2b02      	cmp	r3, #2
 800af36:	d015      	beq.n	800af64 <__gethex+0x35e>
 800af38:	2b03      	cmp	r3, #3
 800af3a:	d017      	beq.n	800af6c <__gethex+0x366>
 800af3c:	2b01      	cmp	r3, #1
 800af3e:	d109      	bne.n	800af54 <__gethex+0x34e>
 800af40:	f01a 0f02 	tst.w	sl, #2
 800af44:	d006      	beq.n	800af54 <__gethex+0x34e>
 800af46:	f8d9 3000 	ldr.w	r3, [r9]
 800af4a:	ea4a 0a03 	orr.w	sl, sl, r3
 800af4e:	f01a 0f01 	tst.w	sl, #1
 800af52:	d10e      	bne.n	800af72 <__gethex+0x36c>
 800af54:	f047 0710 	orr.w	r7, r7, #16
 800af58:	e033      	b.n	800afc2 <__gethex+0x3bc>
 800af5a:	f04f 0a01 	mov.w	sl, #1
 800af5e:	e7d0      	b.n	800af02 <__gethex+0x2fc>
 800af60:	2701      	movs	r7, #1
 800af62:	e7e2      	b.n	800af2a <__gethex+0x324>
 800af64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af66:	f1c3 0301 	rsb	r3, r3, #1
 800af6a:	9315      	str	r3, [sp, #84]	; 0x54
 800af6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d0f0      	beq.n	800af54 <__gethex+0x34e>
 800af72:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800af76:	f105 0314 	add.w	r3, r5, #20
 800af7a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800af7e:	eb03 010a 	add.w	r1, r3, sl
 800af82:	f04f 0c00 	mov.w	ip, #0
 800af86:	4618      	mov	r0, r3
 800af88:	f853 2b04 	ldr.w	r2, [r3], #4
 800af8c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800af90:	d01c      	beq.n	800afcc <__gethex+0x3c6>
 800af92:	3201      	adds	r2, #1
 800af94:	6002      	str	r2, [r0, #0]
 800af96:	2f02      	cmp	r7, #2
 800af98:	f105 0314 	add.w	r3, r5, #20
 800af9c:	d138      	bne.n	800b010 <__gethex+0x40a>
 800af9e:	f8d8 2000 	ldr.w	r2, [r8]
 800afa2:	3a01      	subs	r2, #1
 800afa4:	42b2      	cmp	r2, r6
 800afa6:	d10a      	bne.n	800afbe <__gethex+0x3b8>
 800afa8:	1171      	asrs	r1, r6, #5
 800afaa:	2201      	movs	r2, #1
 800afac:	f006 061f 	and.w	r6, r6, #31
 800afb0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800afb4:	fa02 f606 	lsl.w	r6, r2, r6
 800afb8:	421e      	tst	r6, r3
 800afba:	bf18      	it	ne
 800afbc:	4617      	movne	r7, r2
 800afbe:	f047 0720 	orr.w	r7, r7, #32
 800afc2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800afc4:	601d      	str	r5, [r3, #0]
 800afc6:	9b06      	ldr	r3, [sp, #24]
 800afc8:	601c      	str	r4, [r3, #0]
 800afca:	e6a4      	b.n	800ad16 <__gethex+0x110>
 800afcc:	4299      	cmp	r1, r3
 800afce:	f843 cc04 	str.w	ip, [r3, #-4]
 800afd2:	d8d8      	bhi.n	800af86 <__gethex+0x380>
 800afd4:	68ab      	ldr	r3, [r5, #8]
 800afd6:	4599      	cmp	r9, r3
 800afd8:	db12      	blt.n	800b000 <__gethex+0x3fa>
 800afda:	6869      	ldr	r1, [r5, #4]
 800afdc:	9802      	ldr	r0, [sp, #8]
 800afde:	3101      	adds	r1, #1
 800afe0:	f000 f921 	bl	800b226 <_Balloc>
 800afe4:	692a      	ldr	r2, [r5, #16]
 800afe6:	3202      	adds	r2, #2
 800afe8:	f105 010c 	add.w	r1, r5, #12
 800afec:	4683      	mov	fp, r0
 800afee:	0092      	lsls	r2, r2, #2
 800aff0:	300c      	adds	r0, #12
 800aff2:	f000 f90d 	bl	800b210 <memcpy>
 800aff6:	4629      	mov	r1, r5
 800aff8:	9802      	ldr	r0, [sp, #8]
 800affa:	f000 f948 	bl	800b28e <_Bfree>
 800affe:	465d      	mov	r5, fp
 800b000:	692b      	ldr	r3, [r5, #16]
 800b002:	1c5a      	adds	r2, r3, #1
 800b004:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b008:	612a      	str	r2, [r5, #16]
 800b00a:	2201      	movs	r2, #1
 800b00c:	615a      	str	r2, [r3, #20]
 800b00e:	e7c2      	b.n	800af96 <__gethex+0x390>
 800b010:	692a      	ldr	r2, [r5, #16]
 800b012:	454a      	cmp	r2, r9
 800b014:	dd0b      	ble.n	800b02e <__gethex+0x428>
 800b016:	2101      	movs	r1, #1
 800b018:	4628      	mov	r0, r5
 800b01a:	f7ff fda5 	bl	800ab68 <rshift>
 800b01e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b022:	3401      	adds	r4, #1
 800b024:	42a3      	cmp	r3, r4
 800b026:	f6ff aed9 	blt.w	800addc <__gethex+0x1d6>
 800b02a:	2701      	movs	r7, #1
 800b02c:	e7c7      	b.n	800afbe <__gethex+0x3b8>
 800b02e:	f016 061f 	ands.w	r6, r6, #31
 800b032:	d0fa      	beq.n	800b02a <__gethex+0x424>
 800b034:	449a      	add	sl, r3
 800b036:	f1c6 0620 	rsb	r6, r6, #32
 800b03a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b03e:	f000 f9b6 	bl	800b3ae <__hi0bits>
 800b042:	42b0      	cmp	r0, r6
 800b044:	dbe7      	blt.n	800b016 <__gethex+0x410>
 800b046:	e7f0      	b.n	800b02a <__gethex+0x424>

0800b048 <L_shift>:
 800b048:	f1c2 0208 	rsb	r2, r2, #8
 800b04c:	0092      	lsls	r2, r2, #2
 800b04e:	b570      	push	{r4, r5, r6, lr}
 800b050:	f1c2 0620 	rsb	r6, r2, #32
 800b054:	6843      	ldr	r3, [r0, #4]
 800b056:	6804      	ldr	r4, [r0, #0]
 800b058:	fa03 f506 	lsl.w	r5, r3, r6
 800b05c:	432c      	orrs	r4, r5
 800b05e:	40d3      	lsrs	r3, r2
 800b060:	6004      	str	r4, [r0, #0]
 800b062:	f840 3f04 	str.w	r3, [r0, #4]!
 800b066:	4288      	cmp	r0, r1
 800b068:	d3f4      	bcc.n	800b054 <L_shift+0xc>
 800b06a:	bd70      	pop	{r4, r5, r6, pc}

0800b06c <__match>:
 800b06c:	b530      	push	{r4, r5, lr}
 800b06e:	6803      	ldr	r3, [r0, #0]
 800b070:	3301      	adds	r3, #1
 800b072:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b076:	b914      	cbnz	r4, 800b07e <__match+0x12>
 800b078:	6003      	str	r3, [r0, #0]
 800b07a:	2001      	movs	r0, #1
 800b07c:	bd30      	pop	{r4, r5, pc}
 800b07e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b082:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b086:	2d19      	cmp	r5, #25
 800b088:	bf98      	it	ls
 800b08a:	3220      	addls	r2, #32
 800b08c:	42a2      	cmp	r2, r4
 800b08e:	d0f0      	beq.n	800b072 <__match+0x6>
 800b090:	2000      	movs	r0, #0
 800b092:	e7f3      	b.n	800b07c <__match+0x10>

0800b094 <__hexnan>:
 800b094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b098:	680b      	ldr	r3, [r1, #0]
 800b09a:	6801      	ldr	r1, [r0, #0]
 800b09c:	115f      	asrs	r7, r3, #5
 800b09e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800b0a2:	f013 031f 	ands.w	r3, r3, #31
 800b0a6:	b087      	sub	sp, #28
 800b0a8:	bf18      	it	ne
 800b0aa:	3704      	addne	r7, #4
 800b0ac:	2500      	movs	r5, #0
 800b0ae:	1f3e      	subs	r6, r7, #4
 800b0b0:	4682      	mov	sl, r0
 800b0b2:	4690      	mov	r8, r2
 800b0b4:	9301      	str	r3, [sp, #4]
 800b0b6:	f847 5c04 	str.w	r5, [r7, #-4]
 800b0ba:	46b1      	mov	r9, r6
 800b0bc:	4634      	mov	r4, r6
 800b0be:	9502      	str	r5, [sp, #8]
 800b0c0:	46ab      	mov	fp, r5
 800b0c2:	784a      	ldrb	r2, [r1, #1]
 800b0c4:	1c4b      	adds	r3, r1, #1
 800b0c6:	9303      	str	r3, [sp, #12]
 800b0c8:	b342      	cbz	r2, 800b11c <__hexnan+0x88>
 800b0ca:	4610      	mov	r0, r2
 800b0cc:	9105      	str	r1, [sp, #20]
 800b0ce:	9204      	str	r2, [sp, #16]
 800b0d0:	f7ff fd84 	bl	800abdc <__hexdig_fun>
 800b0d4:	2800      	cmp	r0, #0
 800b0d6:	d143      	bne.n	800b160 <__hexnan+0xcc>
 800b0d8:	9a04      	ldr	r2, [sp, #16]
 800b0da:	9905      	ldr	r1, [sp, #20]
 800b0dc:	2a20      	cmp	r2, #32
 800b0de:	d818      	bhi.n	800b112 <__hexnan+0x7e>
 800b0e0:	9b02      	ldr	r3, [sp, #8]
 800b0e2:	459b      	cmp	fp, r3
 800b0e4:	dd13      	ble.n	800b10e <__hexnan+0x7a>
 800b0e6:	454c      	cmp	r4, r9
 800b0e8:	d206      	bcs.n	800b0f8 <__hexnan+0x64>
 800b0ea:	2d07      	cmp	r5, #7
 800b0ec:	dc04      	bgt.n	800b0f8 <__hexnan+0x64>
 800b0ee:	462a      	mov	r2, r5
 800b0f0:	4649      	mov	r1, r9
 800b0f2:	4620      	mov	r0, r4
 800b0f4:	f7ff ffa8 	bl	800b048 <L_shift>
 800b0f8:	4544      	cmp	r4, r8
 800b0fa:	d944      	bls.n	800b186 <__hexnan+0xf2>
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	f1a4 0904 	sub.w	r9, r4, #4
 800b102:	f844 3c04 	str.w	r3, [r4, #-4]
 800b106:	f8cd b008 	str.w	fp, [sp, #8]
 800b10a:	464c      	mov	r4, r9
 800b10c:	461d      	mov	r5, r3
 800b10e:	9903      	ldr	r1, [sp, #12]
 800b110:	e7d7      	b.n	800b0c2 <__hexnan+0x2e>
 800b112:	2a29      	cmp	r2, #41	; 0x29
 800b114:	d14a      	bne.n	800b1ac <__hexnan+0x118>
 800b116:	3102      	adds	r1, #2
 800b118:	f8ca 1000 	str.w	r1, [sl]
 800b11c:	f1bb 0f00 	cmp.w	fp, #0
 800b120:	d044      	beq.n	800b1ac <__hexnan+0x118>
 800b122:	454c      	cmp	r4, r9
 800b124:	d206      	bcs.n	800b134 <__hexnan+0xa0>
 800b126:	2d07      	cmp	r5, #7
 800b128:	dc04      	bgt.n	800b134 <__hexnan+0xa0>
 800b12a:	462a      	mov	r2, r5
 800b12c:	4649      	mov	r1, r9
 800b12e:	4620      	mov	r0, r4
 800b130:	f7ff ff8a 	bl	800b048 <L_shift>
 800b134:	4544      	cmp	r4, r8
 800b136:	d928      	bls.n	800b18a <__hexnan+0xf6>
 800b138:	4643      	mov	r3, r8
 800b13a:	f854 2b04 	ldr.w	r2, [r4], #4
 800b13e:	f843 2b04 	str.w	r2, [r3], #4
 800b142:	42a6      	cmp	r6, r4
 800b144:	d2f9      	bcs.n	800b13a <__hexnan+0xa6>
 800b146:	2200      	movs	r2, #0
 800b148:	f843 2b04 	str.w	r2, [r3], #4
 800b14c:	429e      	cmp	r6, r3
 800b14e:	d2fb      	bcs.n	800b148 <__hexnan+0xb4>
 800b150:	6833      	ldr	r3, [r6, #0]
 800b152:	b91b      	cbnz	r3, 800b15c <__hexnan+0xc8>
 800b154:	4546      	cmp	r6, r8
 800b156:	d127      	bne.n	800b1a8 <__hexnan+0x114>
 800b158:	2301      	movs	r3, #1
 800b15a:	6033      	str	r3, [r6, #0]
 800b15c:	2005      	movs	r0, #5
 800b15e:	e026      	b.n	800b1ae <__hexnan+0x11a>
 800b160:	3501      	adds	r5, #1
 800b162:	2d08      	cmp	r5, #8
 800b164:	f10b 0b01 	add.w	fp, fp, #1
 800b168:	dd06      	ble.n	800b178 <__hexnan+0xe4>
 800b16a:	4544      	cmp	r4, r8
 800b16c:	d9cf      	bls.n	800b10e <__hexnan+0x7a>
 800b16e:	2300      	movs	r3, #0
 800b170:	f844 3c04 	str.w	r3, [r4, #-4]
 800b174:	2501      	movs	r5, #1
 800b176:	3c04      	subs	r4, #4
 800b178:	6822      	ldr	r2, [r4, #0]
 800b17a:	f000 000f 	and.w	r0, r0, #15
 800b17e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b182:	6020      	str	r0, [r4, #0]
 800b184:	e7c3      	b.n	800b10e <__hexnan+0x7a>
 800b186:	2508      	movs	r5, #8
 800b188:	e7c1      	b.n	800b10e <__hexnan+0x7a>
 800b18a:	9b01      	ldr	r3, [sp, #4]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d0df      	beq.n	800b150 <__hexnan+0xbc>
 800b190:	f04f 32ff 	mov.w	r2, #4294967295
 800b194:	f1c3 0320 	rsb	r3, r3, #32
 800b198:	fa22 f303 	lsr.w	r3, r2, r3
 800b19c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800b1a0:	401a      	ands	r2, r3
 800b1a2:	f847 2c04 	str.w	r2, [r7, #-4]
 800b1a6:	e7d3      	b.n	800b150 <__hexnan+0xbc>
 800b1a8:	3e04      	subs	r6, #4
 800b1aa:	e7d1      	b.n	800b150 <__hexnan+0xbc>
 800b1ac:	2004      	movs	r0, #4
 800b1ae:	b007      	add	sp, #28
 800b1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b1b4 <__locale_ctype_ptr_l>:
 800b1b4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800b1b8:	4770      	bx	lr

0800b1ba <__localeconv_l>:
 800b1ba:	30f0      	adds	r0, #240	; 0xf0
 800b1bc:	4770      	bx	lr
	...

0800b1c0 <_localeconv_r>:
 800b1c0:	4b04      	ldr	r3, [pc, #16]	; (800b1d4 <_localeconv_r+0x14>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	6a18      	ldr	r0, [r3, #32]
 800b1c6:	4b04      	ldr	r3, [pc, #16]	; (800b1d8 <_localeconv_r+0x18>)
 800b1c8:	2800      	cmp	r0, #0
 800b1ca:	bf08      	it	eq
 800b1cc:	4618      	moveq	r0, r3
 800b1ce:	30f0      	adds	r0, #240	; 0xf0
 800b1d0:	4770      	bx	lr
 800b1d2:	bf00      	nop
 800b1d4:	20000028 	.word	0x20000028
 800b1d8:	2000008c 	.word	0x2000008c

0800b1dc <malloc>:
 800b1dc:	4b02      	ldr	r3, [pc, #8]	; (800b1e8 <malloc+0xc>)
 800b1de:	4601      	mov	r1, r0
 800b1e0:	6818      	ldr	r0, [r3, #0]
 800b1e2:	f000 bc7b 	b.w	800badc <_malloc_r>
 800b1e6:	bf00      	nop
 800b1e8:	20000028 	.word	0x20000028

0800b1ec <__ascii_mbtowc>:
 800b1ec:	b082      	sub	sp, #8
 800b1ee:	b901      	cbnz	r1, 800b1f2 <__ascii_mbtowc+0x6>
 800b1f0:	a901      	add	r1, sp, #4
 800b1f2:	b142      	cbz	r2, 800b206 <__ascii_mbtowc+0x1a>
 800b1f4:	b14b      	cbz	r3, 800b20a <__ascii_mbtowc+0x1e>
 800b1f6:	7813      	ldrb	r3, [r2, #0]
 800b1f8:	600b      	str	r3, [r1, #0]
 800b1fa:	7812      	ldrb	r2, [r2, #0]
 800b1fc:	1c10      	adds	r0, r2, #0
 800b1fe:	bf18      	it	ne
 800b200:	2001      	movne	r0, #1
 800b202:	b002      	add	sp, #8
 800b204:	4770      	bx	lr
 800b206:	4610      	mov	r0, r2
 800b208:	e7fb      	b.n	800b202 <__ascii_mbtowc+0x16>
 800b20a:	f06f 0001 	mvn.w	r0, #1
 800b20e:	e7f8      	b.n	800b202 <__ascii_mbtowc+0x16>

0800b210 <memcpy>:
 800b210:	b510      	push	{r4, lr}
 800b212:	1e43      	subs	r3, r0, #1
 800b214:	440a      	add	r2, r1
 800b216:	4291      	cmp	r1, r2
 800b218:	d100      	bne.n	800b21c <memcpy+0xc>
 800b21a:	bd10      	pop	{r4, pc}
 800b21c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b220:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b224:	e7f7      	b.n	800b216 <memcpy+0x6>

0800b226 <_Balloc>:
 800b226:	b570      	push	{r4, r5, r6, lr}
 800b228:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b22a:	4604      	mov	r4, r0
 800b22c:	460e      	mov	r6, r1
 800b22e:	b93d      	cbnz	r5, 800b240 <_Balloc+0x1a>
 800b230:	2010      	movs	r0, #16
 800b232:	f7ff ffd3 	bl	800b1dc <malloc>
 800b236:	6260      	str	r0, [r4, #36]	; 0x24
 800b238:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b23c:	6005      	str	r5, [r0, #0]
 800b23e:	60c5      	str	r5, [r0, #12]
 800b240:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b242:	68eb      	ldr	r3, [r5, #12]
 800b244:	b183      	cbz	r3, 800b268 <_Balloc+0x42>
 800b246:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b248:	68db      	ldr	r3, [r3, #12]
 800b24a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b24e:	b9b8      	cbnz	r0, 800b280 <_Balloc+0x5a>
 800b250:	2101      	movs	r1, #1
 800b252:	fa01 f506 	lsl.w	r5, r1, r6
 800b256:	1d6a      	adds	r2, r5, #5
 800b258:	0092      	lsls	r2, r2, #2
 800b25a:	4620      	mov	r0, r4
 800b25c:	f000 fbe1 	bl	800ba22 <_calloc_r>
 800b260:	b160      	cbz	r0, 800b27c <_Balloc+0x56>
 800b262:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b266:	e00e      	b.n	800b286 <_Balloc+0x60>
 800b268:	2221      	movs	r2, #33	; 0x21
 800b26a:	2104      	movs	r1, #4
 800b26c:	4620      	mov	r0, r4
 800b26e:	f000 fbd8 	bl	800ba22 <_calloc_r>
 800b272:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b274:	60e8      	str	r0, [r5, #12]
 800b276:	68db      	ldr	r3, [r3, #12]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d1e4      	bne.n	800b246 <_Balloc+0x20>
 800b27c:	2000      	movs	r0, #0
 800b27e:	bd70      	pop	{r4, r5, r6, pc}
 800b280:	6802      	ldr	r2, [r0, #0]
 800b282:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b286:	2300      	movs	r3, #0
 800b288:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b28c:	e7f7      	b.n	800b27e <_Balloc+0x58>

0800b28e <_Bfree>:
 800b28e:	b570      	push	{r4, r5, r6, lr}
 800b290:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b292:	4606      	mov	r6, r0
 800b294:	460d      	mov	r5, r1
 800b296:	b93c      	cbnz	r4, 800b2a8 <_Bfree+0x1a>
 800b298:	2010      	movs	r0, #16
 800b29a:	f7ff ff9f 	bl	800b1dc <malloc>
 800b29e:	6270      	str	r0, [r6, #36]	; 0x24
 800b2a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b2a4:	6004      	str	r4, [r0, #0]
 800b2a6:	60c4      	str	r4, [r0, #12]
 800b2a8:	b13d      	cbz	r5, 800b2ba <_Bfree+0x2c>
 800b2aa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b2ac:	686a      	ldr	r2, [r5, #4]
 800b2ae:	68db      	ldr	r3, [r3, #12]
 800b2b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b2b4:	6029      	str	r1, [r5, #0]
 800b2b6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b2ba:	bd70      	pop	{r4, r5, r6, pc}

0800b2bc <__multadd>:
 800b2bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2c0:	690d      	ldr	r5, [r1, #16]
 800b2c2:	461f      	mov	r7, r3
 800b2c4:	4606      	mov	r6, r0
 800b2c6:	460c      	mov	r4, r1
 800b2c8:	f101 0c14 	add.w	ip, r1, #20
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	f8dc 0000 	ldr.w	r0, [ip]
 800b2d2:	b281      	uxth	r1, r0
 800b2d4:	fb02 7101 	mla	r1, r2, r1, r7
 800b2d8:	0c0f      	lsrs	r7, r1, #16
 800b2da:	0c00      	lsrs	r0, r0, #16
 800b2dc:	fb02 7000 	mla	r0, r2, r0, r7
 800b2e0:	b289      	uxth	r1, r1
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b2e8:	429d      	cmp	r5, r3
 800b2ea:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b2ee:	f84c 1b04 	str.w	r1, [ip], #4
 800b2f2:	dcec      	bgt.n	800b2ce <__multadd+0x12>
 800b2f4:	b1d7      	cbz	r7, 800b32c <__multadd+0x70>
 800b2f6:	68a3      	ldr	r3, [r4, #8]
 800b2f8:	42ab      	cmp	r3, r5
 800b2fa:	dc12      	bgt.n	800b322 <__multadd+0x66>
 800b2fc:	6861      	ldr	r1, [r4, #4]
 800b2fe:	4630      	mov	r0, r6
 800b300:	3101      	adds	r1, #1
 800b302:	f7ff ff90 	bl	800b226 <_Balloc>
 800b306:	6922      	ldr	r2, [r4, #16]
 800b308:	3202      	adds	r2, #2
 800b30a:	f104 010c 	add.w	r1, r4, #12
 800b30e:	4680      	mov	r8, r0
 800b310:	0092      	lsls	r2, r2, #2
 800b312:	300c      	adds	r0, #12
 800b314:	f7ff ff7c 	bl	800b210 <memcpy>
 800b318:	4621      	mov	r1, r4
 800b31a:	4630      	mov	r0, r6
 800b31c:	f7ff ffb7 	bl	800b28e <_Bfree>
 800b320:	4644      	mov	r4, r8
 800b322:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b326:	3501      	adds	r5, #1
 800b328:	615f      	str	r7, [r3, #20]
 800b32a:	6125      	str	r5, [r4, #16]
 800b32c:	4620      	mov	r0, r4
 800b32e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b332 <__s2b>:
 800b332:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b336:	460c      	mov	r4, r1
 800b338:	4615      	mov	r5, r2
 800b33a:	461f      	mov	r7, r3
 800b33c:	2209      	movs	r2, #9
 800b33e:	3308      	adds	r3, #8
 800b340:	4606      	mov	r6, r0
 800b342:	fb93 f3f2 	sdiv	r3, r3, r2
 800b346:	2100      	movs	r1, #0
 800b348:	2201      	movs	r2, #1
 800b34a:	429a      	cmp	r2, r3
 800b34c:	db20      	blt.n	800b390 <__s2b+0x5e>
 800b34e:	4630      	mov	r0, r6
 800b350:	f7ff ff69 	bl	800b226 <_Balloc>
 800b354:	9b08      	ldr	r3, [sp, #32]
 800b356:	6143      	str	r3, [r0, #20]
 800b358:	2d09      	cmp	r5, #9
 800b35a:	f04f 0301 	mov.w	r3, #1
 800b35e:	6103      	str	r3, [r0, #16]
 800b360:	dd19      	ble.n	800b396 <__s2b+0x64>
 800b362:	f104 0809 	add.w	r8, r4, #9
 800b366:	46c1      	mov	r9, r8
 800b368:	442c      	add	r4, r5
 800b36a:	f819 3b01 	ldrb.w	r3, [r9], #1
 800b36e:	4601      	mov	r1, r0
 800b370:	3b30      	subs	r3, #48	; 0x30
 800b372:	220a      	movs	r2, #10
 800b374:	4630      	mov	r0, r6
 800b376:	f7ff ffa1 	bl	800b2bc <__multadd>
 800b37a:	45a1      	cmp	r9, r4
 800b37c:	d1f5      	bne.n	800b36a <__s2b+0x38>
 800b37e:	eb08 0405 	add.w	r4, r8, r5
 800b382:	3c08      	subs	r4, #8
 800b384:	1b2d      	subs	r5, r5, r4
 800b386:	1963      	adds	r3, r4, r5
 800b388:	42bb      	cmp	r3, r7
 800b38a:	db07      	blt.n	800b39c <__s2b+0x6a>
 800b38c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b390:	0052      	lsls	r2, r2, #1
 800b392:	3101      	adds	r1, #1
 800b394:	e7d9      	b.n	800b34a <__s2b+0x18>
 800b396:	340a      	adds	r4, #10
 800b398:	2509      	movs	r5, #9
 800b39a:	e7f3      	b.n	800b384 <__s2b+0x52>
 800b39c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b3a0:	4601      	mov	r1, r0
 800b3a2:	3b30      	subs	r3, #48	; 0x30
 800b3a4:	220a      	movs	r2, #10
 800b3a6:	4630      	mov	r0, r6
 800b3a8:	f7ff ff88 	bl	800b2bc <__multadd>
 800b3ac:	e7eb      	b.n	800b386 <__s2b+0x54>

0800b3ae <__hi0bits>:
 800b3ae:	0c02      	lsrs	r2, r0, #16
 800b3b0:	0412      	lsls	r2, r2, #16
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	b9b2      	cbnz	r2, 800b3e4 <__hi0bits+0x36>
 800b3b6:	0403      	lsls	r3, r0, #16
 800b3b8:	2010      	movs	r0, #16
 800b3ba:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b3be:	bf04      	itt	eq
 800b3c0:	021b      	lsleq	r3, r3, #8
 800b3c2:	3008      	addeq	r0, #8
 800b3c4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b3c8:	bf04      	itt	eq
 800b3ca:	011b      	lsleq	r3, r3, #4
 800b3cc:	3004      	addeq	r0, #4
 800b3ce:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b3d2:	bf04      	itt	eq
 800b3d4:	009b      	lsleq	r3, r3, #2
 800b3d6:	3002      	addeq	r0, #2
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	db06      	blt.n	800b3ea <__hi0bits+0x3c>
 800b3dc:	005b      	lsls	r3, r3, #1
 800b3de:	d503      	bpl.n	800b3e8 <__hi0bits+0x3a>
 800b3e0:	3001      	adds	r0, #1
 800b3e2:	4770      	bx	lr
 800b3e4:	2000      	movs	r0, #0
 800b3e6:	e7e8      	b.n	800b3ba <__hi0bits+0xc>
 800b3e8:	2020      	movs	r0, #32
 800b3ea:	4770      	bx	lr

0800b3ec <__lo0bits>:
 800b3ec:	6803      	ldr	r3, [r0, #0]
 800b3ee:	f013 0207 	ands.w	r2, r3, #7
 800b3f2:	4601      	mov	r1, r0
 800b3f4:	d00b      	beq.n	800b40e <__lo0bits+0x22>
 800b3f6:	07da      	lsls	r2, r3, #31
 800b3f8:	d423      	bmi.n	800b442 <__lo0bits+0x56>
 800b3fa:	0798      	lsls	r0, r3, #30
 800b3fc:	bf49      	itett	mi
 800b3fe:	085b      	lsrmi	r3, r3, #1
 800b400:	089b      	lsrpl	r3, r3, #2
 800b402:	2001      	movmi	r0, #1
 800b404:	600b      	strmi	r3, [r1, #0]
 800b406:	bf5c      	itt	pl
 800b408:	600b      	strpl	r3, [r1, #0]
 800b40a:	2002      	movpl	r0, #2
 800b40c:	4770      	bx	lr
 800b40e:	b298      	uxth	r0, r3
 800b410:	b9a8      	cbnz	r0, 800b43e <__lo0bits+0x52>
 800b412:	0c1b      	lsrs	r3, r3, #16
 800b414:	2010      	movs	r0, #16
 800b416:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b41a:	bf04      	itt	eq
 800b41c:	0a1b      	lsreq	r3, r3, #8
 800b41e:	3008      	addeq	r0, #8
 800b420:	071a      	lsls	r2, r3, #28
 800b422:	bf04      	itt	eq
 800b424:	091b      	lsreq	r3, r3, #4
 800b426:	3004      	addeq	r0, #4
 800b428:	079a      	lsls	r2, r3, #30
 800b42a:	bf04      	itt	eq
 800b42c:	089b      	lsreq	r3, r3, #2
 800b42e:	3002      	addeq	r0, #2
 800b430:	07da      	lsls	r2, r3, #31
 800b432:	d402      	bmi.n	800b43a <__lo0bits+0x4e>
 800b434:	085b      	lsrs	r3, r3, #1
 800b436:	d006      	beq.n	800b446 <__lo0bits+0x5a>
 800b438:	3001      	adds	r0, #1
 800b43a:	600b      	str	r3, [r1, #0]
 800b43c:	4770      	bx	lr
 800b43e:	4610      	mov	r0, r2
 800b440:	e7e9      	b.n	800b416 <__lo0bits+0x2a>
 800b442:	2000      	movs	r0, #0
 800b444:	4770      	bx	lr
 800b446:	2020      	movs	r0, #32
 800b448:	4770      	bx	lr

0800b44a <__i2b>:
 800b44a:	b510      	push	{r4, lr}
 800b44c:	460c      	mov	r4, r1
 800b44e:	2101      	movs	r1, #1
 800b450:	f7ff fee9 	bl	800b226 <_Balloc>
 800b454:	2201      	movs	r2, #1
 800b456:	6144      	str	r4, [r0, #20]
 800b458:	6102      	str	r2, [r0, #16]
 800b45a:	bd10      	pop	{r4, pc}

0800b45c <__multiply>:
 800b45c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b460:	4614      	mov	r4, r2
 800b462:	690a      	ldr	r2, [r1, #16]
 800b464:	6923      	ldr	r3, [r4, #16]
 800b466:	429a      	cmp	r2, r3
 800b468:	bfb8      	it	lt
 800b46a:	460b      	movlt	r3, r1
 800b46c:	4688      	mov	r8, r1
 800b46e:	bfbc      	itt	lt
 800b470:	46a0      	movlt	r8, r4
 800b472:	461c      	movlt	r4, r3
 800b474:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b478:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b47c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b480:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b484:	eb07 0609 	add.w	r6, r7, r9
 800b488:	42b3      	cmp	r3, r6
 800b48a:	bfb8      	it	lt
 800b48c:	3101      	addlt	r1, #1
 800b48e:	f7ff feca 	bl	800b226 <_Balloc>
 800b492:	f100 0514 	add.w	r5, r0, #20
 800b496:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b49a:	462b      	mov	r3, r5
 800b49c:	2200      	movs	r2, #0
 800b49e:	4573      	cmp	r3, lr
 800b4a0:	d316      	bcc.n	800b4d0 <__multiply+0x74>
 800b4a2:	f104 0214 	add.w	r2, r4, #20
 800b4a6:	f108 0114 	add.w	r1, r8, #20
 800b4aa:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b4ae:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b4b2:	9300      	str	r3, [sp, #0]
 800b4b4:	9b00      	ldr	r3, [sp, #0]
 800b4b6:	9201      	str	r2, [sp, #4]
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d80c      	bhi.n	800b4d6 <__multiply+0x7a>
 800b4bc:	2e00      	cmp	r6, #0
 800b4be:	dd03      	ble.n	800b4c8 <__multiply+0x6c>
 800b4c0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d05d      	beq.n	800b584 <__multiply+0x128>
 800b4c8:	6106      	str	r6, [r0, #16]
 800b4ca:	b003      	add	sp, #12
 800b4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4d0:	f843 2b04 	str.w	r2, [r3], #4
 800b4d4:	e7e3      	b.n	800b49e <__multiply+0x42>
 800b4d6:	f8b2 b000 	ldrh.w	fp, [r2]
 800b4da:	f1bb 0f00 	cmp.w	fp, #0
 800b4de:	d023      	beq.n	800b528 <__multiply+0xcc>
 800b4e0:	4689      	mov	r9, r1
 800b4e2:	46ac      	mov	ip, r5
 800b4e4:	f04f 0800 	mov.w	r8, #0
 800b4e8:	f859 4b04 	ldr.w	r4, [r9], #4
 800b4ec:	f8dc a000 	ldr.w	sl, [ip]
 800b4f0:	b2a3      	uxth	r3, r4
 800b4f2:	fa1f fa8a 	uxth.w	sl, sl
 800b4f6:	fb0b a303 	mla	r3, fp, r3, sl
 800b4fa:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b4fe:	f8dc 4000 	ldr.w	r4, [ip]
 800b502:	4443      	add	r3, r8
 800b504:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b508:	fb0b 840a 	mla	r4, fp, sl, r8
 800b50c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b510:	46e2      	mov	sl, ip
 800b512:	b29b      	uxth	r3, r3
 800b514:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b518:	454f      	cmp	r7, r9
 800b51a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b51e:	f84a 3b04 	str.w	r3, [sl], #4
 800b522:	d82b      	bhi.n	800b57c <__multiply+0x120>
 800b524:	f8cc 8004 	str.w	r8, [ip, #4]
 800b528:	9b01      	ldr	r3, [sp, #4]
 800b52a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b52e:	3204      	adds	r2, #4
 800b530:	f1ba 0f00 	cmp.w	sl, #0
 800b534:	d020      	beq.n	800b578 <__multiply+0x11c>
 800b536:	682b      	ldr	r3, [r5, #0]
 800b538:	4689      	mov	r9, r1
 800b53a:	46a8      	mov	r8, r5
 800b53c:	f04f 0b00 	mov.w	fp, #0
 800b540:	f8b9 c000 	ldrh.w	ip, [r9]
 800b544:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b548:	fb0a 440c 	mla	r4, sl, ip, r4
 800b54c:	445c      	add	r4, fp
 800b54e:	46c4      	mov	ip, r8
 800b550:	b29b      	uxth	r3, r3
 800b552:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b556:	f84c 3b04 	str.w	r3, [ip], #4
 800b55a:	f859 3b04 	ldr.w	r3, [r9], #4
 800b55e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b562:	0c1b      	lsrs	r3, r3, #16
 800b564:	fb0a b303 	mla	r3, sl, r3, fp
 800b568:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b56c:	454f      	cmp	r7, r9
 800b56e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b572:	d805      	bhi.n	800b580 <__multiply+0x124>
 800b574:	f8c8 3004 	str.w	r3, [r8, #4]
 800b578:	3504      	adds	r5, #4
 800b57a:	e79b      	b.n	800b4b4 <__multiply+0x58>
 800b57c:	46d4      	mov	ip, sl
 800b57e:	e7b3      	b.n	800b4e8 <__multiply+0x8c>
 800b580:	46e0      	mov	r8, ip
 800b582:	e7dd      	b.n	800b540 <__multiply+0xe4>
 800b584:	3e01      	subs	r6, #1
 800b586:	e799      	b.n	800b4bc <__multiply+0x60>

0800b588 <__pow5mult>:
 800b588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b58c:	4615      	mov	r5, r2
 800b58e:	f012 0203 	ands.w	r2, r2, #3
 800b592:	4606      	mov	r6, r0
 800b594:	460f      	mov	r7, r1
 800b596:	d007      	beq.n	800b5a8 <__pow5mult+0x20>
 800b598:	3a01      	subs	r2, #1
 800b59a:	4c21      	ldr	r4, [pc, #132]	; (800b620 <__pow5mult+0x98>)
 800b59c:	2300      	movs	r3, #0
 800b59e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b5a2:	f7ff fe8b 	bl	800b2bc <__multadd>
 800b5a6:	4607      	mov	r7, r0
 800b5a8:	10ad      	asrs	r5, r5, #2
 800b5aa:	d035      	beq.n	800b618 <__pow5mult+0x90>
 800b5ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b5ae:	b93c      	cbnz	r4, 800b5c0 <__pow5mult+0x38>
 800b5b0:	2010      	movs	r0, #16
 800b5b2:	f7ff fe13 	bl	800b1dc <malloc>
 800b5b6:	6270      	str	r0, [r6, #36]	; 0x24
 800b5b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b5bc:	6004      	str	r4, [r0, #0]
 800b5be:	60c4      	str	r4, [r0, #12]
 800b5c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b5c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b5c8:	b94c      	cbnz	r4, 800b5de <__pow5mult+0x56>
 800b5ca:	f240 2171 	movw	r1, #625	; 0x271
 800b5ce:	4630      	mov	r0, r6
 800b5d0:	f7ff ff3b 	bl	800b44a <__i2b>
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b5da:	4604      	mov	r4, r0
 800b5dc:	6003      	str	r3, [r0, #0]
 800b5de:	f04f 0800 	mov.w	r8, #0
 800b5e2:	07eb      	lsls	r3, r5, #31
 800b5e4:	d50a      	bpl.n	800b5fc <__pow5mult+0x74>
 800b5e6:	4639      	mov	r1, r7
 800b5e8:	4622      	mov	r2, r4
 800b5ea:	4630      	mov	r0, r6
 800b5ec:	f7ff ff36 	bl	800b45c <__multiply>
 800b5f0:	4639      	mov	r1, r7
 800b5f2:	4681      	mov	r9, r0
 800b5f4:	4630      	mov	r0, r6
 800b5f6:	f7ff fe4a 	bl	800b28e <_Bfree>
 800b5fa:	464f      	mov	r7, r9
 800b5fc:	106d      	asrs	r5, r5, #1
 800b5fe:	d00b      	beq.n	800b618 <__pow5mult+0x90>
 800b600:	6820      	ldr	r0, [r4, #0]
 800b602:	b938      	cbnz	r0, 800b614 <__pow5mult+0x8c>
 800b604:	4622      	mov	r2, r4
 800b606:	4621      	mov	r1, r4
 800b608:	4630      	mov	r0, r6
 800b60a:	f7ff ff27 	bl	800b45c <__multiply>
 800b60e:	6020      	str	r0, [r4, #0]
 800b610:	f8c0 8000 	str.w	r8, [r0]
 800b614:	4604      	mov	r4, r0
 800b616:	e7e4      	b.n	800b5e2 <__pow5mult+0x5a>
 800b618:	4638      	mov	r0, r7
 800b61a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b61e:	bf00      	nop
 800b620:	0800c720 	.word	0x0800c720

0800b624 <__lshift>:
 800b624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b628:	460c      	mov	r4, r1
 800b62a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b62e:	6923      	ldr	r3, [r4, #16]
 800b630:	6849      	ldr	r1, [r1, #4]
 800b632:	eb0a 0903 	add.w	r9, sl, r3
 800b636:	68a3      	ldr	r3, [r4, #8]
 800b638:	4607      	mov	r7, r0
 800b63a:	4616      	mov	r6, r2
 800b63c:	f109 0501 	add.w	r5, r9, #1
 800b640:	42ab      	cmp	r3, r5
 800b642:	db32      	blt.n	800b6aa <__lshift+0x86>
 800b644:	4638      	mov	r0, r7
 800b646:	f7ff fdee 	bl	800b226 <_Balloc>
 800b64a:	2300      	movs	r3, #0
 800b64c:	4680      	mov	r8, r0
 800b64e:	f100 0114 	add.w	r1, r0, #20
 800b652:	461a      	mov	r2, r3
 800b654:	4553      	cmp	r3, sl
 800b656:	db2b      	blt.n	800b6b0 <__lshift+0x8c>
 800b658:	6920      	ldr	r0, [r4, #16]
 800b65a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b65e:	f104 0314 	add.w	r3, r4, #20
 800b662:	f016 021f 	ands.w	r2, r6, #31
 800b666:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b66a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b66e:	d025      	beq.n	800b6bc <__lshift+0x98>
 800b670:	f1c2 0e20 	rsb	lr, r2, #32
 800b674:	2000      	movs	r0, #0
 800b676:	681e      	ldr	r6, [r3, #0]
 800b678:	468a      	mov	sl, r1
 800b67a:	4096      	lsls	r6, r2
 800b67c:	4330      	orrs	r0, r6
 800b67e:	f84a 0b04 	str.w	r0, [sl], #4
 800b682:	f853 0b04 	ldr.w	r0, [r3], #4
 800b686:	459c      	cmp	ip, r3
 800b688:	fa20 f00e 	lsr.w	r0, r0, lr
 800b68c:	d814      	bhi.n	800b6b8 <__lshift+0x94>
 800b68e:	6048      	str	r0, [r1, #4]
 800b690:	b108      	cbz	r0, 800b696 <__lshift+0x72>
 800b692:	f109 0502 	add.w	r5, r9, #2
 800b696:	3d01      	subs	r5, #1
 800b698:	4638      	mov	r0, r7
 800b69a:	f8c8 5010 	str.w	r5, [r8, #16]
 800b69e:	4621      	mov	r1, r4
 800b6a0:	f7ff fdf5 	bl	800b28e <_Bfree>
 800b6a4:	4640      	mov	r0, r8
 800b6a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6aa:	3101      	adds	r1, #1
 800b6ac:	005b      	lsls	r3, r3, #1
 800b6ae:	e7c7      	b.n	800b640 <__lshift+0x1c>
 800b6b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b6b4:	3301      	adds	r3, #1
 800b6b6:	e7cd      	b.n	800b654 <__lshift+0x30>
 800b6b8:	4651      	mov	r1, sl
 800b6ba:	e7dc      	b.n	800b676 <__lshift+0x52>
 800b6bc:	3904      	subs	r1, #4
 800b6be:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6c2:	f841 2f04 	str.w	r2, [r1, #4]!
 800b6c6:	459c      	cmp	ip, r3
 800b6c8:	d8f9      	bhi.n	800b6be <__lshift+0x9a>
 800b6ca:	e7e4      	b.n	800b696 <__lshift+0x72>

0800b6cc <__mcmp>:
 800b6cc:	6903      	ldr	r3, [r0, #16]
 800b6ce:	690a      	ldr	r2, [r1, #16]
 800b6d0:	1a9b      	subs	r3, r3, r2
 800b6d2:	b530      	push	{r4, r5, lr}
 800b6d4:	d10c      	bne.n	800b6f0 <__mcmp+0x24>
 800b6d6:	0092      	lsls	r2, r2, #2
 800b6d8:	3014      	adds	r0, #20
 800b6da:	3114      	adds	r1, #20
 800b6dc:	1884      	adds	r4, r0, r2
 800b6de:	4411      	add	r1, r2
 800b6e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b6e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b6e8:	4295      	cmp	r5, r2
 800b6ea:	d003      	beq.n	800b6f4 <__mcmp+0x28>
 800b6ec:	d305      	bcc.n	800b6fa <__mcmp+0x2e>
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	bd30      	pop	{r4, r5, pc}
 800b6f4:	42a0      	cmp	r0, r4
 800b6f6:	d3f3      	bcc.n	800b6e0 <__mcmp+0x14>
 800b6f8:	e7fa      	b.n	800b6f0 <__mcmp+0x24>
 800b6fa:	f04f 33ff 	mov.w	r3, #4294967295
 800b6fe:	e7f7      	b.n	800b6f0 <__mcmp+0x24>

0800b700 <__mdiff>:
 800b700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b704:	460d      	mov	r5, r1
 800b706:	4607      	mov	r7, r0
 800b708:	4611      	mov	r1, r2
 800b70a:	4628      	mov	r0, r5
 800b70c:	4614      	mov	r4, r2
 800b70e:	f7ff ffdd 	bl	800b6cc <__mcmp>
 800b712:	1e06      	subs	r6, r0, #0
 800b714:	d108      	bne.n	800b728 <__mdiff+0x28>
 800b716:	4631      	mov	r1, r6
 800b718:	4638      	mov	r0, r7
 800b71a:	f7ff fd84 	bl	800b226 <_Balloc>
 800b71e:	2301      	movs	r3, #1
 800b720:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b728:	bfa4      	itt	ge
 800b72a:	4623      	movge	r3, r4
 800b72c:	462c      	movge	r4, r5
 800b72e:	4638      	mov	r0, r7
 800b730:	6861      	ldr	r1, [r4, #4]
 800b732:	bfa6      	itte	ge
 800b734:	461d      	movge	r5, r3
 800b736:	2600      	movge	r6, #0
 800b738:	2601      	movlt	r6, #1
 800b73a:	f7ff fd74 	bl	800b226 <_Balloc>
 800b73e:	692b      	ldr	r3, [r5, #16]
 800b740:	60c6      	str	r6, [r0, #12]
 800b742:	6926      	ldr	r6, [r4, #16]
 800b744:	f105 0914 	add.w	r9, r5, #20
 800b748:	f104 0214 	add.w	r2, r4, #20
 800b74c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b750:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b754:	f100 0514 	add.w	r5, r0, #20
 800b758:	f04f 0e00 	mov.w	lr, #0
 800b75c:	f852 ab04 	ldr.w	sl, [r2], #4
 800b760:	f859 4b04 	ldr.w	r4, [r9], #4
 800b764:	fa1e f18a 	uxtah	r1, lr, sl
 800b768:	b2a3      	uxth	r3, r4
 800b76a:	1ac9      	subs	r1, r1, r3
 800b76c:	0c23      	lsrs	r3, r4, #16
 800b76e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b772:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b776:	b289      	uxth	r1, r1
 800b778:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b77c:	45c8      	cmp	r8, r9
 800b77e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b782:	4694      	mov	ip, r2
 800b784:	f845 3b04 	str.w	r3, [r5], #4
 800b788:	d8e8      	bhi.n	800b75c <__mdiff+0x5c>
 800b78a:	45bc      	cmp	ip, r7
 800b78c:	d304      	bcc.n	800b798 <__mdiff+0x98>
 800b78e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b792:	b183      	cbz	r3, 800b7b6 <__mdiff+0xb6>
 800b794:	6106      	str	r6, [r0, #16]
 800b796:	e7c5      	b.n	800b724 <__mdiff+0x24>
 800b798:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b79c:	fa1e f381 	uxtah	r3, lr, r1
 800b7a0:	141a      	asrs	r2, r3, #16
 800b7a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b7a6:	b29b      	uxth	r3, r3
 800b7a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7ac:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b7b0:	f845 3b04 	str.w	r3, [r5], #4
 800b7b4:	e7e9      	b.n	800b78a <__mdiff+0x8a>
 800b7b6:	3e01      	subs	r6, #1
 800b7b8:	e7e9      	b.n	800b78e <__mdiff+0x8e>
	...

0800b7bc <__ulp>:
 800b7bc:	4b12      	ldr	r3, [pc, #72]	; (800b808 <__ulp+0x4c>)
 800b7be:	ee10 2a90 	vmov	r2, s1
 800b7c2:	401a      	ands	r2, r3
 800b7c4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	dd04      	ble.n	800b7d6 <__ulp+0x1a>
 800b7cc:	2000      	movs	r0, #0
 800b7ce:	4619      	mov	r1, r3
 800b7d0:	ec41 0b10 	vmov	d0, r0, r1
 800b7d4:	4770      	bx	lr
 800b7d6:	425b      	negs	r3, r3
 800b7d8:	151b      	asrs	r3, r3, #20
 800b7da:	2b13      	cmp	r3, #19
 800b7dc:	f04f 0000 	mov.w	r0, #0
 800b7e0:	f04f 0100 	mov.w	r1, #0
 800b7e4:	dc04      	bgt.n	800b7f0 <__ulp+0x34>
 800b7e6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b7ea:	fa42 f103 	asr.w	r1, r2, r3
 800b7ee:	e7ef      	b.n	800b7d0 <__ulp+0x14>
 800b7f0:	3b14      	subs	r3, #20
 800b7f2:	2b1e      	cmp	r3, #30
 800b7f4:	f04f 0201 	mov.w	r2, #1
 800b7f8:	bfda      	itte	le
 800b7fa:	f1c3 031f 	rsble	r3, r3, #31
 800b7fe:	fa02 f303 	lslle.w	r3, r2, r3
 800b802:	4613      	movgt	r3, r2
 800b804:	4618      	mov	r0, r3
 800b806:	e7e3      	b.n	800b7d0 <__ulp+0x14>
 800b808:	7ff00000 	.word	0x7ff00000

0800b80c <__b2d>:
 800b80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b80e:	6905      	ldr	r5, [r0, #16]
 800b810:	f100 0714 	add.w	r7, r0, #20
 800b814:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b818:	1f2e      	subs	r6, r5, #4
 800b81a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b81e:	4620      	mov	r0, r4
 800b820:	f7ff fdc5 	bl	800b3ae <__hi0bits>
 800b824:	f1c0 0320 	rsb	r3, r0, #32
 800b828:	280a      	cmp	r0, #10
 800b82a:	600b      	str	r3, [r1, #0]
 800b82c:	f8df c074 	ldr.w	ip, [pc, #116]	; 800b8a4 <__b2d+0x98>
 800b830:	dc14      	bgt.n	800b85c <__b2d+0x50>
 800b832:	f1c0 0e0b 	rsb	lr, r0, #11
 800b836:	fa24 f10e 	lsr.w	r1, r4, lr
 800b83a:	42b7      	cmp	r7, r6
 800b83c:	ea41 030c 	orr.w	r3, r1, ip
 800b840:	bf34      	ite	cc
 800b842:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b846:	2100      	movcs	r1, #0
 800b848:	3015      	adds	r0, #21
 800b84a:	fa04 f000 	lsl.w	r0, r4, r0
 800b84e:	fa21 f10e 	lsr.w	r1, r1, lr
 800b852:	ea40 0201 	orr.w	r2, r0, r1
 800b856:	ec43 2b10 	vmov	d0, r2, r3
 800b85a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b85c:	42b7      	cmp	r7, r6
 800b85e:	bf3a      	itte	cc
 800b860:	f1a5 0608 	subcc.w	r6, r5, #8
 800b864:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b868:	2100      	movcs	r1, #0
 800b86a:	380b      	subs	r0, #11
 800b86c:	d015      	beq.n	800b89a <__b2d+0x8e>
 800b86e:	4084      	lsls	r4, r0
 800b870:	f1c0 0520 	rsb	r5, r0, #32
 800b874:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800b878:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800b87c:	42be      	cmp	r6, r7
 800b87e:	fa21 fc05 	lsr.w	ip, r1, r5
 800b882:	ea44 030c 	orr.w	r3, r4, ip
 800b886:	bf8c      	ite	hi
 800b888:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b88c:	2400      	movls	r4, #0
 800b88e:	fa01 f000 	lsl.w	r0, r1, r0
 800b892:	40ec      	lsrs	r4, r5
 800b894:	ea40 0204 	orr.w	r2, r0, r4
 800b898:	e7dd      	b.n	800b856 <__b2d+0x4a>
 800b89a:	ea44 030c 	orr.w	r3, r4, ip
 800b89e:	460a      	mov	r2, r1
 800b8a0:	e7d9      	b.n	800b856 <__b2d+0x4a>
 800b8a2:	bf00      	nop
 800b8a4:	3ff00000 	.word	0x3ff00000

0800b8a8 <__d2b>:
 800b8a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b8ac:	460e      	mov	r6, r1
 800b8ae:	2101      	movs	r1, #1
 800b8b0:	ec59 8b10 	vmov	r8, r9, d0
 800b8b4:	4615      	mov	r5, r2
 800b8b6:	f7ff fcb6 	bl	800b226 <_Balloc>
 800b8ba:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b8be:	4607      	mov	r7, r0
 800b8c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b8c4:	bb34      	cbnz	r4, 800b914 <__d2b+0x6c>
 800b8c6:	9301      	str	r3, [sp, #4]
 800b8c8:	f1b8 0300 	subs.w	r3, r8, #0
 800b8cc:	d027      	beq.n	800b91e <__d2b+0x76>
 800b8ce:	a802      	add	r0, sp, #8
 800b8d0:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b8d4:	f7ff fd8a 	bl	800b3ec <__lo0bits>
 800b8d8:	9900      	ldr	r1, [sp, #0]
 800b8da:	b1f0      	cbz	r0, 800b91a <__d2b+0x72>
 800b8dc:	9a01      	ldr	r2, [sp, #4]
 800b8de:	f1c0 0320 	rsb	r3, r0, #32
 800b8e2:	fa02 f303 	lsl.w	r3, r2, r3
 800b8e6:	430b      	orrs	r3, r1
 800b8e8:	40c2      	lsrs	r2, r0
 800b8ea:	617b      	str	r3, [r7, #20]
 800b8ec:	9201      	str	r2, [sp, #4]
 800b8ee:	9b01      	ldr	r3, [sp, #4]
 800b8f0:	61bb      	str	r3, [r7, #24]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	bf14      	ite	ne
 800b8f6:	2102      	movne	r1, #2
 800b8f8:	2101      	moveq	r1, #1
 800b8fa:	6139      	str	r1, [r7, #16]
 800b8fc:	b1c4      	cbz	r4, 800b930 <__d2b+0x88>
 800b8fe:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b902:	4404      	add	r4, r0
 800b904:	6034      	str	r4, [r6, #0]
 800b906:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b90a:	6028      	str	r0, [r5, #0]
 800b90c:	4638      	mov	r0, r7
 800b90e:	b003      	add	sp, #12
 800b910:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b914:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b918:	e7d5      	b.n	800b8c6 <__d2b+0x1e>
 800b91a:	6179      	str	r1, [r7, #20]
 800b91c:	e7e7      	b.n	800b8ee <__d2b+0x46>
 800b91e:	a801      	add	r0, sp, #4
 800b920:	f7ff fd64 	bl	800b3ec <__lo0bits>
 800b924:	9b01      	ldr	r3, [sp, #4]
 800b926:	617b      	str	r3, [r7, #20]
 800b928:	2101      	movs	r1, #1
 800b92a:	6139      	str	r1, [r7, #16]
 800b92c:	3020      	adds	r0, #32
 800b92e:	e7e5      	b.n	800b8fc <__d2b+0x54>
 800b930:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b934:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b938:	6030      	str	r0, [r6, #0]
 800b93a:	6918      	ldr	r0, [r3, #16]
 800b93c:	f7ff fd37 	bl	800b3ae <__hi0bits>
 800b940:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b944:	e7e1      	b.n	800b90a <__d2b+0x62>

0800b946 <__ratio>:
 800b946:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b94a:	4688      	mov	r8, r1
 800b94c:	4669      	mov	r1, sp
 800b94e:	4681      	mov	r9, r0
 800b950:	f7ff ff5c 	bl	800b80c <__b2d>
 800b954:	a901      	add	r1, sp, #4
 800b956:	4640      	mov	r0, r8
 800b958:	ec57 6b10 	vmov	r6, r7, d0
 800b95c:	f7ff ff56 	bl	800b80c <__b2d>
 800b960:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b964:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b968:	eba3 0c02 	sub.w	ip, r3, r2
 800b96c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b970:	1a9b      	subs	r3, r3, r2
 800b972:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b976:	ec5b ab10 	vmov	sl, fp, d0
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	bfce      	itee	gt
 800b97e:	463a      	movgt	r2, r7
 800b980:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b984:	465a      	movle	r2, fp
 800b986:	4659      	mov	r1, fp
 800b988:	463d      	mov	r5, r7
 800b98a:	bfd4      	ite	le
 800b98c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800b990:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800b994:	4630      	mov	r0, r6
 800b996:	ee10 2a10 	vmov	r2, s0
 800b99a:	460b      	mov	r3, r1
 800b99c:	4629      	mov	r1, r5
 800b99e:	f7f4 ff55 	bl	800084c <__aeabi_ddiv>
 800b9a2:	ec41 0b10 	vmov	d0, r0, r1
 800b9a6:	b003      	add	sp, #12
 800b9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b9ac <__copybits>:
 800b9ac:	3901      	subs	r1, #1
 800b9ae:	b510      	push	{r4, lr}
 800b9b0:	1149      	asrs	r1, r1, #5
 800b9b2:	6914      	ldr	r4, [r2, #16]
 800b9b4:	3101      	adds	r1, #1
 800b9b6:	f102 0314 	add.w	r3, r2, #20
 800b9ba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b9be:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b9c2:	42a3      	cmp	r3, r4
 800b9c4:	4602      	mov	r2, r0
 800b9c6:	d303      	bcc.n	800b9d0 <__copybits+0x24>
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	428a      	cmp	r2, r1
 800b9cc:	d305      	bcc.n	800b9da <__copybits+0x2e>
 800b9ce:	bd10      	pop	{r4, pc}
 800b9d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9d4:	f840 2b04 	str.w	r2, [r0], #4
 800b9d8:	e7f3      	b.n	800b9c2 <__copybits+0x16>
 800b9da:	f842 3b04 	str.w	r3, [r2], #4
 800b9de:	e7f4      	b.n	800b9ca <__copybits+0x1e>

0800b9e0 <__any_on>:
 800b9e0:	f100 0214 	add.w	r2, r0, #20
 800b9e4:	6900      	ldr	r0, [r0, #16]
 800b9e6:	114b      	asrs	r3, r1, #5
 800b9e8:	4298      	cmp	r0, r3
 800b9ea:	b510      	push	{r4, lr}
 800b9ec:	db11      	blt.n	800ba12 <__any_on+0x32>
 800b9ee:	dd0a      	ble.n	800ba06 <__any_on+0x26>
 800b9f0:	f011 011f 	ands.w	r1, r1, #31
 800b9f4:	d007      	beq.n	800ba06 <__any_on+0x26>
 800b9f6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b9fa:	fa24 f001 	lsr.w	r0, r4, r1
 800b9fe:	fa00 f101 	lsl.w	r1, r0, r1
 800ba02:	428c      	cmp	r4, r1
 800ba04:	d10b      	bne.n	800ba1e <__any_on+0x3e>
 800ba06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d803      	bhi.n	800ba16 <__any_on+0x36>
 800ba0e:	2000      	movs	r0, #0
 800ba10:	bd10      	pop	{r4, pc}
 800ba12:	4603      	mov	r3, r0
 800ba14:	e7f7      	b.n	800ba06 <__any_on+0x26>
 800ba16:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ba1a:	2900      	cmp	r1, #0
 800ba1c:	d0f5      	beq.n	800ba0a <__any_on+0x2a>
 800ba1e:	2001      	movs	r0, #1
 800ba20:	e7f6      	b.n	800ba10 <__any_on+0x30>

0800ba22 <_calloc_r>:
 800ba22:	b538      	push	{r3, r4, r5, lr}
 800ba24:	fb02 f401 	mul.w	r4, r2, r1
 800ba28:	4621      	mov	r1, r4
 800ba2a:	f000 f857 	bl	800badc <_malloc_r>
 800ba2e:	4605      	mov	r5, r0
 800ba30:	b118      	cbz	r0, 800ba3a <_calloc_r+0x18>
 800ba32:	4622      	mov	r2, r4
 800ba34:	2100      	movs	r1, #0
 800ba36:	f7fc fcef 	bl	8008418 <memset>
 800ba3a:	4628      	mov	r0, r5
 800ba3c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800ba40 <_free_r>:
 800ba40:	b538      	push	{r3, r4, r5, lr}
 800ba42:	4605      	mov	r5, r0
 800ba44:	2900      	cmp	r1, #0
 800ba46:	d045      	beq.n	800bad4 <_free_r+0x94>
 800ba48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba4c:	1f0c      	subs	r4, r1, #4
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	bfb8      	it	lt
 800ba52:	18e4      	addlt	r4, r4, r3
 800ba54:	f000 fa24 	bl	800bea0 <__malloc_lock>
 800ba58:	4a1f      	ldr	r2, [pc, #124]	; (800bad8 <_free_r+0x98>)
 800ba5a:	6813      	ldr	r3, [r2, #0]
 800ba5c:	4610      	mov	r0, r2
 800ba5e:	b933      	cbnz	r3, 800ba6e <_free_r+0x2e>
 800ba60:	6063      	str	r3, [r4, #4]
 800ba62:	6014      	str	r4, [r2, #0]
 800ba64:	4628      	mov	r0, r5
 800ba66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba6a:	f000 ba1a 	b.w	800bea2 <__malloc_unlock>
 800ba6e:	42a3      	cmp	r3, r4
 800ba70:	d90c      	bls.n	800ba8c <_free_r+0x4c>
 800ba72:	6821      	ldr	r1, [r4, #0]
 800ba74:	1862      	adds	r2, r4, r1
 800ba76:	4293      	cmp	r3, r2
 800ba78:	bf04      	itt	eq
 800ba7a:	681a      	ldreq	r2, [r3, #0]
 800ba7c:	685b      	ldreq	r3, [r3, #4]
 800ba7e:	6063      	str	r3, [r4, #4]
 800ba80:	bf04      	itt	eq
 800ba82:	1852      	addeq	r2, r2, r1
 800ba84:	6022      	streq	r2, [r4, #0]
 800ba86:	6004      	str	r4, [r0, #0]
 800ba88:	e7ec      	b.n	800ba64 <_free_r+0x24>
 800ba8a:	4613      	mov	r3, r2
 800ba8c:	685a      	ldr	r2, [r3, #4]
 800ba8e:	b10a      	cbz	r2, 800ba94 <_free_r+0x54>
 800ba90:	42a2      	cmp	r2, r4
 800ba92:	d9fa      	bls.n	800ba8a <_free_r+0x4a>
 800ba94:	6819      	ldr	r1, [r3, #0]
 800ba96:	1858      	adds	r0, r3, r1
 800ba98:	42a0      	cmp	r0, r4
 800ba9a:	d10b      	bne.n	800bab4 <_free_r+0x74>
 800ba9c:	6820      	ldr	r0, [r4, #0]
 800ba9e:	4401      	add	r1, r0
 800baa0:	1858      	adds	r0, r3, r1
 800baa2:	4282      	cmp	r2, r0
 800baa4:	6019      	str	r1, [r3, #0]
 800baa6:	d1dd      	bne.n	800ba64 <_free_r+0x24>
 800baa8:	6810      	ldr	r0, [r2, #0]
 800baaa:	6852      	ldr	r2, [r2, #4]
 800baac:	605a      	str	r2, [r3, #4]
 800baae:	4401      	add	r1, r0
 800bab0:	6019      	str	r1, [r3, #0]
 800bab2:	e7d7      	b.n	800ba64 <_free_r+0x24>
 800bab4:	d902      	bls.n	800babc <_free_r+0x7c>
 800bab6:	230c      	movs	r3, #12
 800bab8:	602b      	str	r3, [r5, #0]
 800baba:	e7d3      	b.n	800ba64 <_free_r+0x24>
 800babc:	6820      	ldr	r0, [r4, #0]
 800babe:	1821      	adds	r1, r4, r0
 800bac0:	428a      	cmp	r2, r1
 800bac2:	bf04      	itt	eq
 800bac4:	6811      	ldreq	r1, [r2, #0]
 800bac6:	6852      	ldreq	r2, [r2, #4]
 800bac8:	6062      	str	r2, [r4, #4]
 800baca:	bf04      	itt	eq
 800bacc:	1809      	addeq	r1, r1, r0
 800bace:	6021      	streq	r1, [r4, #0]
 800bad0:	605c      	str	r4, [r3, #4]
 800bad2:	e7c7      	b.n	800ba64 <_free_r+0x24>
 800bad4:	bd38      	pop	{r3, r4, r5, pc}
 800bad6:	bf00      	nop
 800bad8:	20000828 	.word	0x20000828

0800badc <_malloc_r>:
 800badc:	b570      	push	{r4, r5, r6, lr}
 800bade:	1ccd      	adds	r5, r1, #3
 800bae0:	f025 0503 	bic.w	r5, r5, #3
 800bae4:	3508      	adds	r5, #8
 800bae6:	2d0c      	cmp	r5, #12
 800bae8:	bf38      	it	cc
 800baea:	250c      	movcc	r5, #12
 800baec:	2d00      	cmp	r5, #0
 800baee:	4606      	mov	r6, r0
 800baf0:	db01      	blt.n	800baf6 <_malloc_r+0x1a>
 800baf2:	42a9      	cmp	r1, r5
 800baf4:	d903      	bls.n	800bafe <_malloc_r+0x22>
 800baf6:	230c      	movs	r3, #12
 800baf8:	6033      	str	r3, [r6, #0]
 800bafa:	2000      	movs	r0, #0
 800bafc:	bd70      	pop	{r4, r5, r6, pc}
 800bafe:	f000 f9cf 	bl	800bea0 <__malloc_lock>
 800bb02:	4a21      	ldr	r2, [pc, #132]	; (800bb88 <_malloc_r+0xac>)
 800bb04:	6814      	ldr	r4, [r2, #0]
 800bb06:	4621      	mov	r1, r4
 800bb08:	b991      	cbnz	r1, 800bb30 <_malloc_r+0x54>
 800bb0a:	4c20      	ldr	r4, [pc, #128]	; (800bb8c <_malloc_r+0xb0>)
 800bb0c:	6823      	ldr	r3, [r4, #0]
 800bb0e:	b91b      	cbnz	r3, 800bb18 <_malloc_r+0x3c>
 800bb10:	4630      	mov	r0, r6
 800bb12:	f000 f98f 	bl	800be34 <_sbrk_r>
 800bb16:	6020      	str	r0, [r4, #0]
 800bb18:	4629      	mov	r1, r5
 800bb1a:	4630      	mov	r0, r6
 800bb1c:	f000 f98a 	bl	800be34 <_sbrk_r>
 800bb20:	1c43      	adds	r3, r0, #1
 800bb22:	d124      	bne.n	800bb6e <_malloc_r+0x92>
 800bb24:	230c      	movs	r3, #12
 800bb26:	6033      	str	r3, [r6, #0]
 800bb28:	4630      	mov	r0, r6
 800bb2a:	f000 f9ba 	bl	800bea2 <__malloc_unlock>
 800bb2e:	e7e4      	b.n	800bafa <_malloc_r+0x1e>
 800bb30:	680b      	ldr	r3, [r1, #0]
 800bb32:	1b5b      	subs	r3, r3, r5
 800bb34:	d418      	bmi.n	800bb68 <_malloc_r+0x8c>
 800bb36:	2b0b      	cmp	r3, #11
 800bb38:	d90f      	bls.n	800bb5a <_malloc_r+0x7e>
 800bb3a:	600b      	str	r3, [r1, #0]
 800bb3c:	50cd      	str	r5, [r1, r3]
 800bb3e:	18cc      	adds	r4, r1, r3
 800bb40:	4630      	mov	r0, r6
 800bb42:	f000 f9ae 	bl	800bea2 <__malloc_unlock>
 800bb46:	f104 000b 	add.w	r0, r4, #11
 800bb4a:	1d23      	adds	r3, r4, #4
 800bb4c:	f020 0007 	bic.w	r0, r0, #7
 800bb50:	1ac3      	subs	r3, r0, r3
 800bb52:	d0d3      	beq.n	800bafc <_malloc_r+0x20>
 800bb54:	425a      	negs	r2, r3
 800bb56:	50e2      	str	r2, [r4, r3]
 800bb58:	e7d0      	b.n	800bafc <_malloc_r+0x20>
 800bb5a:	428c      	cmp	r4, r1
 800bb5c:	684b      	ldr	r3, [r1, #4]
 800bb5e:	bf16      	itet	ne
 800bb60:	6063      	strne	r3, [r4, #4]
 800bb62:	6013      	streq	r3, [r2, #0]
 800bb64:	460c      	movne	r4, r1
 800bb66:	e7eb      	b.n	800bb40 <_malloc_r+0x64>
 800bb68:	460c      	mov	r4, r1
 800bb6a:	6849      	ldr	r1, [r1, #4]
 800bb6c:	e7cc      	b.n	800bb08 <_malloc_r+0x2c>
 800bb6e:	1cc4      	adds	r4, r0, #3
 800bb70:	f024 0403 	bic.w	r4, r4, #3
 800bb74:	42a0      	cmp	r0, r4
 800bb76:	d005      	beq.n	800bb84 <_malloc_r+0xa8>
 800bb78:	1a21      	subs	r1, r4, r0
 800bb7a:	4630      	mov	r0, r6
 800bb7c:	f000 f95a 	bl	800be34 <_sbrk_r>
 800bb80:	3001      	adds	r0, #1
 800bb82:	d0cf      	beq.n	800bb24 <_malloc_r+0x48>
 800bb84:	6025      	str	r5, [r4, #0]
 800bb86:	e7db      	b.n	800bb40 <_malloc_r+0x64>
 800bb88:	20000828 	.word	0x20000828
 800bb8c:	2000082c 	.word	0x2000082c

0800bb90 <__ssputs_r>:
 800bb90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb94:	688e      	ldr	r6, [r1, #8]
 800bb96:	429e      	cmp	r6, r3
 800bb98:	4682      	mov	sl, r0
 800bb9a:	460c      	mov	r4, r1
 800bb9c:	4690      	mov	r8, r2
 800bb9e:	4699      	mov	r9, r3
 800bba0:	d837      	bhi.n	800bc12 <__ssputs_r+0x82>
 800bba2:	898a      	ldrh	r2, [r1, #12]
 800bba4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bba8:	d031      	beq.n	800bc0e <__ssputs_r+0x7e>
 800bbaa:	6825      	ldr	r5, [r4, #0]
 800bbac:	6909      	ldr	r1, [r1, #16]
 800bbae:	1a6f      	subs	r7, r5, r1
 800bbb0:	6965      	ldr	r5, [r4, #20]
 800bbb2:	2302      	movs	r3, #2
 800bbb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bbb8:	fb95 f5f3 	sdiv	r5, r5, r3
 800bbbc:	f109 0301 	add.w	r3, r9, #1
 800bbc0:	443b      	add	r3, r7
 800bbc2:	429d      	cmp	r5, r3
 800bbc4:	bf38      	it	cc
 800bbc6:	461d      	movcc	r5, r3
 800bbc8:	0553      	lsls	r3, r2, #21
 800bbca:	d530      	bpl.n	800bc2e <__ssputs_r+0x9e>
 800bbcc:	4629      	mov	r1, r5
 800bbce:	f7ff ff85 	bl	800badc <_malloc_r>
 800bbd2:	4606      	mov	r6, r0
 800bbd4:	b950      	cbnz	r0, 800bbec <__ssputs_r+0x5c>
 800bbd6:	230c      	movs	r3, #12
 800bbd8:	f8ca 3000 	str.w	r3, [sl]
 800bbdc:	89a3      	ldrh	r3, [r4, #12]
 800bbde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbe2:	81a3      	strh	r3, [r4, #12]
 800bbe4:	f04f 30ff 	mov.w	r0, #4294967295
 800bbe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbec:	463a      	mov	r2, r7
 800bbee:	6921      	ldr	r1, [r4, #16]
 800bbf0:	f7ff fb0e 	bl	800b210 <memcpy>
 800bbf4:	89a3      	ldrh	r3, [r4, #12]
 800bbf6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bbfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbfe:	81a3      	strh	r3, [r4, #12]
 800bc00:	6126      	str	r6, [r4, #16]
 800bc02:	6165      	str	r5, [r4, #20]
 800bc04:	443e      	add	r6, r7
 800bc06:	1bed      	subs	r5, r5, r7
 800bc08:	6026      	str	r6, [r4, #0]
 800bc0a:	60a5      	str	r5, [r4, #8]
 800bc0c:	464e      	mov	r6, r9
 800bc0e:	454e      	cmp	r6, r9
 800bc10:	d900      	bls.n	800bc14 <__ssputs_r+0x84>
 800bc12:	464e      	mov	r6, r9
 800bc14:	4632      	mov	r2, r6
 800bc16:	4641      	mov	r1, r8
 800bc18:	6820      	ldr	r0, [r4, #0]
 800bc1a:	f000 f928 	bl	800be6e <memmove>
 800bc1e:	68a3      	ldr	r3, [r4, #8]
 800bc20:	1b9b      	subs	r3, r3, r6
 800bc22:	60a3      	str	r3, [r4, #8]
 800bc24:	6823      	ldr	r3, [r4, #0]
 800bc26:	441e      	add	r6, r3
 800bc28:	6026      	str	r6, [r4, #0]
 800bc2a:	2000      	movs	r0, #0
 800bc2c:	e7dc      	b.n	800bbe8 <__ssputs_r+0x58>
 800bc2e:	462a      	mov	r2, r5
 800bc30:	f000 f938 	bl	800bea4 <_realloc_r>
 800bc34:	4606      	mov	r6, r0
 800bc36:	2800      	cmp	r0, #0
 800bc38:	d1e2      	bne.n	800bc00 <__ssputs_r+0x70>
 800bc3a:	6921      	ldr	r1, [r4, #16]
 800bc3c:	4650      	mov	r0, sl
 800bc3e:	f7ff feff 	bl	800ba40 <_free_r>
 800bc42:	e7c8      	b.n	800bbd6 <__ssputs_r+0x46>

0800bc44 <_svfiprintf_r>:
 800bc44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc48:	461d      	mov	r5, r3
 800bc4a:	898b      	ldrh	r3, [r1, #12]
 800bc4c:	061f      	lsls	r7, r3, #24
 800bc4e:	b09d      	sub	sp, #116	; 0x74
 800bc50:	4680      	mov	r8, r0
 800bc52:	460c      	mov	r4, r1
 800bc54:	4616      	mov	r6, r2
 800bc56:	d50f      	bpl.n	800bc78 <_svfiprintf_r+0x34>
 800bc58:	690b      	ldr	r3, [r1, #16]
 800bc5a:	b96b      	cbnz	r3, 800bc78 <_svfiprintf_r+0x34>
 800bc5c:	2140      	movs	r1, #64	; 0x40
 800bc5e:	f7ff ff3d 	bl	800badc <_malloc_r>
 800bc62:	6020      	str	r0, [r4, #0]
 800bc64:	6120      	str	r0, [r4, #16]
 800bc66:	b928      	cbnz	r0, 800bc74 <_svfiprintf_r+0x30>
 800bc68:	230c      	movs	r3, #12
 800bc6a:	f8c8 3000 	str.w	r3, [r8]
 800bc6e:	f04f 30ff 	mov.w	r0, #4294967295
 800bc72:	e0c8      	b.n	800be06 <_svfiprintf_r+0x1c2>
 800bc74:	2340      	movs	r3, #64	; 0x40
 800bc76:	6163      	str	r3, [r4, #20]
 800bc78:	2300      	movs	r3, #0
 800bc7a:	9309      	str	r3, [sp, #36]	; 0x24
 800bc7c:	2320      	movs	r3, #32
 800bc7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc82:	2330      	movs	r3, #48	; 0x30
 800bc84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc88:	9503      	str	r5, [sp, #12]
 800bc8a:	f04f 0b01 	mov.w	fp, #1
 800bc8e:	4637      	mov	r7, r6
 800bc90:	463d      	mov	r5, r7
 800bc92:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bc96:	b10b      	cbz	r3, 800bc9c <_svfiprintf_r+0x58>
 800bc98:	2b25      	cmp	r3, #37	; 0x25
 800bc9a:	d13e      	bne.n	800bd1a <_svfiprintf_r+0xd6>
 800bc9c:	ebb7 0a06 	subs.w	sl, r7, r6
 800bca0:	d00b      	beq.n	800bcba <_svfiprintf_r+0x76>
 800bca2:	4653      	mov	r3, sl
 800bca4:	4632      	mov	r2, r6
 800bca6:	4621      	mov	r1, r4
 800bca8:	4640      	mov	r0, r8
 800bcaa:	f7ff ff71 	bl	800bb90 <__ssputs_r>
 800bcae:	3001      	adds	r0, #1
 800bcb0:	f000 80a4 	beq.w	800bdfc <_svfiprintf_r+0x1b8>
 800bcb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcb6:	4453      	add	r3, sl
 800bcb8:	9309      	str	r3, [sp, #36]	; 0x24
 800bcba:	783b      	ldrb	r3, [r7, #0]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	f000 809d 	beq.w	800bdfc <_svfiprintf_r+0x1b8>
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	f04f 32ff 	mov.w	r2, #4294967295
 800bcc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bccc:	9304      	str	r3, [sp, #16]
 800bcce:	9307      	str	r3, [sp, #28]
 800bcd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bcd4:	931a      	str	r3, [sp, #104]	; 0x68
 800bcd6:	462f      	mov	r7, r5
 800bcd8:	2205      	movs	r2, #5
 800bcda:	f817 1b01 	ldrb.w	r1, [r7], #1
 800bcde:	4850      	ldr	r0, [pc, #320]	; (800be20 <_svfiprintf_r+0x1dc>)
 800bce0:	f7f4 fa76 	bl	80001d0 <memchr>
 800bce4:	9b04      	ldr	r3, [sp, #16]
 800bce6:	b9d0      	cbnz	r0, 800bd1e <_svfiprintf_r+0xda>
 800bce8:	06d9      	lsls	r1, r3, #27
 800bcea:	bf44      	itt	mi
 800bcec:	2220      	movmi	r2, #32
 800bcee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bcf2:	071a      	lsls	r2, r3, #28
 800bcf4:	bf44      	itt	mi
 800bcf6:	222b      	movmi	r2, #43	; 0x2b
 800bcf8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bcfc:	782a      	ldrb	r2, [r5, #0]
 800bcfe:	2a2a      	cmp	r2, #42	; 0x2a
 800bd00:	d015      	beq.n	800bd2e <_svfiprintf_r+0xea>
 800bd02:	9a07      	ldr	r2, [sp, #28]
 800bd04:	462f      	mov	r7, r5
 800bd06:	2000      	movs	r0, #0
 800bd08:	250a      	movs	r5, #10
 800bd0a:	4639      	mov	r1, r7
 800bd0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd10:	3b30      	subs	r3, #48	; 0x30
 800bd12:	2b09      	cmp	r3, #9
 800bd14:	d94d      	bls.n	800bdb2 <_svfiprintf_r+0x16e>
 800bd16:	b1b8      	cbz	r0, 800bd48 <_svfiprintf_r+0x104>
 800bd18:	e00f      	b.n	800bd3a <_svfiprintf_r+0xf6>
 800bd1a:	462f      	mov	r7, r5
 800bd1c:	e7b8      	b.n	800bc90 <_svfiprintf_r+0x4c>
 800bd1e:	4a40      	ldr	r2, [pc, #256]	; (800be20 <_svfiprintf_r+0x1dc>)
 800bd20:	1a80      	subs	r0, r0, r2
 800bd22:	fa0b f000 	lsl.w	r0, fp, r0
 800bd26:	4318      	orrs	r0, r3
 800bd28:	9004      	str	r0, [sp, #16]
 800bd2a:	463d      	mov	r5, r7
 800bd2c:	e7d3      	b.n	800bcd6 <_svfiprintf_r+0x92>
 800bd2e:	9a03      	ldr	r2, [sp, #12]
 800bd30:	1d11      	adds	r1, r2, #4
 800bd32:	6812      	ldr	r2, [r2, #0]
 800bd34:	9103      	str	r1, [sp, #12]
 800bd36:	2a00      	cmp	r2, #0
 800bd38:	db01      	blt.n	800bd3e <_svfiprintf_r+0xfa>
 800bd3a:	9207      	str	r2, [sp, #28]
 800bd3c:	e004      	b.n	800bd48 <_svfiprintf_r+0x104>
 800bd3e:	4252      	negs	r2, r2
 800bd40:	f043 0302 	orr.w	r3, r3, #2
 800bd44:	9207      	str	r2, [sp, #28]
 800bd46:	9304      	str	r3, [sp, #16]
 800bd48:	783b      	ldrb	r3, [r7, #0]
 800bd4a:	2b2e      	cmp	r3, #46	; 0x2e
 800bd4c:	d10c      	bne.n	800bd68 <_svfiprintf_r+0x124>
 800bd4e:	787b      	ldrb	r3, [r7, #1]
 800bd50:	2b2a      	cmp	r3, #42	; 0x2a
 800bd52:	d133      	bne.n	800bdbc <_svfiprintf_r+0x178>
 800bd54:	9b03      	ldr	r3, [sp, #12]
 800bd56:	1d1a      	adds	r2, r3, #4
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	9203      	str	r2, [sp, #12]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	bfb8      	it	lt
 800bd60:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd64:	3702      	adds	r7, #2
 800bd66:	9305      	str	r3, [sp, #20]
 800bd68:	4d2e      	ldr	r5, [pc, #184]	; (800be24 <_svfiprintf_r+0x1e0>)
 800bd6a:	7839      	ldrb	r1, [r7, #0]
 800bd6c:	2203      	movs	r2, #3
 800bd6e:	4628      	mov	r0, r5
 800bd70:	f7f4 fa2e 	bl	80001d0 <memchr>
 800bd74:	b138      	cbz	r0, 800bd86 <_svfiprintf_r+0x142>
 800bd76:	2340      	movs	r3, #64	; 0x40
 800bd78:	1b40      	subs	r0, r0, r5
 800bd7a:	fa03 f000 	lsl.w	r0, r3, r0
 800bd7e:	9b04      	ldr	r3, [sp, #16]
 800bd80:	4303      	orrs	r3, r0
 800bd82:	3701      	adds	r7, #1
 800bd84:	9304      	str	r3, [sp, #16]
 800bd86:	7839      	ldrb	r1, [r7, #0]
 800bd88:	4827      	ldr	r0, [pc, #156]	; (800be28 <_svfiprintf_r+0x1e4>)
 800bd8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd8e:	2206      	movs	r2, #6
 800bd90:	1c7e      	adds	r6, r7, #1
 800bd92:	f7f4 fa1d 	bl	80001d0 <memchr>
 800bd96:	2800      	cmp	r0, #0
 800bd98:	d038      	beq.n	800be0c <_svfiprintf_r+0x1c8>
 800bd9a:	4b24      	ldr	r3, [pc, #144]	; (800be2c <_svfiprintf_r+0x1e8>)
 800bd9c:	bb13      	cbnz	r3, 800bde4 <_svfiprintf_r+0x1a0>
 800bd9e:	9b03      	ldr	r3, [sp, #12]
 800bda0:	3307      	adds	r3, #7
 800bda2:	f023 0307 	bic.w	r3, r3, #7
 800bda6:	3308      	adds	r3, #8
 800bda8:	9303      	str	r3, [sp, #12]
 800bdaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdac:	444b      	add	r3, r9
 800bdae:	9309      	str	r3, [sp, #36]	; 0x24
 800bdb0:	e76d      	b.n	800bc8e <_svfiprintf_r+0x4a>
 800bdb2:	fb05 3202 	mla	r2, r5, r2, r3
 800bdb6:	2001      	movs	r0, #1
 800bdb8:	460f      	mov	r7, r1
 800bdba:	e7a6      	b.n	800bd0a <_svfiprintf_r+0xc6>
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	3701      	adds	r7, #1
 800bdc0:	9305      	str	r3, [sp, #20]
 800bdc2:	4619      	mov	r1, r3
 800bdc4:	250a      	movs	r5, #10
 800bdc6:	4638      	mov	r0, r7
 800bdc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdcc:	3a30      	subs	r2, #48	; 0x30
 800bdce:	2a09      	cmp	r2, #9
 800bdd0:	d903      	bls.n	800bdda <_svfiprintf_r+0x196>
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d0c8      	beq.n	800bd68 <_svfiprintf_r+0x124>
 800bdd6:	9105      	str	r1, [sp, #20]
 800bdd8:	e7c6      	b.n	800bd68 <_svfiprintf_r+0x124>
 800bdda:	fb05 2101 	mla	r1, r5, r1, r2
 800bdde:	2301      	movs	r3, #1
 800bde0:	4607      	mov	r7, r0
 800bde2:	e7f0      	b.n	800bdc6 <_svfiprintf_r+0x182>
 800bde4:	ab03      	add	r3, sp, #12
 800bde6:	9300      	str	r3, [sp, #0]
 800bde8:	4622      	mov	r2, r4
 800bdea:	4b11      	ldr	r3, [pc, #68]	; (800be30 <_svfiprintf_r+0x1ec>)
 800bdec:	a904      	add	r1, sp, #16
 800bdee:	4640      	mov	r0, r8
 800bdf0:	f7fc fbae 	bl	8008550 <_printf_float>
 800bdf4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bdf8:	4681      	mov	r9, r0
 800bdfa:	d1d6      	bne.n	800bdaa <_svfiprintf_r+0x166>
 800bdfc:	89a3      	ldrh	r3, [r4, #12]
 800bdfe:	065b      	lsls	r3, r3, #25
 800be00:	f53f af35 	bmi.w	800bc6e <_svfiprintf_r+0x2a>
 800be04:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be06:	b01d      	add	sp, #116	; 0x74
 800be08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be0c:	ab03      	add	r3, sp, #12
 800be0e:	9300      	str	r3, [sp, #0]
 800be10:	4622      	mov	r2, r4
 800be12:	4b07      	ldr	r3, [pc, #28]	; (800be30 <_svfiprintf_r+0x1ec>)
 800be14:	a904      	add	r1, sp, #16
 800be16:	4640      	mov	r0, r8
 800be18:	f7fc fe50 	bl	8008abc <_printf_i>
 800be1c:	e7ea      	b.n	800bdf4 <_svfiprintf_r+0x1b0>
 800be1e:	bf00      	nop
 800be20:	0800c72c 	.word	0x0800c72c
 800be24:	0800c732 	.word	0x0800c732
 800be28:	0800c736 	.word	0x0800c736
 800be2c:	08008551 	.word	0x08008551
 800be30:	0800bb91 	.word	0x0800bb91

0800be34 <_sbrk_r>:
 800be34:	b538      	push	{r3, r4, r5, lr}
 800be36:	4c06      	ldr	r4, [pc, #24]	; (800be50 <_sbrk_r+0x1c>)
 800be38:	2300      	movs	r3, #0
 800be3a:	4605      	mov	r5, r0
 800be3c:	4608      	mov	r0, r1
 800be3e:	6023      	str	r3, [r4, #0]
 800be40:	f7f7 fb5a 	bl	80034f8 <_sbrk>
 800be44:	1c43      	adds	r3, r0, #1
 800be46:	d102      	bne.n	800be4e <_sbrk_r+0x1a>
 800be48:	6823      	ldr	r3, [r4, #0]
 800be4a:	b103      	cbz	r3, 800be4e <_sbrk_r+0x1a>
 800be4c:	602b      	str	r3, [r5, #0]
 800be4e:	bd38      	pop	{r3, r4, r5, pc}
 800be50:	200012d8 	.word	0x200012d8

0800be54 <__ascii_wctomb>:
 800be54:	b149      	cbz	r1, 800be6a <__ascii_wctomb+0x16>
 800be56:	2aff      	cmp	r2, #255	; 0xff
 800be58:	bf85      	ittet	hi
 800be5a:	238a      	movhi	r3, #138	; 0x8a
 800be5c:	6003      	strhi	r3, [r0, #0]
 800be5e:	700a      	strbls	r2, [r1, #0]
 800be60:	f04f 30ff 	movhi.w	r0, #4294967295
 800be64:	bf98      	it	ls
 800be66:	2001      	movls	r0, #1
 800be68:	4770      	bx	lr
 800be6a:	4608      	mov	r0, r1
 800be6c:	4770      	bx	lr

0800be6e <memmove>:
 800be6e:	4288      	cmp	r0, r1
 800be70:	b510      	push	{r4, lr}
 800be72:	eb01 0302 	add.w	r3, r1, r2
 800be76:	d807      	bhi.n	800be88 <memmove+0x1a>
 800be78:	1e42      	subs	r2, r0, #1
 800be7a:	4299      	cmp	r1, r3
 800be7c:	d00a      	beq.n	800be94 <memmove+0x26>
 800be7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be82:	f802 4f01 	strb.w	r4, [r2, #1]!
 800be86:	e7f8      	b.n	800be7a <memmove+0xc>
 800be88:	4283      	cmp	r3, r0
 800be8a:	d9f5      	bls.n	800be78 <memmove+0xa>
 800be8c:	1881      	adds	r1, r0, r2
 800be8e:	1ad2      	subs	r2, r2, r3
 800be90:	42d3      	cmn	r3, r2
 800be92:	d100      	bne.n	800be96 <memmove+0x28>
 800be94:	bd10      	pop	{r4, pc}
 800be96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be9a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800be9e:	e7f7      	b.n	800be90 <memmove+0x22>

0800bea0 <__malloc_lock>:
 800bea0:	4770      	bx	lr

0800bea2 <__malloc_unlock>:
 800bea2:	4770      	bx	lr

0800bea4 <_realloc_r>:
 800bea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bea6:	4607      	mov	r7, r0
 800bea8:	4614      	mov	r4, r2
 800beaa:	460e      	mov	r6, r1
 800beac:	b921      	cbnz	r1, 800beb8 <_realloc_r+0x14>
 800beae:	4611      	mov	r1, r2
 800beb0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800beb4:	f7ff be12 	b.w	800badc <_malloc_r>
 800beb8:	b922      	cbnz	r2, 800bec4 <_realloc_r+0x20>
 800beba:	f7ff fdc1 	bl	800ba40 <_free_r>
 800bebe:	4625      	mov	r5, r4
 800bec0:	4628      	mov	r0, r5
 800bec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bec4:	f000 f814 	bl	800bef0 <_malloc_usable_size_r>
 800bec8:	42a0      	cmp	r0, r4
 800beca:	d20f      	bcs.n	800beec <_realloc_r+0x48>
 800becc:	4621      	mov	r1, r4
 800bece:	4638      	mov	r0, r7
 800bed0:	f7ff fe04 	bl	800badc <_malloc_r>
 800bed4:	4605      	mov	r5, r0
 800bed6:	2800      	cmp	r0, #0
 800bed8:	d0f2      	beq.n	800bec0 <_realloc_r+0x1c>
 800beda:	4631      	mov	r1, r6
 800bedc:	4622      	mov	r2, r4
 800bede:	f7ff f997 	bl	800b210 <memcpy>
 800bee2:	4631      	mov	r1, r6
 800bee4:	4638      	mov	r0, r7
 800bee6:	f7ff fdab 	bl	800ba40 <_free_r>
 800beea:	e7e9      	b.n	800bec0 <_realloc_r+0x1c>
 800beec:	4635      	mov	r5, r6
 800beee:	e7e7      	b.n	800bec0 <_realloc_r+0x1c>

0800bef0 <_malloc_usable_size_r>:
 800bef0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bef4:	1f18      	subs	r0, r3, #4
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	bfbc      	itt	lt
 800befa:	580b      	ldrlt	r3, [r1, r0]
 800befc:	18c0      	addlt	r0, r0, r3
 800befe:	4770      	bx	lr

0800bf00 <atan2>:
 800bf00:	f000 b802 	b.w	800bf08 <__ieee754_atan2>
 800bf04:	0000      	movs	r0, r0
	...

0800bf08 <__ieee754_atan2>:
 800bf08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf0c:	ec57 6b11 	vmov	r6, r7, d1
 800bf10:	4273      	negs	r3, r6
 800bf12:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800bf16:	4333      	orrs	r3, r6
 800bf18:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800c0c0 <__ieee754_atan2+0x1b8>
 800bf1c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800bf20:	4573      	cmp	r3, lr
 800bf22:	ec51 0b10 	vmov	r0, r1, d0
 800bf26:	ee11 8a10 	vmov	r8, s2
 800bf2a:	d80a      	bhi.n	800bf42 <__ieee754_atan2+0x3a>
 800bf2c:	4244      	negs	r4, r0
 800bf2e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bf32:	4304      	orrs	r4, r0
 800bf34:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800bf38:	4574      	cmp	r4, lr
 800bf3a:	468c      	mov	ip, r1
 800bf3c:	ee10 9a10 	vmov	r9, s0
 800bf40:	d907      	bls.n	800bf52 <__ieee754_atan2+0x4a>
 800bf42:	4632      	mov	r2, r6
 800bf44:	463b      	mov	r3, r7
 800bf46:	f7f4 f9a1 	bl	800028c <__adddf3>
 800bf4a:	ec41 0b10 	vmov	d0, r0, r1
 800bf4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf52:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800bf56:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bf5a:	4334      	orrs	r4, r6
 800bf5c:	d103      	bne.n	800bf66 <__ieee754_atan2+0x5e>
 800bf5e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf62:	f000 b8b1 	b.w	800c0c8 <atan>
 800bf66:	17bc      	asrs	r4, r7, #30
 800bf68:	f004 0402 	and.w	r4, r4, #2
 800bf6c:	ea53 0909 	orrs.w	r9, r3, r9
 800bf70:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800bf74:	d107      	bne.n	800bf86 <__ieee754_atan2+0x7e>
 800bf76:	2c02      	cmp	r4, #2
 800bf78:	d073      	beq.n	800c062 <__ieee754_atan2+0x15a>
 800bf7a:	2c03      	cmp	r4, #3
 800bf7c:	d1e5      	bne.n	800bf4a <__ieee754_atan2+0x42>
 800bf7e:	a13e      	add	r1, pc, #248	; (adr r1, 800c078 <__ieee754_atan2+0x170>)
 800bf80:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf84:	e7e1      	b.n	800bf4a <__ieee754_atan2+0x42>
 800bf86:	ea52 0808 	orrs.w	r8, r2, r8
 800bf8a:	d106      	bne.n	800bf9a <__ieee754_atan2+0x92>
 800bf8c:	f1bc 0f00 	cmp.w	ip, #0
 800bf90:	da6b      	bge.n	800c06a <__ieee754_atan2+0x162>
 800bf92:	a13b      	add	r1, pc, #236	; (adr r1, 800c080 <__ieee754_atan2+0x178>)
 800bf94:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf98:	e7d7      	b.n	800bf4a <__ieee754_atan2+0x42>
 800bf9a:	4572      	cmp	r2, lr
 800bf9c:	d120      	bne.n	800bfe0 <__ieee754_atan2+0xd8>
 800bf9e:	4293      	cmp	r3, r2
 800bfa0:	d111      	bne.n	800bfc6 <__ieee754_atan2+0xbe>
 800bfa2:	2c02      	cmp	r4, #2
 800bfa4:	d007      	beq.n	800bfb6 <__ieee754_atan2+0xae>
 800bfa6:	2c03      	cmp	r4, #3
 800bfa8:	d009      	beq.n	800bfbe <__ieee754_atan2+0xb6>
 800bfaa:	2c01      	cmp	r4, #1
 800bfac:	d155      	bne.n	800c05a <__ieee754_atan2+0x152>
 800bfae:	a136      	add	r1, pc, #216	; (adr r1, 800c088 <__ieee754_atan2+0x180>)
 800bfb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bfb4:	e7c9      	b.n	800bf4a <__ieee754_atan2+0x42>
 800bfb6:	a136      	add	r1, pc, #216	; (adr r1, 800c090 <__ieee754_atan2+0x188>)
 800bfb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bfbc:	e7c5      	b.n	800bf4a <__ieee754_atan2+0x42>
 800bfbe:	a136      	add	r1, pc, #216	; (adr r1, 800c098 <__ieee754_atan2+0x190>)
 800bfc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bfc4:	e7c1      	b.n	800bf4a <__ieee754_atan2+0x42>
 800bfc6:	2c02      	cmp	r4, #2
 800bfc8:	d04b      	beq.n	800c062 <__ieee754_atan2+0x15a>
 800bfca:	2c03      	cmp	r4, #3
 800bfcc:	d0d7      	beq.n	800bf7e <__ieee754_atan2+0x76>
 800bfce:	2c01      	cmp	r4, #1
 800bfd0:	f04f 0000 	mov.w	r0, #0
 800bfd4:	d102      	bne.n	800bfdc <__ieee754_atan2+0xd4>
 800bfd6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800bfda:	e7b6      	b.n	800bf4a <__ieee754_atan2+0x42>
 800bfdc:	2100      	movs	r1, #0
 800bfde:	e7b4      	b.n	800bf4a <__ieee754_atan2+0x42>
 800bfe0:	4573      	cmp	r3, lr
 800bfe2:	d0d3      	beq.n	800bf8c <__ieee754_atan2+0x84>
 800bfe4:	1a9b      	subs	r3, r3, r2
 800bfe6:	151b      	asrs	r3, r3, #20
 800bfe8:	2b3c      	cmp	r3, #60	; 0x3c
 800bfea:	dc1e      	bgt.n	800c02a <__ieee754_atan2+0x122>
 800bfec:	2f00      	cmp	r7, #0
 800bfee:	da01      	bge.n	800bff4 <__ieee754_atan2+0xec>
 800bff0:	333c      	adds	r3, #60	; 0x3c
 800bff2:	db1e      	blt.n	800c032 <__ieee754_atan2+0x12a>
 800bff4:	4632      	mov	r2, r6
 800bff6:	463b      	mov	r3, r7
 800bff8:	f7f4 fc28 	bl	800084c <__aeabi_ddiv>
 800bffc:	ec41 0b10 	vmov	d0, r0, r1
 800c000:	f000 fa02 	bl	800c408 <fabs>
 800c004:	f000 f860 	bl	800c0c8 <atan>
 800c008:	ec51 0b10 	vmov	r0, r1, d0
 800c00c:	2c01      	cmp	r4, #1
 800c00e:	d013      	beq.n	800c038 <__ieee754_atan2+0x130>
 800c010:	2c02      	cmp	r4, #2
 800c012:	d015      	beq.n	800c040 <__ieee754_atan2+0x138>
 800c014:	2c00      	cmp	r4, #0
 800c016:	d098      	beq.n	800bf4a <__ieee754_atan2+0x42>
 800c018:	a321      	add	r3, pc, #132	; (adr r3, 800c0a0 <__ieee754_atan2+0x198>)
 800c01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c01e:	f7f4 f933 	bl	8000288 <__aeabi_dsub>
 800c022:	a321      	add	r3, pc, #132	; (adr r3, 800c0a8 <__ieee754_atan2+0x1a0>)
 800c024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c028:	e014      	b.n	800c054 <__ieee754_atan2+0x14c>
 800c02a:	a121      	add	r1, pc, #132	; (adr r1, 800c0b0 <__ieee754_atan2+0x1a8>)
 800c02c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c030:	e7ec      	b.n	800c00c <__ieee754_atan2+0x104>
 800c032:	2000      	movs	r0, #0
 800c034:	2100      	movs	r1, #0
 800c036:	e7e9      	b.n	800c00c <__ieee754_atan2+0x104>
 800c038:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c03c:	4619      	mov	r1, r3
 800c03e:	e784      	b.n	800bf4a <__ieee754_atan2+0x42>
 800c040:	a317      	add	r3, pc, #92	; (adr r3, 800c0a0 <__ieee754_atan2+0x198>)
 800c042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c046:	f7f4 f91f 	bl	8000288 <__aeabi_dsub>
 800c04a:	4602      	mov	r2, r0
 800c04c:	460b      	mov	r3, r1
 800c04e:	a116      	add	r1, pc, #88	; (adr r1, 800c0a8 <__ieee754_atan2+0x1a0>)
 800c050:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c054:	f7f4 f918 	bl	8000288 <__aeabi_dsub>
 800c058:	e777      	b.n	800bf4a <__ieee754_atan2+0x42>
 800c05a:	a117      	add	r1, pc, #92	; (adr r1, 800c0b8 <__ieee754_atan2+0x1b0>)
 800c05c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c060:	e773      	b.n	800bf4a <__ieee754_atan2+0x42>
 800c062:	a111      	add	r1, pc, #68	; (adr r1, 800c0a8 <__ieee754_atan2+0x1a0>)
 800c064:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c068:	e76f      	b.n	800bf4a <__ieee754_atan2+0x42>
 800c06a:	a111      	add	r1, pc, #68	; (adr r1, 800c0b0 <__ieee754_atan2+0x1a8>)
 800c06c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c070:	e76b      	b.n	800bf4a <__ieee754_atan2+0x42>
 800c072:	bf00      	nop
 800c074:	f3af 8000 	nop.w
 800c078:	54442d18 	.word	0x54442d18
 800c07c:	c00921fb 	.word	0xc00921fb
 800c080:	54442d18 	.word	0x54442d18
 800c084:	bff921fb 	.word	0xbff921fb
 800c088:	54442d18 	.word	0x54442d18
 800c08c:	bfe921fb 	.word	0xbfe921fb
 800c090:	7f3321d2 	.word	0x7f3321d2
 800c094:	4002d97c 	.word	0x4002d97c
 800c098:	7f3321d2 	.word	0x7f3321d2
 800c09c:	c002d97c 	.word	0xc002d97c
 800c0a0:	33145c07 	.word	0x33145c07
 800c0a4:	3ca1a626 	.word	0x3ca1a626
 800c0a8:	54442d18 	.word	0x54442d18
 800c0ac:	400921fb 	.word	0x400921fb
 800c0b0:	54442d18 	.word	0x54442d18
 800c0b4:	3ff921fb 	.word	0x3ff921fb
 800c0b8:	54442d18 	.word	0x54442d18
 800c0bc:	3fe921fb 	.word	0x3fe921fb
 800c0c0:	7ff00000 	.word	0x7ff00000
 800c0c4:	00000000 	.word	0x00000000

0800c0c8 <atan>:
 800c0c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0cc:	ec55 4b10 	vmov	r4, r5, d0
 800c0d0:	4bc3      	ldr	r3, [pc, #780]	; (800c3e0 <atan+0x318>)
 800c0d2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c0d6:	429e      	cmp	r6, r3
 800c0d8:	46ab      	mov	fp, r5
 800c0da:	dd18      	ble.n	800c10e <atan+0x46>
 800c0dc:	4bc1      	ldr	r3, [pc, #772]	; (800c3e4 <atan+0x31c>)
 800c0de:	429e      	cmp	r6, r3
 800c0e0:	dc01      	bgt.n	800c0e6 <atan+0x1e>
 800c0e2:	d109      	bne.n	800c0f8 <atan+0x30>
 800c0e4:	b144      	cbz	r4, 800c0f8 <atan+0x30>
 800c0e6:	4622      	mov	r2, r4
 800c0e8:	462b      	mov	r3, r5
 800c0ea:	4620      	mov	r0, r4
 800c0ec:	4629      	mov	r1, r5
 800c0ee:	f7f4 f8cd 	bl	800028c <__adddf3>
 800c0f2:	4604      	mov	r4, r0
 800c0f4:	460d      	mov	r5, r1
 800c0f6:	e006      	b.n	800c106 <atan+0x3e>
 800c0f8:	f1bb 0f00 	cmp.w	fp, #0
 800c0fc:	f340 8131 	ble.w	800c362 <atan+0x29a>
 800c100:	a59b      	add	r5, pc, #620	; (adr r5, 800c370 <atan+0x2a8>)
 800c102:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c106:	ec45 4b10 	vmov	d0, r4, r5
 800c10a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c10e:	4bb6      	ldr	r3, [pc, #728]	; (800c3e8 <atan+0x320>)
 800c110:	429e      	cmp	r6, r3
 800c112:	dc14      	bgt.n	800c13e <atan+0x76>
 800c114:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c118:	429e      	cmp	r6, r3
 800c11a:	dc0d      	bgt.n	800c138 <atan+0x70>
 800c11c:	a396      	add	r3, pc, #600	; (adr r3, 800c378 <atan+0x2b0>)
 800c11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c122:	ee10 0a10 	vmov	r0, s0
 800c126:	4629      	mov	r1, r5
 800c128:	f7f4 f8b0 	bl	800028c <__adddf3>
 800c12c:	2200      	movs	r2, #0
 800c12e:	4baf      	ldr	r3, [pc, #700]	; (800c3ec <atan+0x324>)
 800c130:	f7f4 fcf2 	bl	8000b18 <__aeabi_dcmpgt>
 800c134:	2800      	cmp	r0, #0
 800c136:	d1e6      	bne.n	800c106 <atan+0x3e>
 800c138:	f04f 3aff 	mov.w	sl, #4294967295
 800c13c:	e02b      	b.n	800c196 <atan+0xce>
 800c13e:	f000 f963 	bl	800c408 <fabs>
 800c142:	4bab      	ldr	r3, [pc, #684]	; (800c3f0 <atan+0x328>)
 800c144:	429e      	cmp	r6, r3
 800c146:	ec55 4b10 	vmov	r4, r5, d0
 800c14a:	f300 80bf 	bgt.w	800c2cc <atan+0x204>
 800c14e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c152:	429e      	cmp	r6, r3
 800c154:	f300 80a0 	bgt.w	800c298 <atan+0x1d0>
 800c158:	ee10 2a10 	vmov	r2, s0
 800c15c:	ee10 0a10 	vmov	r0, s0
 800c160:	462b      	mov	r3, r5
 800c162:	4629      	mov	r1, r5
 800c164:	f7f4 f892 	bl	800028c <__adddf3>
 800c168:	2200      	movs	r2, #0
 800c16a:	4ba0      	ldr	r3, [pc, #640]	; (800c3ec <atan+0x324>)
 800c16c:	f7f4 f88c 	bl	8000288 <__aeabi_dsub>
 800c170:	2200      	movs	r2, #0
 800c172:	4606      	mov	r6, r0
 800c174:	460f      	mov	r7, r1
 800c176:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c17a:	4620      	mov	r0, r4
 800c17c:	4629      	mov	r1, r5
 800c17e:	f7f4 f885 	bl	800028c <__adddf3>
 800c182:	4602      	mov	r2, r0
 800c184:	460b      	mov	r3, r1
 800c186:	4630      	mov	r0, r6
 800c188:	4639      	mov	r1, r7
 800c18a:	f7f4 fb5f 	bl	800084c <__aeabi_ddiv>
 800c18e:	f04f 0a00 	mov.w	sl, #0
 800c192:	4604      	mov	r4, r0
 800c194:	460d      	mov	r5, r1
 800c196:	4622      	mov	r2, r4
 800c198:	462b      	mov	r3, r5
 800c19a:	4620      	mov	r0, r4
 800c19c:	4629      	mov	r1, r5
 800c19e:	f7f4 fa2b 	bl	80005f8 <__aeabi_dmul>
 800c1a2:	4602      	mov	r2, r0
 800c1a4:	460b      	mov	r3, r1
 800c1a6:	4680      	mov	r8, r0
 800c1a8:	4689      	mov	r9, r1
 800c1aa:	f7f4 fa25 	bl	80005f8 <__aeabi_dmul>
 800c1ae:	a374      	add	r3, pc, #464	; (adr r3, 800c380 <atan+0x2b8>)
 800c1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1b4:	4606      	mov	r6, r0
 800c1b6:	460f      	mov	r7, r1
 800c1b8:	f7f4 fa1e 	bl	80005f8 <__aeabi_dmul>
 800c1bc:	a372      	add	r3, pc, #456	; (adr r3, 800c388 <atan+0x2c0>)
 800c1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c2:	f7f4 f863 	bl	800028c <__adddf3>
 800c1c6:	4632      	mov	r2, r6
 800c1c8:	463b      	mov	r3, r7
 800c1ca:	f7f4 fa15 	bl	80005f8 <__aeabi_dmul>
 800c1ce:	a370      	add	r3, pc, #448	; (adr r3, 800c390 <atan+0x2c8>)
 800c1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d4:	f7f4 f85a 	bl	800028c <__adddf3>
 800c1d8:	4632      	mov	r2, r6
 800c1da:	463b      	mov	r3, r7
 800c1dc:	f7f4 fa0c 	bl	80005f8 <__aeabi_dmul>
 800c1e0:	a36d      	add	r3, pc, #436	; (adr r3, 800c398 <atan+0x2d0>)
 800c1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e6:	f7f4 f851 	bl	800028c <__adddf3>
 800c1ea:	4632      	mov	r2, r6
 800c1ec:	463b      	mov	r3, r7
 800c1ee:	f7f4 fa03 	bl	80005f8 <__aeabi_dmul>
 800c1f2:	a36b      	add	r3, pc, #428	; (adr r3, 800c3a0 <atan+0x2d8>)
 800c1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f8:	f7f4 f848 	bl	800028c <__adddf3>
 800c1fc:	4632      	mov	r2, r6
 800c1fe:	463b      	mov	r3, r7
 800c200:	f7f4 f9fa 	bl	80005f8 <__aeabi_dmul>
 800c204:	a368      	add	r3, pc, #416	; (adr r3, 800c3a8 <atan+0x2e0>)
 800c206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20a:	f7f4 f83f 	bl	800028c <__adddf3>
 800c20e:	4642      	mov	r2, r8
 800c210:	464b      	mov	r3, r9
 800c212:	f7f4 f9f1 	bl	80005f8 <__aeabi_dmul>
 800c216:	a366      	add	r3, pc, #408	; (adr r3, 800c3b0 <atan+0x2e8>)
 800c218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c21c:	4680      	mov	r8, r0
 800c21e:	4689      	mov	r9, r1
 800c220:	4630      	mov	r0, r6
 800c222:	4639      	mov	r1, r7
 800c224:	f7f4 f9e8 	bl	80005f8 <__aeabi_dmul>
 800c228:	a363      	add	r3, pc, #396	; (adr r3, 800c3b8 <atan+0x2f0>)
 800c22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c22e:	f7f4 f82b 	bl	8000288 <__aeabi_dsub>
 800c232:	4632      	mov	r2, r6
 800c234:	463b      	mov	r3, r7
 800c236:	f7f4 f9df 	bl	80005f8 <__aeabi_dmul>
 800c23a:	a361      	add	r3, pc, #388	; (adr r3, 800c3c0 <atan+0x2f8>)
 800c23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c240:	f7f4 f822 	bl	8000288 <__aeabi_dsub>
 800c244:	4632      	mov	r2, r6
 800c246:	463b      	mov	r3, r7
 800c248:	f7f4 f9d6 	bl	80005f8 <__aeabi_dmul>
 800c24c:	a35e      	add	r3, pc, #376	; (adr r3, 800c3c8 <atan+0x300>)
 800c24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c252:	f7f4 f819 	bl	8000288 <__aeabi_dsub>
 800c256:	4632      	mov	r2, r6
 800c258:	463b      	mov	r3, r7
 800c25a:	f7f4 f9cd 	bl	80005f8 <__aeabi_dmul>
 800c25e:	a35c      	add	r3, pc, #368	; (adr r3, 800c3d0 <atan+0x308>)
 800c260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c264:	f7f4 f810 	bl	8000288 <__aeabi_dsub>
 800c268:	4632      	mov	r2, r6
 800c26a:	463b      	mov	r3, r7
 800c26c:	f7f4 f9c4 	bl	80005f8 <__aeabi_dmul>
 800c270:	4602      	mov	r2, r0
 800c272:	460b      	mov	r3, r1
 800c274:	4640      	mov	r0, r8
 800c276:	4649      	mov	r1, r9
 800c278:	f7f4 f808 	bl	800028c <__adddf3>
 800c27c:	4622      	mov	r2, r4
 800c27e:	462b      	mov	r3, r5
 800c280:	f7f4 f9ba 	bl	80005f8 <__aeabi_dmul>
 800c284:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c288:	4602      	mov	r2, r0
 800c28a:	460b      	mov	r3, r1
 800c28c:	d14b      	bne.n	800c326 <atan+0x25e>
 800c28e:	4620      	mov	r0, r4
 800c290:	4629      	mov	r1, r5
 800c292:	f7f3 fff9 	bl	8000288 <__aeabi_dsub>
 800c296:	e72c      	b.n	800c0f2 <atan+0x2a>
 800c298:	ee10 0a10 	vmov	r0, s0
 800c29c:	2200      	movs	r2, #0
 800c29e:	4b53      	ldr	r3, [pc, #332]	; (800c3ec <atan+0x324>)
 800c2a0:	4629      	mov	r1, r5
 800c2a2:	f7f3 fff1 	bl	8000288 <__aeabi_dsub>
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	4606      	mov	r6, r0
 800c2aa:	460f      	mov	r7, r1
 800c2ac:	4b4f      	ldr	r3, [pc, #316]	; (800c3ec <atan+0x324>)
 800c2ae:	4620      	mov	r0, r4
 800c2b0:	4629      	mov	r1, r5
 800c2b2:	f7f3 ffeb 	bl	800028c <__adddf3>
 800c2b6:	4602      	mov	r2, r0
 800c2b8:	460b      	mov	r3, r1
 800c2ba:	4630      	mov	r0, r6
 800c2bc:	4639      	mov	r1, r7
 800c2be:	f7f4 fac5 	bl	800084c <__aeabi_ddiv>
 800c2c2:	f04f 0a01 	mov.w	sl, #1
 800c2c6:	4604      	mov	r4, r0
 800c2c8:	460d      	mov	r5, r1
 800c2ca:	e764      	b.n	800c196 <atan+0xce>
 800c2cc:	4b49      	ldr	r3, [pc, #292]	; (800c3f4 <atan+0x32c>)
 800c2ce:	429e      	cmp	r6, r3
 800c2d0:	dc1d      	bgt.n	800c30e <atan+0x246>
 800c2d2:	ee10 0a10 	vmov	r0, s0
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	4b47      	ldr	r3, [pc, #284]	; (800c3f8 <atan+0x330>)
 800c2da:	4629      	mov	r1, r5
 800c2dc:	f7f3 ffd4 	bl	8000288 <__aeabi_dsub>
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	4606      	mov	r6, r0
 800c2e4:	460f      	mov	r7, r1
 800c2e6:	4b44      	ldr	r3, [pc, #272]	; (800c3f8 <atan+0x330>)
 800c2e8:	4620      	mov	r0, r4
 800c2ea:	4629      	mov	r1, r5
 800c2ec:	f7f4 f984 	bl	80005f8 <__aeabi_dmul>
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	4b3e      	ldr	r3, [pc, #248]	; (800c3ec <atan+0x324>)
 800c2f4:	f7f3 ffca 	bl	800028c <__adddf3>
 800c2f8:	4602      	mov	r2, r0
 800c2fa:	460b      	mov	r3, r1
 800c2fc:	4630      	mov	r0, r6
 800c2fe:	4639      	mov	r1, r7
 800c300:	f7f4 faa4 	bl	800084c <__aeabi_ddiv>
 800c304:	f04f 0a02 	mov.w	sl, #2
 800c308:	4604      	mov	r4, r0
 800c30a:	460d      	mov	r5, r1
 800c30c:	e743      	b.n	800c196 <atan+0xce>
 800c30e:	462b      	mov	r3, r5
 800c310:	ee10 2a10 	vmov	r2, s0
 800c314:	2000      	movs	r0, #0
 800c316:	4939      	ldr	r1, [pc, #228]	; (800c3fc <atan+0x334>)
 800c318:	f7f4 fa98 	bl	800084c <__aeabi_ddiv>
 800c31c:	f04f 0a03 	mov.w	sl, #3
 800c320:	4604      	mov	r4, r0
 800c322:	460d      	mov	r5, r1
 800c324:	e737      	b.n	800c196 <atan+0xce>
 800c326:	4b36      	ldr	r3, [pc, #216]	; (800c400 <atan+0x338>)
 800c328:	4e36      	ldr	r6, [pc, #216]	; (800c404 <atan+0x33c>)
 800c32a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800c32e:	4456      	add	r6, sl
 800c330:	449a      	add	sl, r3
 800c332:	e9da 2300 	ldrd	r2, r3, [sl]
 800c336:	f7f3 ffa7 	bl	8000288 <__aeabi_dsub>
 800c33a:	4622      	mov	r2, r4
 800c33c:	462b      	mov	r3, r5
 800c33e:	f7f3 ffa3 	bl	8000288 <__aeabi_dsub>
 800c342:	4602      	mov	r2, r0
 800c344:	460b      	mov	r3, r1
 800c346:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c34a:	f7f3 ff9d 	bl	8000288 <__aeabi_dsub>
 800c34e:	f1bb 0f00 	cmp.w	fp, #0
 800c352:	4604      	mov	r4, r0
 800c354:	460d      	mov	r5, r1
 800c356:	f6bf aed6 	bge.w	800c106 <atan+0x3e>
 800c35a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c35e:	461d      	mov	r5, r3
 800c360:	e6d1      	b.n	800c106 <atan+0x3e>
 800c362:	a51d      	add	r5, pc, #116	; (adr r5, 800c3d8 <atan+0x310>)
 800c364:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c368:	e6cd      	b.n	800c106 <atan+0x3e>
 800c36a:	bf00      	nop
 800c36c:	f3af 8000 	nop.w
 800c370:	54442d18 	.word	0x54442d18
 800c374:	3ff921fb 	.word	0x3ff921fb
 800c378:	8800759c 	.word	0x8800759c
 800c37c:	7e37e43c 	.word	0x7e37e43c
 800c380:	e322da11 	.word	0xe322da11
 800c384:	3f90ad3a 	.word	0x3f90ad3a
 800c388:	24760deb 	.word	0x24760deb
 800c38c:	3fa97b4b 	.word	0x3fa97b4b
 800c390:	a0d03d51 	.word	0xa0d03d51
 800c394:	3fb10d66 	.word	0x3fb10d66
 800c398:	c54c206e 	.word	0xc54c206e
 800c39c:	3fb745cd 	.word	0x3fb745cd
 800c3a0:	920083ff 	.word	0x920083ff
 800c3a4:	3fc24924 	.word	0x3fc24924
 800c3a8:	5555550d 	.word	0x5555550d
 800c3ac:	3fd55555 	.word	0x3fd55555
 800c3b0:	2c6a6c2f 	.word	0x2c6a6c2f
 800c3b4:	bfa2b444 	.word	0xbfa2b444
 800c3b8:	52defd9a 	.word	0x52defd9a
 800c3bc:	3fadde2d 	.word	0x3fadde2d
 800c3c0:	af749a6d 	.word	0xaf749a6d
 800c3c4:	3fb3b0f2 	.word	0x3fb3b0f2
 800c3c8:	fe231671 	.word	0xfe231671
 800c3cc:	3fbc71c6 	.word	0x3fbc71c6
 800c3d0:	9998ebc4 	.word	0x9998ebc4
 800c3d4:	3fc99999 	.word	0x3fc99999
 800c3d8:	54442d18 	.word	0x54442d18
 800c3dc:	bff921fb 	.word	0xbff921fb
 800c3e0:	440fffff 	.word	0x440fffff
 800c3e4:	7ff00000 	.word	0x7ff00000
 800c3e8:	3fdbffff 	.word	0x3fdbffff
 800c3ec:	3ff00000 	.word	0x3ff00000
 800c3f0:	3ff2ffff 	.word	0x3ff2ffff
 800c3f4:	40037fff 	.word	0x40037fff
 800c3f8:	3ff80000 	.word	0x3ff80000
 800c3fc:	bff00000 	.word	0xbff00000
 800c400:	0800c860 	.word	0x0800c860
 800c404:	0800c840 	.word	0x0800c840

0800c408 <fabs>:
 800c408:	ec51 0b10 	vmov	r0, r1, d0
 800c40c:	ee10 2a10 	vmov	r2, s0
 800c410:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c414:	ec43 2b10 	vmov	d0, r2, r3
 800c418:	4770      	bx	lr
	...

0800c41c <_init>:
 800c41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c41e:	bf00      	nop
 800c420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c422:	bc08      	pop	{r3}
 800c424:	469e      	mov	lr, r3
 800c426:	4770      	bx	lr

0800c428 <_fini>:
 800c428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c42a:	bf00      	nop
 800c42c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c42e:	bc08      	pop	{r3}
 800c430:	469e      	mov	lr, r3
 800c432:	4770      	bx	lr
